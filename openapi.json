{
  "openapi": "3.0.3",
  "servers": [
    {
      "description": "HyperOne API",
      "url": "https://api.hyperone.com/v2"
    }
  ],
  "info": {
    "version": "0.1.0",
    "title": "HyperOne",
    "description": "HyperOne API"
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/iam/user/{userId}": {
      "get": {
        "summary": "Get iam/user",
        "description": "Returns a single user",
        "operationId": "user_get",
        "tags": ["iam_user"],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/user/get"]
      },
      "patch": {
        "summary": "Update iam/user",
        "description": "Returns modified user",
        "operationId": "user_update",
        "tags": ["iam_user"],
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/iam/user/{userId}/credential/authtoken": {
      "get": {
        "summary": "List iam/user.credential",
        "description": "List iam/user.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "operationId": "user_credential_authtoken_list",
        "tags": ["iam_user"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "AuthToken collection",
                  "items": {
                    "$ref": "#/components/schemas/authToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/user.credential/list"]
      }
    },
    "/iam/user/{userId}/credential/authtoken/{authtokenId}": {
      "get": {
        "summary": "Get iam/user.credential",
        "description": "Get iam/user.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "name": "authtokenId",
            "in": "path",
            "description": "authtokenId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "user_credential_authtoken_get",
        "tags": ["iam_user"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/authToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/user.credential/get"]
      },
      "delete": {
        "summary": "Delete iam/user.credential",
        "description": "Delete iam/user.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "name": "authtokenId",
            "in": "path",
            "description": "authtokenId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "user_credential_authtoken_delete",
        "tags": ["iam_user"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/user.credential/delete"]
      }
    },
    "/iam/user/{userId}/credential": {
      "get": {
        "summary": "List iam/user.credential",
        "description": "List iam/user.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "operationId": "user_credential_list",
        "tags": ["iam_user"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "User.credential collection",
                  "items": {
                    "$ref": "#/components/schemas/user.credential"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/user.credential/list"]
      },
      "post": {
        "summary": "Create iam/user.credential",
        "description": "Create iam/user.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "operationId": "user_credential_create",
        "tags": ["iam_user"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user.credential"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/user.credential/create"]
      }
    },
    "/iam/user/{userId}/credential/{credentialId}": {
      "get": {
        "summary": "Get iam/user.credential",
        "description": "Get iam/user.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "user_credential_get",
        "tags": ["iam_user"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/user.credential/get"]
      },
      "patch": {
        "summary": "Update iam/user.credential",
        "description": "Update iam/user.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "user_credential_patch",
        "tags": ["iam_user"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user_credential_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete iam/user.credential",
        "description": "Delete iam/user.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "user_credential_delete",
        "tags": ["iam_user"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/user.credential/delete"]
      }
    },
    "/iam/user/{userId}/service": {
      "get": {
        "summary": "List iam/user.service",
        "description": "List iam/user.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          }
        ],
        "operationId": "user_service_list",
        "tags": ["iam_user"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/user.service/list"]
      }
    },
    "/iam/user/{userId}/service/{serviceId}": {
      "get": {
        "summary": "Get iam/user.service",
        "description": "Get iam/user.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/userId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "user_service_get",
        "tags": ["iam_user"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/user.service/get"]
      }
    },
    "/iam/project": {
      "post": {
        "summary": "Create iam/project",
        "description": "Create project",
        "operationId": "project_create",
        "tags": ["iam_project"],
        "parameters": [
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": []
      },
      "get": {
        "summary": "List iam/project",
        "description": "List project",
        "operationId": "project_list",
        "parameters": [
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$limit",
            "description": "Filter by $limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "active",
            "description": "Filter by active",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "organisation",
            "description": "Filter by organisation",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri",
              "x-resource": {
                "kind": "iam/organisation"
              },
              "x-permissions": []
            }
          },
          {
            "name": "$lean",
            "description": "return a lightweight version of the resource",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Project collection",
                  "items": {
                    "$ref": "#/components/schemas/project"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": []
      }
    },
    "/iam/project/{projectId}": {
      "get": {
        "summary": "Get iam/project",
        "description": "Returns a single project",
        "operationId": "project_get",
        "tags": ["iam_project"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project/get"]
      },
      "patch": {
        "summary": "Update iam/project",
        "description": "Returns modified project",
        "operationId": "project_update",
        "tags": ["iam_project"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete iam/project",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_delete",
        "description": "Delete project",
        "tags": ["iam_project"],
        "x-permissions": ["iam/project/delete"],
        "x-state": ["Active"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/iam/project/{projectId}/billing": {
      "get": {
        "summary": "List iam/project.billing",
        "description": "List iam/project.billing",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "resource.type",
            "in": "query",
            "description": "resource.type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_billing_list",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Billing collection",
                  "items": {
                    "$ref": "#/components/schemas/billing"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.billing/list"],
        "x-audience": "developer"
      }
    },
    "/iam/project/{projectId}/payment": {
      "get": {
        "summary": "List iam/project.payment",
        "description": "List iam/project.payment",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_payment_list",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Payment collection",
                  "items": {
                    "$ref": "#/components/schemas/payment"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.payment/list"]
      }
    },
    "/iam/project/{projectId}/invoice": {
      "get": {
        "summary": "List iam/project.invoice",
        "description": "List iam/project.invoice",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_invoice_list",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Invoice collection",
                  "items": {
                    "$ref": "#/components/schemas/invoice"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.invoice/list"]
      }
    },
    "/iam/project/{projectId}/proforma": {
      "get": {
        "summary": "List iam/project.proforma",
        "description": "List iam/project.proforma",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_proforma_list",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Proforma collection",
                  "items": {
                    "$ref": "#/components/schemas/proforma"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.proforma/list"]
      }
    },
    "/iam/project/{projectId}/credentialStore": {
      "get": {
        "summary": "List iam/project.credentialStore",
        "description": "List iam/project.credentialStore",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_credentialStore_list",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Project.credential collection",
                  "items": {
                    "$ref": "#/components/schemas/project.credential"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.credentialStore/list"]
      },
      "post": {
        "summary": "Create iam/project.credentialStore",
        "description": "Create iam/project.credentialStore",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_credentialStore_create",
        "tags": ["iam_project"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project.credential"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.credentialStore/create"]
      }
    },
    "/iam/project/{projectId}/credentialStore/{credentialId}": {
      "get": {
        "summary": "Get iam/project.credentialStore",
        "description": "Get iam/project.credentialStore",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_credentialStore_get",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.credentialStore/get"]
      },
      "patch": {
        "summary": "Update iam/project.credentialStore",
        "description": "Update iam/project.credentialStore",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_credentialStore_patch",
        "tags": ["iam_project"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project_credentialStore_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete iam/project.credentialStore",
        "description": "Delete iam/project.credentialStore",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_credentialStore_delete",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.credentialStore/delete"]
      }
    },
    "/iam/project/{projectId}/quota": {
      "get": {
        "summary": "List iam/project.quota",
        "description": "List iam/project.quota",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_quota_list",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Quota collection",
                  "items": {
                    "$ref": "#/components/schemas/quota"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.quota/list"]
      }
    },
    "/iam/project/{projectId}/quota/{quotaId}": {
      "get": {
        "summary": "Get iam/project.quota",
        "description": "Get iam/project.quota",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "quotaId",
            "in": "path",
            "description": "quotaId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_quota_get",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quota"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.quota/get"]
      }
    },
    "/iam/project/{projectId}/quota/{quotaId}/limit": {
      "patch": {
        "summary": "Update iam/project.limit",
        "description": "Update iam/project.limit",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "quotaId",
            "in": "path",
            "description": "quotaId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_quota_limit_patch",
        "tags": ["iam_project"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project_quota_limit_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quotaLimit"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/iam/project/{projectId}/invitation": {
      "get": {
        "summary": "List iam/project.invitation",
        "description": "List iam/project.invitation",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "resource",
            "in": "query",
            "description": "resource",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_invitation_list",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Invitation collection",
                  "items": {
                    "$ref": "#/components/schemas/invitation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.invitation/list"]
      }
    },
    "/iam/project/{projectId}/invitation/{invitationId}": {
      "get": {
        "summary": "Get iam/project.invitation",
        "description": "Get iam/project.invitation",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "invitationId",
            "in": "path",
            "description": "invitationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_invitation_get",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invitation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.invitation/get"]
      },
      "delete": {
        "summary": "Delete iam/project.invitation",
        "description": "Delete iam/project.invitation",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "invitationId",
            "in": "path",
            "description": "invitationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_invitation_delete",
        "tags": ["iam_project"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.invitation/delete"]
      }
    },
    "/iam/project/{projectId}/invitation/{invitationId}/actions/accept": {
      "post": {
        "summary": "Create iam/project.actions",
        "description": "Create iam/project.actions",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "invitationId",
            "in": "path",
            "description": "invitationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_invitation_accept",
        "tags": ["iam_project"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project_invitation_accept"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invitation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [],
        "x-audience": "developer"
      }
    },
    "/iam/project/{projectId}/ownership": {
      "post": {
        "summary": "Create iam/project.ownership",
        "description": "Create iam/project.ownership",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_ownership_create",
        "tags": ["iam_project"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/project_ownership_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/project"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.ownership/create"]
      },
      "get": {
        "summary": "List iam/project.ownership",
        "description": "List iam/project.ownership",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_ownership_list",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Ownership collection",
                  "items": {
                    "$ref": "#/components/schemas/ownership"
                  }
                }
              }
            },
            "links": {
              "invitation": {
                "operationId": "project_invitation_list",
                "parameters": {
                  "resource": "$path"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.ownership/list"]
      }
    },
    "/iam/project/{projectId}/ownership/{ownershipId}": {
      "get": {
        "summary": "Get iam/project.ownership",
        "description": "Get iam/project.ownership",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "ownershipId",
            "in": "path",
            "description": "ownershipId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_ownership_get",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ownership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.ownership/get"]
      },
      "delete": {
        "summary": "Delete iam/project.ownership",
        "description": "Delete iam/project.ownership",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "ownershipId",
            "in": "path",
            "description": "ownershipId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_ownership_delete",
        "tags": ["iam_project"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.ownership/delete"]
      }
    },
    "/iam/project/{projectId}/service": {
      "get": {
        "summary": "List iam/project.service",
        "description": "List iam/project.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_service_list",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.service/list"]
      }
    },
    "/iam/project/{projectId}/service/{serviceId}": {
      "get": {
        "summary": "Get iam/project.service",
        "description": "Get iam/project.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_service_get",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.service/get"]
      }
    },
    "/iam/project/{projectId}/tag": {
      "get": {
        "summary": "List iam/project.tag",
        "description": "List iam/project.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_tag_list",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.tag/list"]
      },
      "put": {
        "summary": "Replace iam/project.tag",
        "description": "Replace iam/project.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_tag_put",
        "tags": ["iam_project"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.tag/create", "iam/project.tag/delete"]
      },
      "post": {
        "summary": "Create iam/project.tag",
        "description": "Create iam/project.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          }
        ],
        "operationId": "project_tag_create",
        "tags": ["iam_project"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.tag/create"]
      }
    },
    "/iam/project/{projectId}/tag/{tagId}": {
      "get": {
        "summary": "Get iam/project.tag",
        "description": "Get iam/project.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_tag_get",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.tag/get"]
      },
      "delete": {
        "summary": "Delete iam/project.tag",
        "description": "Delete iam/project.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_tag_delete",
        "tags": ["iam_project"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.tag/delete"]
      }
    },
    "/iam/project/{projectId}/event": {
      "get": {
        "summary": "List iam/project.event",
        "description": "List iam/project.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "project_event_list",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.event/list"]
      }
    },
    "/iam/project/{projectId}/event/{eventId}": {
      "get": {
        "summary": "Get iam/project.event",
        "description": "Get iam/project.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "project_event_get",
        "tags": ["iam_project"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/project.event/get"]
      }
    },
    "/support/project/{projectId}/ticket": {
      "post": {
        "summary": "Create support/ticket",
        "description": "Create ticket",
        "operationId": "support_project_ticket_create",
        "tags": ["support_project_ticket"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/support_project_ticket_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticket"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticket"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["support/ticket/create"]
      },
      "get": {
        "summary": "List support/ticket",
        "description": "List ticket",
        "operationId": "support_project_ticket_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "state",
            "description": "Filter by state",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["support_project_ticket"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Ticket collection",
                  "items": {
                    "$ref": "#/components/schemas/ticket"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["support/ticket/list"]
      }
    },
    "/support/project/{projectId}/ticket/{ticketId}": {
      "get": {
        "summary": "Get support/ticket",
        "description": "Returns a single ticket",
        "operationId": "support_project_ticket_get",
        "tags": ["support_project_ticket"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/ticketId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticket"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["support/ticket/get"]
      }
    },
    "/support/project/{projectId}/ticket/{ticketId}/actions/close": {
      "post": {
        "summary": "Close support/ticket",
        "description": "action close",
        "operationId": "support_project_ticket_close",
        "tags": ["support_project_ticket"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/ticketId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticket"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticket"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["support/ticket/close"],
        "x-state": ["open"]
      }
    },
    "/support/project/{projectId}/ticket/{ticketId}/message": {
      "get": {
        "summary": "List support/ticket.message",
        "description": "List support/ticket.message",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/ticketId"
          }
        ],
        "operationId": "support_project_ticket_message_list",
        "tags": ["support_project_ticket"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Support.message collection",
                  "items": {
                    "$ref": "#/components/schemas/support.message"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["support/ticket.message/list"]
      },
      "post": {
        "summary": "Create support/ticket.message",
        "description": "Create support/ticket.message",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/ticketId"
          }
        ],
        "operationId": "support_project_ticket_message_create",
        "tags": ["support_project_ticket"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/support.message"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/support.message"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["support/ticket.message/create"]
      }
    },
    "/support/project/{projectId}/ticket/{ticketId}/message/{messageId}": {
      "get": {
        "summary": "Get support/ticket.message",
        "description": "Get support/ticket.message",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/ticketId"
          },
          {
            "name": "messageId",
            "in": "path",
            "description": "messageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "support_project_ticket_message_get",
        "tags": ["support_project_ticket"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/support.message"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["support/ticket.message/get"]
      }
    },
    "/iam/organisation": {
      "post": {
        "summary": "Create iam/organisation",
        "description": "Create organisation",
        "operationId": "organisation_create",
        "tags": ["iam_organisation"],
        "parameters": [
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organisation_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organisation"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organisation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": []
      },
      "get": {
        "summary": "List iam/organisation",
        "description": "List organisation",
        "operationId": "organisation_list",
        "parameters": [
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "billing.company",
            "description": "Filter by billing.company",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$limit",
            "description": "Filter by $limit",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "active",
            "description": "Filter by active",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Organisation collection",
                  "items": {
                    "$ref": "#/components/schemas/organisation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": []
      }
    },
    "/iam/organisation/{organisationId}": {
      "get": {
        "summary": "Get iam/organisation",
        "description": "Returns a single organisation",
        "operationId": "organisation_get",
        "tags": ["iam_organisation"],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organisation"
                }
              }
            },
            "links": {
              "project": {
                "operationId": "project_list",
                "parameters": {
                  "organisation": "$request.path.organisationId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation/get"]
      },
      "patch": {
        "summary": "Update iam/organisation",
        "description": "Returns modified organisation",
        "operationId": "organisation_update",
        "tags": ["iam_organisation"],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organisation_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organisation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete iam/organisation",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          }
        ],
        "operationId": "organisation_delete",
        "description": "Delete organisation",
        "tags": ["iam_organisation"],
        "x-permissions": ["iam/organisation/delete"],
        "x-state": ["Active"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/iam/organisation/{organisationId}/actions/transfer_accept": {
      "post": {
        "summary": "Transfer accept iam/organisation",
        "description": "action transfer_accept",
        "operationId": "organisation_transfer_accept",
        "tags": ["iam_organisation"],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organisation"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organisation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.transfer/accept"],
        "x-state": ["Active"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organisation_transfer_accept"
              }
            }
          },
          "required": true
        }
      }
    },
    "/iam/organisation/{organisationId}/billing": {
      "get": {
        "summary": "List iam/organisation.billing",
        "description": "List iam/organisation.billing",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "start",
            "in": "query",
            "description": "start",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "end",
            "in": "query",
            "description": "end",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "resource.type",
            "in": "query",
            "description": "resource.type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_billing_list",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Billing collection",
                  "items": {
                    "$ref": "#/components/schemas/billing"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.billing/list"],
        "x-audience": "developer"
      }
    },
    "/iam/organisation/{organisationId}/payment": {
      "get": {
        "summary": "List iam/organisation.payment",
        "description": "List iam/organisation.payment",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          }
        ],
        "operationId": "organisation_payment_list",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Payment collection",
                  "items": {
                    "$ref": "#/components/schemas/payment"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.payment/list"]
      }
    },
    "/iam/organisation/{organisationId}/payment/{paymentId}": {
      "get": {
        "summary": "Get iam/organisation.payment",
        "description": "Get iam/organisation.payment",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "paymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_payment_get",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.payment/get"]
      }
    },
    "/iam/organisation/{organisationId}/payment/{paymentId}/actions/allocate": {
      "post": {
        "summary": "Create iam/organisation.actions",
        "description": "Create iam/organisation.actions",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "paymentId",
            "in": "path",
            "description": "paymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_payment_allocate",
        "tags": ["iam_organisation"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organisation_payment_allocate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.payment/allocate"],
        "x-state": ["Unallocated"]
      }
    },
    "/iam/organisation/{organisationId}/invoice": {
      "get": {
        "summary": "List iam/organisation.invoice",
        "description": "List iam/organisation.invoice",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          }
        ],
        "operationId": "organisation_invoice_list",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Invoice collection",
                  "items": {
                    "$ref": "#/components/schemas/invoice"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.invoice/list"]
      }
    },
    "/iam/organisation/{organisationId}/invoice/{invoiceId}": {
      "get": {
        "summary": "Get iam/organisation.invoice",
        "description": "Get iam/organisation.invoice",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "invoiceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_invoice_get",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proforma"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.invoice/get"]
      }
    },
    "/iam/organisation/{organisationId}/invoice/{invoiceId}/actions/download": {
      "post": {
        "summary": "Create iam/organisation.actions",
        "description": "Create iam/organisation.actions",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "invoiceId",
            "in": "path",
            "description": "invoiceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_invoice_download",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "PDF file",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.invoice/download"]
      }
    },
    "/iam/organisation/{organisationId}/proforma": {
      "post": {
        "summary": "Create iam/organisation.proforma",
        "description": "Create iam/organisation.proforma",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          }
        ],
        "operationId": "organisation_proforma_create",
        "tags": ["iam_organisation"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organisation_proforma_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proforma"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.proforma/create"]
      },
      "get": {
        "summary": "List iam/organisation.proforma",
        "description": "List iam/organisation.proforma",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          }
        ],
        "operationId": "organisation_proforma_list",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Proforma collection",
                  "items": {
                    "$ref": "#/components/schemas/proforma"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.proforma/list"]
      }
    },
    "/iam/organisation/{organisationId}/proforma/{proformaId}": {
      "get": {
        "summary": "Get iam/organisation.proforma",
        "description": "Get iam/organisation.proforma",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "proformaId",
            "in": "path",
            "description": "proformaId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_proforma_get",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/proforma"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.proforma/get"]
      }
    },
    "/iam/organisation/{organisationId}/proforma/{proformaId}/actions/download": {
      "post": {
        "summary": "Create iam/organisation.actions",
        "description": "Create iam/organisation.actions",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "proformaId",
            "in": "path",
            "description": "proformaId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_proforma_download",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "PDF file",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.proforma/download"]
      }
    },
    "/iam/organisation/{organisationId}/invitation": {
      "get": {
        "summary": "List iam/organisation.invitation",
        "description": "List iam/organisation.invitation",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "resource",
            "in": "query",
            "description": "resource",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_invitation_list",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Invitation collection",
                  "items": {
                    "$ref": "#/components/schemas/invitation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.invitation/list"]
      }
    },
    "/iam/organisation/{organisationId}/invitation/{invitationId}": {
      "get": {
        "summary": "Get iam/organisation.invitation",
        "description": "Get iam/organisation.invitation",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "invitationId",
            "in": "path",
            "description": "invitationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_invitation_get",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invitation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.invitation/get"]
      },
      "delete": {
        "summary": "Delete iam/organisation.invitation",
        "description": "Delete iam/organisation.invitation",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "invitationId",
            "in": "path",
            "description": "invitationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_invitation_delete",
        "tags": ["iam_organisation"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.invitation/delete"]
      }
    },
    "/iam/organisation/{organisationId}/invitation/{invitationId}/actions/accept": {
      "post": {
        "summary": "Create iam/organisation.actions",
        "description": "Create iam/organisation.actions",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "invitationId",
            "in": "path",
            "description": "invitationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_invitation_accept",
        "tags": ["iam_organisation"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organisation_invitation_accept"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invitation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [],
        "x-audience": "developer"
      }
    },
    "/iam/organisation/{organisationId}/ownership": {
      "post": {
        "summary": "Create iam/organisation.ownership",
        "description": "Create iam/organisation.ownership",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          }
        ],
        "operationId": "organisation_ownership_create",
        "tags": ["iam_organisation"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/organisation_ownership_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organisation"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/organisation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.ownership/create"]
      },
      "get": {
        "summary": "List iam/organisation.ownership",
        "description": "List iam/organisation.ownership",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          }
        ],
        "operationId": "organisation_ownership_list",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Ownership collection",
                  "items": {
                    "$ref": "#/components/schemas/ownership"
                  }
                }
              }
            },
            "links": {
              "invitation": {
                "operationId": "organisation_invitation_list",
                "parameters": {
                  "resource": "$path"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.ownership/list"]
      }
    },
    "/iam/organisation/{organisationId}/ownership/{ownershipId}": {
      "get": {
        "summary": "Get iam/organisation.ownership",
        "description": "Get iam/organisation.ownership",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "ownershipId",
            "in": "path",
            "description": "ownershipId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_ownership_get",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ownership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.ownership/get"]
      },
      "delete": {
        "summary": "Delete iam/organisation.ownership",
        "description": "Delete iam/organisation.ownership",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "ownershipId",
            "in": "path",
            "description": "ownershipId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_ownership_delete",
        "tags": ["iam_organisation"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.ownership/delete"]
      }
    },
    "/iam/organisation/{organisationId}/event": {
      "get": {
        "summary": "List iam/organisation.event",
        "description": "List iam/organisation.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "organisation_event_list",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.event/list"]
      }
    },
    "/iam/organisation/{organisationId}/event/{eventId}": {
      "get": {
        "summary": "Get iam/organisation.event",
        "description": "Get iam/organisation.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "organisation_event_get",
        "tags": ["iam_organisation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/organisation.event/get"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent": {
      "post": {
        "summary": "Create provider/agent",
        "description": "Create agent",
        "operationId": "provider_project_agent_create",
        "tags": ["provider_project_agent"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/provider_project_agent_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent/create"]
      },
      "get": {
        "summary": "List provider/agent",
        "description": "List agent",
        "operationId": "provider_project_agent_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Agent collection",
                  "items": {
                    "$ref": "#/components/schemas/agent"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent/list"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}": {
      "get": {
        "summary": "Get provider/agent",
        "description": "Returns a single agent",
        "operationId": "provider_project_agent_get",
        "tags": ["provider_project_agent"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent/get"]
      },
      "patch": {
        "summary": "Update provider/agent",
        "description": "Returns modified agent",
        "operationId": "provider_project_agent_update",
        "tags": ["provider_project_agent"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/provider_project_agent_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete provider/agent",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          }
        ],
        "operationId": "provider_project_agent_delete",
        "description": "Delete agent",
        "tags": ["provider_project_agent"],
        "x-permissions": ["provider/agent/delete"],
        "x-state": ["Unknown"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/actions/start": {
      "post": {
        "summary": "Start provider/agent",
        "description": "action start",
        "operationId": "provider_project_agent_start",
        "tags": ["provider_project_agent"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent/start"],
        "x-state": ["Suspended"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/actions/suspend": {
      "post": {
        "summary": "Suspend provider/agent",
        "description": "action suspend",
        "operationId": "provider_project_agent_suspend",
        "tags": ["provider_project_agent"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent/suspend"],
        "x-state": ["Online"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/actions/inspect": {
      "post": {
        "summary": "Inspect provider/agent",
        "description": "action inspect",
        "operationId": "provider_project_agent_inspect",
        "tags": ["provider_project_agent"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent/inspect"],
        "x-state": ["Online", "Suspended"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/actions/transfer": {
      "post": {
        "summary": "Transfer provider/agent",
        "description": "action transfer",
        "operationId": "provider_project_agent_transfer",
        "tags": ["provider_project_agent"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent/transfer"],
        "x-state": ["Online", "Suspended"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/provider_project_agent_transfer"
              }
            }
          },
          "required": true
        }
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/resource": {
      "get": {
        "summary": "List provider/agent.resource",
        "description": "List provider/agent.resource",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          }
        ],
        "operationId": "provider_project_agent_resource_list",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "AgentResource collection",
                  "items": {
                    "$ref": "#/components/schemas/agentResource"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.resource/list"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/resource/{resourceId}/actions/recreate": {
      "post": {
        "summary": "Create provider/agent.actions",
        "description": "Create provider/agent.actions",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "resourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "provider_project_agent_resource_recreate",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agentResource"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.resource/recreate"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/resource/{resourceId}/actions/inspect": {
      "post": {
        "summary": "Create provider/agent.actions",
        "description": "Create provider/agent.actions",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "resourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "provider_project_agent_resource_inspect",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.resource/inspect"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/resource/{resourceId}/event": {
      "get": {
        "summary": "List provider/agent.event",
        "description": "List provider/agent.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "resourceId",
            "in": "path",
            "description": "resourceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "provider_project_agent_resource_event_list",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "AgentResourceEvent collection",
                  "items": {
                    "$ref": "#/components/schemas/agentResourceEvent"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.resource.event/list"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/credential": {
      "get": {
        "summary": "List provider/agent.credential",
        "description": "List provider/agent.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          }
        ],
        "operationId": "provider_project_agent_credential_list",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Agent.credential collection",
                  "items": {
                    "$ref": "#/components/schemas/agent.credential"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.credential/list"]
      },
      "post": {
        "summary": "Create provider/agent.credential",
        "description": "Create provider/agent.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          }
        ],
        "operationId": "provider_project_agent_credential_create",
        "tags": ["provider_project_agent"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/agent.credential"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.credential/create"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/credential/{credentialId}": {
      "get": {
        "summary": "Get provider/agent.credential",
        "description": "Get provider/agent.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "provider_project_agent_credential_get",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.credential/get"]
      },
      "patch": {
        "summary": "Update provider/agent.credential",
        "description": "Update provider/agent.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "provider_project_agent_credential_patch",
        "tags": ["provider_project_agent"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/provider_project_agent_credential_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete provider/agent.credential",
        "description": "Delete provider/agent.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "provider_project_agent_credential_delete",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.credential/delete"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/enabledService": {
      "get": {
        "summary": "List provider/agent.enabledService",
        "description": "List provider/agent.enabledService",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          }
        ],
        "operationId": "provider_project_agent_enabledService_list",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "EnabledService collection",
                  "items": {
                    "$ref": "#/components/schemas/enabledService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.enabledService/list"]
      },
      "post": {
        "summary": "Create provider/agent.enabledService",
        "description": "Create provider/agent.enabledService",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          }
        ],
        "operationId": "provider_project_agent_enabledService_create",
        "tags": ["provider_project_agent"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/enabledService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enabledService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.enabledService/create"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/enabledService/{enabledServiceId}": {
      "get": {
        "summary": "Get provider/agent.enabledService",
        "description": "Get provider/agent.enabledService",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "enabledServiceId",
            "in": "path",
            "description": "enabledServiceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "provider_project_agent_enabledService_get",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/enabledService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.enabledService/get"]
      },
      "delete": {
        "summary": "Delete provider/agent.enabledService",
        "description": "Delete provider/agent.enabledService",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "enabledServiceId",
            "in": "path",
            "description": "enabledServiceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "provider_project_agent_enabledService_delete",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/agent"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.enabledService/delete"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/service": {
      "get": {
        "summary": "List provider/agent.service",
        "description": "List provider/agent.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          }
        ],
        "operationId": "provider_project_agent_service_list",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.service/list"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/service/{serviceId}": {
      "get": {
        "summary": "Get provider/agent.service",
        "description": "Get provider/agent.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "provider_project_agent_service_get",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.service/get"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/tag": {
      "get": {
        "summary": "List provider/agent.tag",
        "description": "List provider/agent.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          }
        ],
        "operationId": "provider_project_agent_tag_list",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.tag/list"]
      },
      "put": {
        "summary": "Replace provider/agent.tag",
        "description": "Replace provider/agent.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          }
        ],
        "operationId": "provider_project_agent_tag_put",
        "tags": ["provider_project_agent"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "provider/agent.tag/create",
          "provider/agent.tag/delete"
        ]
      },
      "post": {
        "summary": "Create provider/agent.tag",
        "description": "Create provider/agent.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          }
        ],
        "operationId": "provider_project_agent_tag_create",
        "tags": ["provider_project_agent"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.tag/create"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/tag/{tagId}": {
      "get": {
        "summary": "Get provider/agent.tag",
        "description": "Get provider/agent.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "provider_project_agent_tag_get",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.tag/get"]
      },
      "delete": {
        "summary": "Delete provider/agent.tag",
        "description": "Delete provider/agent.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "provider_project_agent_tag_delete",
        "tags": ["provider_project_agent"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.tag/delete"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/event": {
      "get": {
        "summary": "List provider/agent.event",
        "description": "List provider/agent.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "provider_project_agent_event_list",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.event/list"]
      }
    },
    "/provider/{locationId}/project/{projectId}/agent/{agentId}/event/{eventId}": {
      "get": {
        "summary": "Get provider/agent.event",
        "description": "Get provider/agent.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/agentId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "provider_project_agent_event_get",
        "tags": ["provider_project_agent"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["provider/agent.event/get"]
      }
    },
    "/database/{locationId}/project/{projectId}/instance": {
      "post": {
        "summary": "Create database/instance",
        "description": "Create instance",
        "operationId": "database_project_instance_create",
        "tags": ["database_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/database_project_instance_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance/create"]
      },
      "get": {
        "summary": "List database/instance",
        "description": "List instance",
        "operationId": "database_project_instance_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["database_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Database collection",
                  "items": {
                    "$ref": "#/components/schemas/database"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance/list"]
      }
    },
    "/database/{locationId}/project/{projectId}/instance/{instanceId}": {
      "get": {
        "summary": "Get database/instance",
        "description": "Returns a single instance",
        "operationId": "database_project_instance_get",
        "tags": ["database_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance/get"]
      },
      "patch": {
        "summary": "Update database/instance",
        "description": "Returns modified instance",
        "operationId": "database_project_instance_update",
        "tags": ["database_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/database_project_instance_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete database/instance",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "database_project_instance_delete",
        "description": "Delete instance",
        "tags": ["database_project_instance"],
        "x-permissions": ["database/instance/delete"],
        "x-state": ["Running", "Off"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/database/{locationId}/project/{projectId}/instance/{instanceId}/actions/start": {
      "post": {
        "summary": "Start database/instance",
        "description": "action start",
        "operationId": "database_project_instance_start",
        "tags": ["database_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance/start"],
        "x-state": ["Off"]
      }
    },
    "/database/{locationId}/project/{projectId}/instance/{instanceId}/actions/stop": {
      "post": {
        "summary": "Stop database/instance",
        "description": "action stop",
        "operationId": "database_project_instance_stop",
        "tags": ["database_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance/stop"],
        "x-state": ["Running"]
      }
    },
    "/database/{locationId}/project/{projectId}/instance/{instanceId}/actions/transfer": {
      "post": {
        "summary": "Transfer database/instance",
        "description": "action transfer",
        "operationId": "database_project_instance_transfer",
        "tags": ["database_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance/transfer"],
        "x-state": ["Running", "Off"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/database_project_instance_transfer"
              }
            }
          },
          "required": true
        }
      }
    },
    "/database/{locationId}/project/{projectId}/instance/{instanceId}/credential": {
      "get": {
        "summary": "List database/instance.credential",
        "description": "List database/instance.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "database_project_instance_credential_list",
        "tags": ["database_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Database.credential collection",
                  "items": {
                    "$ref": "#/components/schemas/database.credential"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance.credential/list"]
      },
      "post": {
        "summary": "Create database/instance.credential",
        "description": "Create database/instance.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "database_project_instance_credential_create",
        "tags": ["database_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/database.credential"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance.credential/create"]
      }
    },
    "/database/{locationId}/project/{projectId}/instance/{instanceId}/credential/{credentialId}": {
      "get": {
        "summary": "Get database/instance.credential",
        "description": "Get database/instance.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "database_project_instance_credential_get",
        "tags": ["database_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance.credential/get"]
      },
      "patch": {
        "summary": "Update database/instance.credential",
        "description": "Update database/instance.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "database_project_instance_credential_patch",
        "tags": ["database_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/database_project_instance_credential_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete database/instance.credential",
        "description": "Delete database/instance.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "database_project_instance_credential_delete",
        "tags": ["database_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/database"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance.credential/delete"]
      }
    },
    "/database/{locationId}/project/{projectId}/instance/{instanceId}/service": {
      "get": {
        "summary": "List database/instance.service",
        "description": "List database/instance.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "database_project_instance_service_list",
        "tags": ["database_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance.service/list"]
      }
    },
    "/database/{locationId}/project/{projectId}/instance/{instanceId}/service/{serviceId}": {
      "get": {
        "summary": "Get database/instance.service",
        "description": "Get database/instance.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "database_project_instance_service_get",
        "tags": ["database_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance.service/get"]
      }
    },
    "/database/{locationId}/project/{projectId}/instance/{instanceId}/tag": {
      "get": {
        "summary": "List database/instance.tag",
        "description": "List database/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "database_project_instance_tag_list",
        "tags": ["database_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance.tag/list"]
      },
      "put": {
        "summary": "Replace database/instance.tag",
        "description": "Replace database/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "database_project_instance_tag_put",
        "tags": ["database_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "database/instance.tag/create",
          "database/instance.tag/delete"
        ]
      },
      "post": {
        "summary": "Create database/instance.tag",
        "description": "Create database/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "database_project_instance_tag_create",
        "tags": ["database_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance.tag/create"]
      }
    },
    "/database/{locationId}/project/{projectId}/instance/{instanceId}/tag/{tagId}": {
      "get": {
        "summary": "Get database/instance.tag",
        "description": "Get database/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "database_project_instance_tag_get",
        "tags": ["database_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance.tag/get"]
      },
      "delete": {
        "summary": "Delete database/instance.tag",
        "description": "Delete database/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "database_project_instance_tag_delete",
        "tags": ["database_project_instance"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance.tag/delete"]
      }
    },
    "/database/{locationId}/project/{projectId}/instance/{instanceId}/event": {
      "get": {
        "summary": "List database/instance.event",
        "description": "List database/instance.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "database_project_instance_event_list",
        "tags": ["database_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance.event/list"]
      }
    },
    "/database/{locationId}/project/{projectId}/instance/{instanceId}/event/{eventId}": {
      "get": {
        "summary": "Get database/instance.event",
        "description": "Get database/instance.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "database_project_instance_event_get",
        "tags": ["database_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["database/instance.event/get"]
      }
    },
    "/insight/{locationId}/project/{projectId}/journal": {
      "post": {
        "summary": "Create insight/journal",
        "description": "Create journal",
        "operationId": "insight_project_journal_create",
        "tags": ["insight_project_journal"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/insight_project_journal_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal/create"]
      },
      "get": {
        "summary": "List insight/journal",
        "description": "List journal",
        "operationId": "insight_project_journal_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["insight_project_journal"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Journal collection",
                  "items": {
                    "$ref": "#/components/schemas/journal"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal/list"]
      }
    },
    "/insight/{locationId}/project/{projectId}/journal/{journalId}": {
      "get": {
        "summary": "Get insight/journal",
        "description": "Returns a single journal",
        "operationId": "insight_project_journal_get",
        "tags": ["insight_project_journal"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal/get"]
      },
      "patch": {
        "summary": "Update insight/journal",
        "description": "Returns modified journal",
        "operationId": "insight_project_journal_update",
        "tags": ["insight_project_journal"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/insight_project_journal_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete insight/journal",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          }
        ],
        "operationId": "insight_project_journal_delete",
        "description": "Delete journal",
        "tags": ["insight_project_journal"],
        "x-permissions": ["insight/journal/delete"],
        "x-state": ["Online"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/insight/{locationId}/project/{projectId}/journal/{journalId}/actions/transfer": {
      "post": {
        "summary": "Transfer insight/journal",
        "description": "action transfer",
        "operationId": "insight_project_journal_transfer",
        "tags": ["insight_project_journal"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal/transfer"],
        "x-state": ["Online"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/insight_project_journal_transfer"
              }
            }
          },
          "required": true
        }
      }
    },
    "/insight/{locationId}/project/{projectId}/journal/{journalId}/log": {
      "get": {
        "summary": "Get insight/journal.log",
        "description": "websocket is also supported",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          },
          {
            "name": "since",
            "in": "query",
            "description": "since",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "until",
            "in": "query",
            "description": "until",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "follow",
            "in": "query",
            "description": "follow",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "tail",
            "in": "query",
            "description": "tail",
            "required": false,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "tag",
            "in": "query",
            "description": "tag",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/tag_array"
            }
          }
        ],
        "operationId": "insight_project_journal_log_get",
        "tags": ["insight_project_journal"],
        "responses": {
          "302": {
            "description": "Redirect to the provider with a claim"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.log/get"]
      }
    },
    "/insight/{locationId}/project/{projectId}/journal/{journalId}/credential": {
      "get": {
        "summary": "List insight/journal.credential",
        "description": "List insight/journal.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          }
        ],
        "operationId": "insight_project_journal_credential_list",
        "tags": ["insight_project_journal"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Journal.credential collection",
                  "items": {
                    "$ref": "#/components/schemas/journal.credential"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.credential/list"]
      },
      "post": {
        "summary": "Create insight/journal.credential",
        "description": "Create insight/journal.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          }
        ],
        "operationId": "insight_project_journal_credential_create",
        "tags": ["insight_project_journal"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/journal.credential"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.credential/create"]
      }
    },
    "/insight/{locationId}/project/{projectId}/journal/{journalId}/credential/{credentialId}": {
      "get": {
        "summary": "Get insight/journal.credential",
        "description": "Get insight/journal.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "insight_project_journal_credential_get",
        "tags": ["insight_project_journal"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.credential/get"]
      },
      "patch": {
        "summary": "Update insight/journal.credential",
        "description": "Update insight/journal.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "insight_project_journal_credential_patch",
        "tags": ["insight_project_journal"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/insight_project_journal_credential_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete insight/journal.credential",
        "description": "Delete insight/journal.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "insight_project_journal_credential_delete",
        "tags": ["insight_project_journal"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/journal"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.credential/delete"]
      }
    },
    "/insight/{locationId}/project/{projectId}/journal/{journalId}/service": {
      "get": {
        "summary": "List insight/journal.service",
        "description": "List insight/journal.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          }
        ],
        "operationId": "insight_project_journal_service_list",
        "tags": ["insight_project_journal"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.service/list"]
      }
    },
    "/insight/{locationId}/project/{projectId}/journal/{journalId}/service/{serviceId}": {
      "get": {
        "summary": "Get insight/journal.service",
        "description": "Get insight/journal.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "insight_project_journal_service_get",
        "tags": ["insight_project_journal"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.service/get"]
      }
    },
    "/insight/{locationId}/project/{projectId}/journal/{journalId}/tag": {
      "get": {
        "summary": "List insight/journal.tag",
        "description": "List insight/journal.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          }
        ],
        "operationId": "insight_project_journal_tag_list",
        "tags": ["insight_project_journal"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.tag/list"]
      },
      "put": {
        "summary": "Replace insight/journal.tag",
        "description": "Replace insight/journal.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          }
        ],
        "operationId": "insight_project_journal_tag_put",
        "tags": ["insight_project_journal"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "insight/journal.tag/create",
          "insight/journal.tag/delete"
        ]
      },
      "post": {
        "summary": "Create insight/journal.tag",
        "description": "Create insight/journal.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          }
        ],
        "operationId": "insight_project_journal_tag_create",
        "tags": ["insight_project_journal"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.tag/create"]
      }
    },
    "/insight/{locationId}/project/{projectId}/journal/{journalId}/tag/{tagId}": {
      "get": {
        "summary": "Get insight/journal.tag",
        "description": "Get insight/journal.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "insight_project_journal_tag_get",
        "tags": ["insight_project_journal"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.tag/get"]
      },
      "delete": {
        "summary": "Delete insight/journal.tag",
        "description": "Delete insight/journal.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "insight_project_journal_tag_delete",
        "tags": ["insight_project_journal"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.tag/delete"]
      }
    },
    "/insight/{locationId}/project/{projectId}/journal/{journalId}/event": {
      "get": {
        "summary": "List insight/journal.event",
        "description": "List insight/journal.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "insight_project_journal_event_list",
        "tags": ["insight_project_journal"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.event/list"]
      }
    },
    "/insight/{locationId}/project/{projectId}/journal/{journalId}/event/{eventId}": {
      "get": {
        "summary": "Get insight/journal.event",
        "description": "Get insight/journal.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/journalId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "insight_project_journal_event_get",
        "tags": ["insight_project_journal"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["insight/journal.event/get"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry": {
      "post": {
        "summary": "Create container/registry",
        "description": "Create registry",
        "operationId": "container_project_registry_create",
        "tags": ["container_project_registry"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container_project_registry_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry/create"]
      },
      "get": {
        "summary": "List container/registry",
        "description": "List registry",
        "operationId": "container_project_registry_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Registry collection",
                  "items": {
                    "$ref": "#/components/schemas/registry"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry/list"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}": {
      "get": {
        "summary": "Get container/registry",
        "description": "Returns a single registry",
        "operationId": "container_project_registry_get",
        "tags": ["container_project_registry"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry/get"]
      },
      "patch": {
        "summary": "Update container/registry",
        "description": "Returns modified registry",
        "operationId": "container_project_registry_update",
        "tags": ["container_project_registry"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container_project_registry_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete container/registry",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "operationId": "container_project_registry_delete",
        "description": "Delete registry",
        "tags": ["container_project_registry"],
        "x-permissions": ["container/registry/delete"],
        "x-state": ["Running", "Off"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/actions/start": {
      "post": {
        "summary": "Start container/registry",
        "description": "action start",
        "operationId": "container_project_registry_start",
        "tags": ["container_project_registry"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry/start"],
        "x-state": ["Off"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/actions/stop": {
      "post": {
        "summary": "Stop container/registry",
        "description": "action stop",
        "operationId": "container_project_registry_stop",
        "tags": ["container_project_registry"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry/stop"],
        "x-state": ["Running"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/actions/transfer": {
      "post": {
        "summary": "Transfer container/registry",
        "description": "action transfer",
        "operationId": "container_project_registry_transfer",
        "tags": ["container_project_registry"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry/transfer"],
        "x-state": ["Running", "Off"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container_project_registry_transfer"
              }
            }
          },
          "required": true
        }
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/repository": {
      "get": {
        "summary": "List container/registry.repository",
        "description": "List container/registry.repository",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "operationId": "container_project_registry_repository_list",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.repository/list"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/repository/{repositoryId}": {
      "get": {
        "summary": "Get container/registry.repository",
        "description": "Get container/registry.repository",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "repositoryId",
            "in": "path",
            "description": "repositoryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_repository_get",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.repository/get"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/repository/{repositoryId}/image": {
      "get": {
        "summary": "List container/registry.image",
        "description": "List container/registry.image",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "repositoryId",
            "in": "path",
            "description": "repositoryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_repository_image_list",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.image/list"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/repository/{repositoryId}/image/{imageId}": {
      "get": {
        "summary": "Get container/registry.image",
        "description": "Get container/registry.image",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "repositoryId",
            "in": "path",
            "description": "repositoryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "imageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_repository_image_get",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.image/get"]
      },
      "delete": {
        "summary": "Delete container/registry.image",
        "description": "Delete container/registry.image",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "repositoryId",
            "in": "path",
            "description": "repositoryId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "imageId",
            "in": "path",
            "description": "imageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_repository_image_delete",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.image/delete"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/credential": {
      "get": {
        "summary": "List container/registry.credential",
        "description": "List container/registry.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "operationId": "container_project_registry_credential_list",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Registry.credential collection",
                  "items": {
                    "$ref": "#/components/schemas/registry.credential"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.credential/list"]
      },
      "post": {
        "summary": "Create container/registry.credential",
        "description": "Create container/registry.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "operationId": "container_project_registry_credential_create",
        "tags": ["container_project_registry"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/registry.credential"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.credential/create"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/credential/{credentialId}": {
      "get": {
        "summary": "Get container/registry.credential",
        "description": "Get container/registry.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_credential_get",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.credential/get"]
      },
      "patch": {
        "summary": "Update container/registry.credential",
        "description": "Update container/registry.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_credential_patch",
        "tags": ["container_project_registry"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/container_project_registry_credential_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete container/registry.credential",
        "description": "Delete container/registry.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_credential_delete",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/registry"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.credential/delete"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/domain": {
      "get": {
        "summary": "List container/registry.domain",
        "description": "List container/registry.domain",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "operationId": "container_project_registry_domain_list",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Domain collection",
                  "items": {
                    "$ref": "#/components/schemas/domain"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.domain/list"]
      },
      "post": {
        "summary": "Create container/registry.domain",
        "description": "Create container/registry.domain",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "operationId": "container_project_registry_domain_create",
        "tags": ["container_project_registry"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.domain/create"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/domain/{domainId}": {
      "get": {
        "summary": "Get container/registry.domain",
        "description": "Get container/registry.domain",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_domain_get",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.domain/get"]
      },
      "delete": {
        "summary": "Delete container/registry.domain",
        "description": "Delete container/registry.domain",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_domain_delete",
        "tags": ["container_project_registry"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.domain/delete"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/service": {
      "get": {
        "summary": "List container/registry.service",
        "description": "List container/registry.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "operationId": "container_project_registry_service_list",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.service/list"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/service/{serviceId}": {
      "get": {
        "summary": "Get container/registry.service",
        "description": "Get container/registry.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_service_get",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.service/get"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/tag": {
      "get": {
        "summary": "List container/registry.tag",
        "description": "List container/registry.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "operationId": "container_project_registry_tag_list",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.tag/list"]
      },
      "put": {
        "summary": "Replace container/registry.tag",
        "description": "Replace container/registry.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "operationId": "container_project_registry_tag_put",
        "tags": ["container_project_registry"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "container/registry.tag/create",
          "container/registry.tag/delete"
        ]
      },
      "post": {
        "summary": "Create container/registry.tag",
        "description": "Create container/registry.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          }
        ],
        "operationId": "container_project_registry_tag_create",
        "tags": ["container_project_registry"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.tag/create"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/tag/{tagId}": {
      "get": {
        "summary": "Get container/registry.tag",
        "description": "Get container/registry.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_tag_get",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.tag/get"]
      },
      "delete": {
        "summary": "Delete container/registry.tag",
        "description": "Delete container/registry.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_tag_delete",
        "tags": ["container_project_registry"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.tag/delete"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/event": {
      "get": {
        "summary": "List container/registry.event",
        "description": "List container/registry.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "container_project_registry_event_list",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.event/list"]
      }
    },
    "/container/{locationId}/project/{projectId}/registry/{registryId}/event/{eventId}": {
      "get": {
        "summary": "Get container/registry.event",
        "description": "Get container/registry.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/registryId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "container_project_registry_event_get",
        "tags": ["container_project_registry"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["container/registry.event/get"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance": {
      "post": {
        "summary": "Create website/instance",
        "description": "Create instance",
        "operationId": "website_project_instance_create",
        "tags": ["website_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/website_project_instance_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance/create"]
      },
      "get": {
        "summary": "List website/instance",
        "description": "List instance",
        "operationId": "website_project_instance_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Website collection",
                  "items": {
                    "$ref": "#/components/schemas/website"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance/list"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}": {
      "get": {
        "summary": "Get website/instance",
        "description": "Returns a single instance",
        "operationId": "website_project_instance_get",
        "tags": ["website_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance/get"]
      },
      "patch": {
        "summary": "Update website/instance",
        "description": "Returns modified instance",
        "operationId": "website_project_instance_update",
        "tags": ["website_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/website_project_instance_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete website/instance",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_delete",
        "description": "Delete instance",
        "tags": ["website_project_instance"],
        "x-permissions": ["website/instance/delete"],
        "x-state": ["Running", "Off", "Restarting"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/actions/start": {
      "post": {
        "summary": "Start website/instance",
        "description": "action start",
        "operationId": "website_project_instance_start",
        "tags": ["website_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance/start"],
        "x-state": ["Off"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/actions/stop": {
      "post": {
        "summary": "Stop website/instance",
        "description": "action stop",
        "operationId": "website_project_instance_stop",
        "tags": ["website_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance/stop"],
        "x-state": ["Running", "Restarting"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/actions/restart": {
      "post": {
        "summary": "Restart website/instance",
        "description": "action restart",
        "operationId": "website_project_instance_restart",
        "tags": ["website_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance/restart"],
        "x-state": ["Running"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/actions/transfer": {
      "post": {
        "summary": "Transfer website/instance",
        "description": "action transfer",
        "operationId": "website_project_instance_transfer",
        "tags": ["website_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance/transfer"],
        "x-state": ["Running", "Off", "Restarting"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/website_project_instance_transfer"
              }
            }
          },
          "required": true
        }
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/snapshot": {
      "get": {
        "summary": "List website/instance.snapshot",
        "description": "List website/instance.snapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_snapshot_list",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Website.snapshot collection",
                  "items": {
                    "$ref": "#/components/schemas/website.snapshot"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.snapshot/list"]
      },
      "post": {
        "summary": "Create website/instance.snapshot",
        "description": "Create website/instance.snapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_snapshot_create",
        "tags": ["website_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/website.snapshot"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website.snapshot"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.snapshot/create"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/snapshot/{snapshotId}": {
      "delete": {
        "summary": "Delete website/instance.snapshot",
        "description": "Delete website/instance.snapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_snapshot_delete",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.snapshot/delete"]
      },
      "get": {
        "summary": "Get website/instance.snapshot",
        "description": "Get website/instance.snapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_snapshot_get",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website.snapshot"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.snapshot/get"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/snapshot/{snapshotId}/actions/download": {
      "post": {
        "summary": "Create website/instance.actions",
        "description": "Create website/instance.actions",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_snapshot_download",
        "tags": ["website_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/website_project_instance_snapshot_download"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Download request accepted",
            "headers": {
              "location": {
                "description": "Absolute URL",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.snapshot/read"],
        "x-state": ["TODO", "IGNORE"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/env": {
      "get": {
        "summary": "List website/instance.env",
        "description": "List website/instance.env",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_env_list",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Website.env collection",
                  "items": {
                    "$ref": "#/components/schemas/website.env"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.env/list"]
      },
      "post": {
        "summary": "Create website/instance.env",
        "description": "Create website/instance.env",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_env_create",
        "tags": ["website_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/website.env"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website.env"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.env/create"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/env/{envId}": {
      "get": {
        "summary": "Get website/instance.env",
        "description": "Get website/instance.env",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "envId",
            "in": "path",
            "description": "envId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_env_get",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website.env"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.env/get"]
      },
      "delete": {
        "summary": "Delete website/instance.env",
        "description": "Delete website/instance.env",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "envId",
            "in": "path",
            "description": "envId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_env_delete",
        "tags": ["website_project_instance"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.env/delete"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/link": {
      "get": {
        "summary": "List website/instance.link",
        "description": "List website/instance.link",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_link_list",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Website.link collection",
                  "items": {
                    "$ref": "#/components/schemas/website.link"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.link/list"]
      },
      "post": {
        "summary": "Create website/instance.link",
        "description": "Create website/instance.link",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_link_create",
        "tags": ["website_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/website.link"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website.link"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.link/create"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/link/{linkId}": {
      "get": {
        "summary": "Get website/instance.link",
        "description": "Get website/instance.link",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "linkId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_link_get",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website.link"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.link/get"]
      },
      "delete": {
        "summary": "Delete website/instance.link",
        "description": "Delete website/instance.link",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "linkId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_link_delete",
        "tags": ["website_project_instance"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.link/delete"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/sideapp": {
      "get": {
        "summary": "List website/instance.sideapp",
        "description": "List website/instance.sideapp",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_sideapp_list",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Website.sideapp collection",
                  "items": {
                    "$ref": "#/components/schemas/website.sideapp"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.sideapp/list"]
      },
      "post": {
        "summary": "Create website/instance.sideapp",
        "description": "Create website/instance.sideapp",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_sideapp_create",
        "tags": ["website_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/website.sideapp"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website.sideapp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.sideapp/create"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/sideapp/{sideappId}": {
      "get": {
        "summary": "Get website/instance.sideapp",
        "description": "Get website/instance.sideapp",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "sideappId",
            "in": "path",
            "description": "sideappId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_sideapp_get",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website.sideapp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.sideapp/get"]
      },
      "delete": {
        "summary": "Delete website/instance.sideapp",
        "description": "Delete website/instance.sideapp",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "sideappId",
            "in": "path",
            "description": "sideappId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_sideapp_delete",
        "tags": ["website_project_instance"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.sideapp/delete"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/credential": {
      "get": {
        "summary": "List website/instance.credential",
        "description": "List website/instance.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_credential_list",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Website.credential collection",
                  "items": {
                    "$ref": "#/components/schemas/website.credential"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.credential/list"]
      },
      "post": {
        "summary": "Create website/instance.credential",
        "description": "Create website/instance.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_credential_create",
        "tags": ["website_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/website.credential"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.credential/create"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/credential/{credentialId}": {
      "get": {
        "summary": "Get website/instance.credential",
        "description": "Get website/instance.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_credential_get",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.credential/get"]
      },
      "patch": {
        "summary": "Update website/instance.credential",
        "description": "Update website/instance.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_credential_patch",
        "tags": ["website_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/website_project_instance_credential_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete website/instance.credential",
        "description": "Delete website/instance.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_credential_delete",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/website"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.credential/delete"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/domain": {
      "get": {
        "summary": "List website/instance.domain",
        "description": "List website/instance.domain",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_domain_list",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Domain collection",
                  "items": {
                    "$ref": "#/components/schemas/domain"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.domain/list"]
      },
      "post": {
        "summary": "Create website/instance.domain",
        "description": "Create website/instance.domain",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_domain_create",
        "tags": ["website_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/domain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.domain/create"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/domain/{domainId}": {
      "get": {
        "summary": "Get website/instance.domain",
        "description": "Get website/instance.domain",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_domain_get",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.domain/get"]
      },
      "delete": {
        "summary": "Delete website/instance.domain",
        "description": "Delete website/instance.domain",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "domainId",
            "in": "path",
            "description": "domainId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_domain_delete",
        "tags": ["website_project_instance"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.domain/delete"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/service": {
      "get": {
        "summary": "List website/instance.service",
        "description": "List website/instance.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_service_list",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.service/list"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/service/{serviceId}": {
      "get": {
        "summary": "Get website/instance.service",
        "description": "Get website/instance.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_service_get",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.service/get"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/tag": {
      "get": {
        "summary": "List website/instance.tag",
        "description": "List website/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_tag_list",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.tag/list"]
      },
      "put": {
        "summary": "Replace website/instance.tag",
        "description": "Replace website/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_tag_put",
        "tags": ["website_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "website/instance.tag/create",
          "website/instance.tag/delete"
        ]
      },
      "post": {
        "summary": "Create website/instance.tag",
        "description": "Create website/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "website_project_instance_tag_create",
        "tags": ["website_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.tag/create"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/tag/{tagId}": {
      "get": {
        "summary": "Get website/instance.tag",
        "description": "Get website/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_tag_get",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.tag/get"]
      },
      "delete": {
        "summary": "Delete website/instance.tag",
        "description": "Delete website/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_tag_delete",
        "tags": ["website_project_instance"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.tag/delete"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/event": {
      "get": {
        "summary": "List website/instance.event",
        "description": "List website/instance.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "website_project_instance_event_list",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.event/list"]
      }
    },
    "/website/{locationId}/project/{projectId}/instance/{instanceId}/event/{eventId}": {
      "get": {
        "summary": "Get website/instance.event",
        "description": "Get website/instance.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "website_project_instance_event_get",
        "tags": ["website_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["website/instance.event/get"]
      }
    },
    "/dns/{locationId}/project/{projectId}/zone": {
      "post": {
        "summary": "Create dns/zone",
        "description": "Create zone",
        "operationId": "dns_project_zone_create",
        "tags": ["dns_project_zone"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dns_project_zone_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/zone"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/zone"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone/create"]
      },
      "get": {
        "summary": "List dns/zone",
        "description": "List zone",
        "operationId": "dns_project_zone_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["dns_project_zone"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Zone collection",
                  "items": {
                    "$ref": "#/components/schemas/zone"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone/list"]
      }
    },
    "/dns/{locationId}/project/{projectId}/zone/{zoneId}": {
      "get": {
        "summary": "Get dns/zone",
        "description": "Returns a single zone",
        "operationId": "dns_project_zone_get",
        "tags": ["dns_project_zone"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/zone"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone/get"]
      },
      "patch": {
        "summary": "Update dns/zone",
        "description": "Returns modified zone",
        "operationId": "dns_project_zone_update",
        "tags": ["dns_project_zone"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dns_project_zone_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/zone"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete dns/zone",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          }
        ],
        "operationId": "dns_project_zone_delete",
        "description": "Delete zone",
        "tags": ["dns_project_zone"],
        "x-permissions": ["dns/zone/delete"],
        "x-state": ["Online"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/dns/{locationId}/project/{projectId}/zone/{zoneId}/recordset": {
      "post": {
        "summary": "Create dns/zone.recordset",
        "description": "Create dns/zone.recordset",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          }
        ],
        "operationId": "dns_project_zone_recordset_create",
        "tags": ["dns_project_zone"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dns.recordset"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dns.recordset"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.recordset/create"]
      },
      "get": {
        "summary": "List dns/zone.recordset",
        "description": "List dns/zone.recordset",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          }
        ],
        "operationId": "dns_project_zone_recordset_list",
        "tags": ["dns_project_zone"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Dns.recordset collection",
                  "items": {
                    "$ref": "#/components/schemas/dns.recordset"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.recordset/list"]
      }
    },
    "/dns/{locationId}/project/{projectId}/zone/{zoneId}/recordset/{recordsetId}": {
      "delete": {
        "summary": "Delete dns/zone.recordset",
        "description": "Delete dns/zone.recordset",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "recordsetId",
            "in": "path",
            "description": "recordsetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "dns_project_zone_recordset_delete",
        "tags": ["dns_project_zone"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/zone"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/zone"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.recordset/delete"]
      },
      "get": {
        "summary": "Get dns/zone.recordset",
        "description": "Get dns/zone.recordset",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "recordsetId",
            "in": "path",
            "description": "recordsetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "dns_project_zone_recordset_get",
        "tags": ["dns_project_zone"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dns.recordset"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.recordset/get"]
      },
      "patch": {
        "summary": "Update dns/zone.recordset",
        "description": "Update dns/zone.recordset",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "recordsetId",
            "in": "path",
            "description": "recordsetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "dns_project_zone_recordset_patch",
        "tags": ["dns_project_zone"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dns_project_zone_recordset_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dns.recordset"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/dns/{locationId}/project/{projectId}/zone/{zoneId}/recordset/{recordsetId}/record": {
      "post": {
        "summary": "Create dns/zone.record",
        "description": "Create dns/zone.record",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "recordsetId",
            "in": "path",
            "description": "recordsetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "dns_project_zone_recordset_record_create",
        "tags": ["dns_project_zone"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dns.record"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dns.record"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.record/create"]
      },
      "put": {
        "summary": "Replace dns/zone.record",
        "description": "Replace dns/zone.record",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "recordsetId",
            "in": "path",
            "description": "recordsetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "dns_project_zone_recordset_record_put",
        "tags": ["dns_project_zone"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dns.record_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Dns.record collection",
                  "items": {
                    "$ref": "#/components/schemas/dns.record"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.record/create", "dns/zone.record/delete"]
      },
      "get": {
        "summary": "List dns/zone.record",
        "description": "List dns/zone.record",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "recordsetId",
            "in": "path",
            "description": "recordsetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "dns_project_zone_recordset_record_list",
        "tags": ["dns_project_zone"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Dns.record collection",
                  "items": {
                    "$ref": "#/components/schemas/dns.record"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.record/list"]
      }
    },
    "/dns/{locationId}/project/{projectId}/zone/{zoneId}/recordset/{recordsetId}/record/{recordId}": {
      "get": {
        "summary": "Get dns/zone.record",
        "description": "Get dns/zone.record",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "recordsetId",
            "in": "path",
            "description": "recordsetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recordId",
            "in": "path",
            "description": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "dns_project_zone_recordset_record_get",
        "tags": ["dns_project_zone"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dns.record"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.record/get"]
      },
      "delete": {
        "summary": "Delete dns/zone.record",
        "description": "Delete dns/zone.record",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "recordsetId",
            "in": "path",
            "description": "recordsetId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recordId",
            "in": "path",
            "description": "recordId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "dns_project_zone_recordset_record_delete",
        "tags": ["dns_project_zone"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.record/delete"]
      }
    },
    "/dns/{locationId}/project/{projectId}/zone/{zoneId}/service": {
      "get": {
        "summary": "List dns/zone.service",
        "description": "List dns/zone.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          }
        ],
        "operationId": "dns_project_zone_service_list",
        "tags": ["dns_project_zone"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.service/list"]
      }
    },
    "/dns/{locationId}/project/{projectId}/zone/{zoneId}/service/{serviceId}": {
      "get": {
        "summary": "Get dns/zone.service",
        "description": "Get dns/zone.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "dns_project_zone_service_get",
        "tags": ["dns_project_zone"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.service/get"]
      }
    },
    "/dns/{locationId}/project/{projectId}/zone/{zoneId}/tag": {
      "get": {
        "summary": "List dns/zone.tag",
        "description": "List dns/zone.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          }
        ],
        "operationId": "dns_project_zone_tag_list",
        "tags": ["dns_project_zone"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.tag/list"]
      },
      "put": {
        "summary": "Replace dns/zone.tag",
        "description": "Replace dns/zone.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          }
        ],
        "operationId": "dns_project_zone_tag_put",
        "tags": ["dns_project_zone"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.tag/create", "dns/zone.tag/delete"]
      },
      "post": {
        "summary": "Create dns/zone.tag",
        "description": "Create dns/zone.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          }
        ],
        "operationId": "dns_project_zone_tag_create",
        "tags": ["dns_project_zone"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.tag/create"]
      }
    },
    "/dns/{locationId}/project/{projectId}/zone/{zoneId}/tag/{tagId}": {
      "get": {
        "summary": "Get dns/zone.tag",
        "description": "Get dns/zone.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "dns_project_zone_tag_get",
        "tags": ["dns_project_zone"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.tag/get"]
      },
      "delete": {
        "summary": "Delete dns/zone.tag",
        "description": "Delete dns/zone.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "dns_project_zone_tag_delete",
        "tags": ["dns_project_zone"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.tag/delete"]
      }
    },
    "/dns/{locationId}/project/{projectId}/zone/{zoneId}/event": {
      "get": {
        "summary": "List dns/zone.event",
        "description": "List dns/zone.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "dns_project_zone_event_list",
        "tags": ["dns_project_zone"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.event/list"]
      }
    },
    "/dns/{locationId}/project/{projectId}/zone/{zoneId}/event/{eventId}": {
      "get": {
        "summary": "Get dns/zone.event",
        "description": "Get dns/zone.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/zoneId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "dns_project_zone_event_get",
        "tags": ["dns_project_zone"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["dns/zone.event/get"]
      }
    },
    "/storage/{locationId}/project/{projectId}/disk": {
      "post": {
        "summary": "Create storage/disk",
        "description": "Create disk",
        "operationId": "storage_project_disk_create",
        "tags": ["storage_project_disk"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_disk_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk/create"]
      },
      "get": {
        "summary": "List storage/disk",
        "description": "List disk",
        "operationId": "storage_project_disk_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "vm",
            "description": "Filter by vm",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["storage_project_disk"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Disk collection",
                  "items": {
                    "$ref": "#/components/schemas/disk"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/disk/{diskId}": {
      "get": {
        "summary": "Get storage/disk",
        "description": "Returns a single disk",
        "operationId": "storage_project_disk_get",
        "tags": ["storage_project_disk"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk/get"]
      },
      "patch": {
        "summary": "Update storage/disk",
        "description": "Returns modified disk",
        "operationId": "storage_project_disk_update",
        "tags": ["storage_project_disk"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_disk_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete storage/disk",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          }
        ],
        "operationId": "storage_project_disk_delete",
        "description": "Delete disk",
        "tags": ["storage_project_disk"],
        "x-permissions": ["storage/disk/delete"],
        "x-state": ["Detached"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/storage/{locationId}/project/{projectId}/disk/{diskId}/actions/resize": {
      "post": {
        "summary": "Resize storage/disk",
        "description": "action resize",
        "operationId": "storage_project_disk_resize",
        "tags": ["storage_project_disk"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk.size/update"],
        "x-state": ["Attached", "Detached"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_disk_resize"
              }
            }
          },
          "required": true
        }
      }
    },
    "/storage/{locationId}/project/{projectId}/disk/{diskId}/actions/attach": {
      "post": {
        "summary": "Attach storage/disk",
        "description": "action attach",
        "operationId": "storage_project_disk_attach",
        "tags": ["storage_project_disk"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk/attach"],
        "x-state": ["Detached"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_disk_attach"
              }
            }
          },
          "required": true
        }
      }
    },
    "/storage/{locationId}/project/{projectId}/disk/{diskId}/actions/detach": {
      "post": {
        "summary": "Detach storage/disk",
        "description": "action detach",
        "operationId": "storage_project_disk_detach",
        "tags": ["storage_project_disk"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk/detach"],
        "x-state": ["Attached"]
      }
    },
    "/storage/{locationId}/project/{projectId}/disk/{diskId}/actions/download": {
      "post": {
        "summary": "Download storage/disk",
        "description": "action download",
        "operationId": "storage_project_disk_download",
        "tags": ["storage_project_disk"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "201": {
            "description": "Download request accepted",
            "headers": {
              "location": {
                "description": "Absolute URL",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk/read"],
        "x-state": ["Online", "Attached", "Detached"]
      }
    },
    "/storage/{locationId}/project/{projectId}/disk/{diskId}/actions/transfer": {
      "post": {
        "summary": "Transfer storage/disk",
        "description": "action transfer",
        "operationId": "storage_project_disk_transfer",
        "tags": ["storage_project_disk"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk/transfer"],
        "x-state": ["Detached"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_disk_transfer"
              }
            }
          },
          "required": true
        }
      }
    },
    "/storage/{locationId}/project/{projectId}/disk/{diskId}/service": {
      "get": {
        "summary": "List storage/disk.service",
        "description": "List storage/disk.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          }
        ],
        "operationId": "storage_project_disk_service_list",
        "tags": ["storage_project_disk"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk.service/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/disk/{diskId}/service/{serviceId}": {
      "get": {
        "summary": "Get storage/disk.service",
        "description": "Get storage/disk.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_disk_service_get",
        "tags": ["storage_project_disk"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk.service/get"]
      }
    },
    "/storage/{locationId}/project/{projectId}/disk/{diskId}/tag": {
      "get": {
        "summary": "List storage/disk.tag",
        "description": "List storage/disk.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          }
        ],
        "operationId": "storage_project_disk_tag_list",
        "tags": ["storage_project_disk"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk.tag/list"]
      },
      "put": {
        "summary": "Replace storage/disk.tag",
        "description": "Replace storage/disk.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          }
        ],
        "operationId": "storage_project_disk_tag_put",
        "tags": ["storage_project_disk"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk.tag/create", "storage/disk.tag/delete"]
      },
      "post": {
        "summary": "Create storage/disk.tag",
        "description": "Create storage/disk.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          }
        ],
        "operationId": "storage_project_disk_tag_create",
        "tags": ["storage_project_disk"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk.tag/create"]
      }
    },
    "/storage/{locationId}/project/{projectId}/disk/{diskId}/tag/{tagId}": {
      "get": {
        "summary": "Get storage/disk.tag",
        "description": "Get storage/disk.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_disk_tag_get",
        "tags": ["storage_project_disk"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk.tag/get"]
      },
      "delete": {
        "summary": "Delete storage/disk.tag",
        "description": "Delete storage/disk.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_disk_tag_delete",
        "tags": ["storage_project_disk"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk.tag/delete"]
      }
    },
    "/storage/{locationId}/project/{projectId}/disk/{diskId}/event": {
      "get": {
        "summary": "List storage/disk.event",
        "description": "List storage/disk.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "storage_project_disk_event_list",
        "tags": ["storage_project_disk"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk.event/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/disk/{diskId}/event/{eventId}": {
      "get": {
        "summary": "Get storage/disk.event",
        "description": "Get storage/disk.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/diskId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_disk_event_get",
        "tags": ["storage_project_disk"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk.event/get"]
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall": {
      "post": {
        "summary": "Create networking/firewall",
        "description": "Create firewall",
        "operationId": "networking_project_firewall_create",
        "tags": ["networking_project_firewall"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_firewall_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/firewall"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/firewall"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall/create"]
      },
      "get": {
        "summary": "List networking/firewall",
        "description": "List firewall",
        "operationId": "networking_project_firewall_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["networking_project_firewall"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Firewall collection",
                  "items": {
                    "$ref": "#/components/schemas/firewall"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall/{firewallId}": {
      "get": {
        "summary": "Get networking/firewall",
        "description": "Returns a single firewall",
        "operationId": "networking_project_firewall_get",
        "tags": ["networking_project_firewall"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/firewall"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall/get"]
      },
      "patch": {
        "summary": "Update networking/firewall",
        "description": "Returns modified firewall",
        "operationId": "networking_project_firewall_update",
        "tags": ["networking_project_firewall"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_firewall_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/firewall"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete networking/firewall",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "operationId": "networking_project_firewall_delete",
        "description": "Delete firewall",
        "tags": ["networking_project_firewall"],
        "x-permissions": ["networking/firewall/delete"],
        "x-state": ["Detached"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall/{firewallId}/actions/transfer": {
      "post": {
        "summary": "Transfer networking/firewall",
        "description": "action transfer",
        "operationId": "networking_project_firewall_transfer",
        "tags": ["networking_project_firewall"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/firewall"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/firewall"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall/transfer"],
        "x-state": ["Detached"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_firewall_transfer"
              }
            }
          },
          "required": true
        }
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall/{firewallId}/ingress": {
      "get": {
        "summary": "List networking/firewall.ingress",
        "description": "List networking/firewall.ingress",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "operationId": "networking_project_firewall_ingress_list",
        "tags": ["networking_project_firewall"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Networking.rule collection",
                  "items": {
                    "$ref": "#/components/schemas/networking.rule"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.ingress/list"]
      },
      "put": {
        "summary": "Replace networking/firewall.ingress",
        "description": "Replace networking/firewall.ingress",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "operationId": "networking_project_firewall_ingress_put",
        "tags": ["networking_project_firewall"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking.rule_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Networking.rule collection",
                  "items": {
                    "$ref": "#/components/schemas/networking.rule"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "networking/firewall.ingress/create",
          "networking/firewall.ingress/delete"
        ]
      },
      "post": {
        "summary": "Create networking/firewall.ingress",
        "description": "Create networking/firewall.ingress",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "operationId": "networking_project_firewall_ingress_create",
        "tags": ["networking_project_firewall"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking.rule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/networking.rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.ingress/create"]
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall/{firewallId}/ingress/{ingressId}": {
      "get": {
        "summary": "Get networking/firewall.ingress",
        "description": "Get networking/firewall.ingress",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          },
          {
            "name": "ingressId",
            "in": "path",
            "description": "ingressId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_firewall_ingress_get",
        "tags": ["networking_project_firewall"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/networking.rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.ingress/get"]
      },
      "delete": {
        "summary": "Delete networking/firewall.ingress",
        "description": "Delete networking/firewall.ingress",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          },
          {
            "name": "ingressId",
            "in": "path",
            "description": "ingressId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_firewall_ingress_delete",
        "tags": ["networking_project_firewall"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.ingress/delete"]
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall/{firewallId}/egress": {
      "get": {
        "summary": "List networking/firewall.egress",
        "description": "List networking/firewall.egress",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "operationId": "networking_project_firewall_egress_list",
        "tags": ["networking_project_firewall"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Networking.rule collection",
                  "items": {
                    "$ref": "#/components/schemas/networking.rule"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.egress/list"]
      },
      "put": {
        "summary": "Replace networking/firewall.egress",
        "description": "Replace networking/firewall.egress",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "operationId": "networking_project_firewall_egress_put",
        "tags": ["networking_project_firewall"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking.rule_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Networking.rule collection",
                  "items": {
                    "$ref": "#/components/schemas/networking.rule"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "networking/firewall.egress/create",
          "networking/firewall.egress/delete"
        ]
      },
      "post": {
        "summary": "Create networking/firewall.egress",
        "description": "Create networking/firewall.egress",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "operationId": "networking_project_firewall_egress_create",
        "tags": ["networking_project_firewall"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking.rule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/networking.rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.egress/create"]
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall/{firewallId}/egress/{egressId}": {
      "get": {
        "summary": "Get networking/firewall.egress",
        "description": "Get networking/firewall.egress",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          },
          {
            "name": "egressId",
            "in": "path",
            "description": "egressId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_firewall_egress_get",
        "tags": ["networking_project_firewall"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/networking.rule"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.egress/get"]
      },
      "delete": {
        "summary": "Delete networking/firewall.egress",
        "description": "Delete networking/firewall.egress",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          },
          {
            "name": "egressId",
            "in": "path",
            "description": "egressId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_firewall_egress_delete",
        "tags": ["networking_project_firewall"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.egress/delete"]
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall/{firewallId}/service": {
      "get": {
        "summary": "List networking/firewall.service",
        "description": "List networking/firewall.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "operationId": "networking_project_firewall_service_list",
        "tags": ["networking_project_firewall"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.service/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall/{firewallId}/service/{serviceId}": {
      "get": {
        "summary": "Get networking/firewall.service",
        "description": "Get networking/firewall.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_firewall_service_get",
        "tags": ["networking_project_firewall"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.service/get"]
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall/{firewallId}/tag": {
      "get": {
        "summary": "List networking/firewall.tag",
        "description": "List networking/firewall.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "operationId": "networking_project_firewall_tag_list",
        "tags": ["networking_project_firewall"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.tag/list"]
      },
      "put": {
        "summary": "Replace networking/firewall.tag",
        "description": "Replace networking/firewall.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "operationId": "networking_project_firewall_tag_put",
        "tags": ["networking_project_firewall"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "networking/firewall.tag/create",
          "networking/firewall.tag/delete"
        ]
      },
      "post": {
        "summary": "Create networking/firewall.tag",
        "description": "Create networking/firewall.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          }
        ],
        "operationId": "networking_project_firewall_tag_create",
        "tags": ["networking_project_firewall"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.tag/create"]
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall/{firewallId}/tag/{tagId}": {
      "get": {
        "summary": "Get networking/firewall.tag",
        "description": "Get networking/firewall.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_firewall_tag_get",
        "tags": ["networking_project_firewall"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.tag/get"]
      },
      "delete": {
        "summary": "Delete networking/firewall.tag",
        "description": "Delete networking/firewall.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_firewall_tag_delete",
        "tags": ["networking_project_firewall"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.tag/delete"]
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall/{firewallId}/event": {
      "get": {
        "summary": "List networking/firewall.event",
        "description": "List networking/firewall.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "networking_project_firewall_event_list",
        "tags": ["networking_project_firewall"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.event/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/firewall/{firewallId}/event/{eventId}": {
      "get": {
        "summary": "Get networking/firewall.event",
        "description": "Get networking/firewall.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/firewallId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_firewall_event_get",
        "tags": ["networking_project_firewall"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/firewall.event/get"]
      }
    },
    "/storage/{locationId}/project/{projectId}/image": {
      "post": {
        "summary": "Create storage/image",
        "description": "Create image",
        "operationId": "storage_project_image_create",
        "tags": ["storage_project_image"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_image_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image/create"]
      },
      "get": {
        "summary": "List storage/image",
        "description": "List image",
        "operationId": "storage_project_image_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["storage_project_image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Image collection",
                  "items": {
                    "$ref": "#/components/schemas/image"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/image/{imageId}": {
      "get": {
        "summary": "Get storage/image",
        "description": "Returns a single image",
        "operationId": "storage_project_image_get",
        "tags": ["storage_project_image"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image/get"]
      },
      "patch": {
        "summary": "Update storage/image",
        "description": "Returns modified image",
        "operationId": "storage_project_image_update",
        "tags": ["storage_project_image"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_image_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete storage/image",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          }
        ],
        "operationId": "storage_project_image_delete",
        "description": "Delete image",
        "tags": ["storage_project_image"],
        "x-permissions": ["storage/image/delete"],
        "x-state": ["Online"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/storage/{locationId}/project/{projectId}/image/{imageId}/actions/transfer": {
      "post": {
        "summary": "Transfer storage/image",
        "description": "action transfer",
        "operationId": "storage_project_image_transfer",
        "tags": ["storage_project_image"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/image"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image/transfer"],
        "x-state": ["Online"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_image_transfer"
              }
            }
          },
          "required": true
        }
      }
    },
    "/storage/{locationId}/project/{projectId}/image/{imageId}/disk": {
      "get": {
        "summary": "List storage/image.disk",
        "description": "List storage/image.disk",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          }
        ],
        "operationId": "storage_project_image_disk_list",
        "tags": ["storage_project_image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Disk collection",
                  "items": {
                    "$ref": "#/components/schemas/disk"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image.disk/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/image/{imageId}/service": {
      "get": {
        "summary": "List storage/image.service",
        "description": "List storage/image.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          }
        ],
        "operationId": "storage_project_image_service_list",
        "tags": ["storage_project_image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image.service/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/image/{imageId}/service/{serviceId}": {
      "get": {
        "summary": "Get storage/image.service",
        "description": "Get storage/image.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_image_service_get",
        "tags": ["storage_project_image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image.service/get"]
      }
    },
    "/storage/{locationId}/project/{projectId}/image/{imageId}/tag": {
      "get": {
        "summary": "List storage/image.tag",
        "description": "List storage/image.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          }
        ],
        "operationId": "storage_project_image_tag_list",
        "tags": ["storage_project_image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image.tag/list"]
      },
      "put": {
        "summary": "Replace storage/image.tag",
        "description": "Replace storage/image.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          }
        ],
        "operationId": "storage_project_image_tag_put",
        "tags": ["storage_project_image"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "storage/image.tag/create",
          "storage/image.tag/delete"
        ]
      },
      "post": {
        "summary": "Create storage/image.tag",
        "description": "Create storage/image.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          }
        ],
        "operationId": "storage_project_image_tag_create",
        "tags": ["storage_project_image"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image.tag/create"]
      }
    },
    "/storage/{locationId}/project/{projectId}/image/{imageId}/tag/{tagId}": {
      "get": {
        "summary": "Get storage/image.tag",
        "description": "Get storage/image.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_image_tag_get",
        "tags": ["storage_project_image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image.tag/get"]
      },
      "delete": {
        "summary": "Delete storage/image.tag",
        "description": "Delete storage/image.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_image_tag_delete",
        "tags": ["storage_project_image"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image.tag/delete"]
      }
    },
    "/storage/{locationId}/project/{projectId}/image/{imageId}/event": {
      "get": {
        "summary": "List storage/image.event",
        "description": "List storage/image.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "storage_project_image_event_list",
        "tags": ["storage_project_image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image.event/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/image/{imageId}/event/{eventId}": {
      "get": {
        "summary": "Get storage/image.event",
        "description": "Get storage/image.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/imageId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_image_event_get",
        "tags": ["storage_project_image"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/image.event/get"]
      }
    },
    "/networking/{locationId}/project/{projectId}/ip": {
      "post": {
        "summary": "Create networking/ip",
        "description": "Create ip",
        "operationId": "networking_project_ip_create",
        "tags": ["networking_project_ip"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_ip_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip/create"]
      },
      "get": {
        "summary": "List networking/ip",
        "description": "List ip",
        "operationId": "networking_project_ip_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "network",
            "description": "Filter by network",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri",
              "x-resource": {
                "kind": "networking/network"
              },
              "x-permissions": []
            }
          },
          {
            "name": "associated.netadp",
            "description": "Filter by associated.netadp",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uri",
              "x-resource": {
                "kind": "networking/netadp"
              },
              "x-permissions": []
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["networking_project_ip"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Ip collection",
                  "items": {
                    "$ref": "#/components/schemas/ip"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/ip/{ipId}": {
      "get": {
        "summary": "Get networking/ip",
        "description": "Returns a single ip",
        "operationId": "networking_project_ip_get",
        "tags": ["networking_project_ip"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip/get"]
      },
      "patch": {
        "summary": "Update networking/ip",
        "description": "Returns modified ip",
        "operationId": "networking_project_ip_update",
        "tags": ["networking_project_ip"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_ip_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete networking/ip",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          }
        ],
        "operationId": "networking_project_ip_delete",
        "description": "Delete ip",
        "tags": ["networking_project_ip"],
        "x-permissions": ["networking/ip/delete"],
        "x-state": ["Unallocated"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/networking/{locationId}/project/{projectId}/ip/{ipId}/actions/persist": {
      "post": {
        "summary": "Persist networking/ip",
        "description": "action persist",
        "operationId": "networking_project_ip_persist",
        "tags": ["networking_project_ip"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip/persist"],
        "x-state": ["Allocated"]
      }
    },
    "/networking/{locationId}/project/{projectId}/ip/{ipId}/actions/associate": {
      "post": {
        "summary": "Associate networking/ip",
        "description": "action associate",
        "operationId": "networking_project_ip_associate",
        "tags": ["networking_project_ip"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip/associate"],
        "x-state": ["Unallocated"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_ip_associate"
              }
            }
          },
          "required": true
        }
      }
    },
    "/networking/{locationId}/project/{projectId}/ip/{ipId}/actions/disassociate": {
      "post": {
        "summary": "Disassociate networking/ip",
        "description": "action disassociate",
        "operationId": "networking_project_ip_disassociate",
        "tags": ["networking_project_ip"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip/disassociate"],
        "x-state": ["Associated"]
      }
    },
    "/networking/{locationId}/project/{projectId}/ip/{ipId}/actions/transfer": {
      "post": {
        "summary": "Transfer networking/ip",
        "description": "action transfer",
        "operationId": "networking_project_ip_transfer",
        "tags": ["networking_project_ip"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ip"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip/transfer"],
        "x-state": ["Detached"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_ip_transfer"
              }
            }
          },
          "required": true
        }
      }
    },
    "/networking/{locationId}/project/{projectId}/ip/{ipId}/service": {
      "get": {
        "summary": "List networking/ip.service",
        "description": "List networking/ip.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          }
        ],
        "operationId": "networking_project_ip_service_list",
        "tags": ["networking_project_ip"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip.service/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/ip/{ipId}/service/{serviceId}": {
      "get": {
        "summary": "Get networking/ip.service",
        "description": "Get networking/ip.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_ip_service_get",
        "tags": ["networking_project_ip"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip.service/get"]
      }
    },
    "/networking/{locationId}/project/{projectId}/ip/{ipId}/tag": {
      "get": {
        "summary": "List networking/ip.tag",
        "description": "List networking/ip.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          }
        ],
        "operationId": "networking_project_ip_tag_list",
        "tags": ["networking_project_ip"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip.tag/list"]
      },
      "put": {
        "summary": "Replace networking/ip.tag",
        "description": "Replace networking/ip.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          }
        ],
        "operationId": "networking_project_ip_tag_put",
        "tags": ["networking_project_ip"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "networking/ip.tag/create",
          "networking/ip.tag/delete"
        ]
      },
      "post": {
        "summary": "Create networking/ip.tag",
        "description": "Create networking/ip.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          }
        ],
        "operationId": "networking_project_ip_tag_create",
        "tags": ["networking_project_ip"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip.tag/create"]
      }
    },
    "/networking/{locationId}/project/{projectId}/ip/{ipId}/tag/{tagId}": {
      "get": {
        "summary": "Get networking/ip.tag",
        "description": "Get networking/ip.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_ip_tag_get",
        "tags": ["networking_project_ip"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip.tag/get"]
      },
      "delete": {
        "summary": "Delete networking/ip.tag",
        "description": "Delete networking/ip.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_ip_tag_delete",
        "tags": ["networking_project_ip"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip.tag/delete"]
      }
    },
    "/networking/{locationId}/project/{projectId}/ip/{ipId}/event": {
      "get": {
        "summary": "List networking/ip.event",
        "description": "List networking/ip.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "networking_project_ip_event_list",
        "tags": ["networking_project_ip"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip.event/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/ip/{ipId}/event/{eventId}": {
      "get": {
        "summary": "Get networking/ip.event",
        "description": "Get networking/ip.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/ipId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_ip_event_get",
        "tags": ["networking_project_ip"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/ip.event/get"]
      }
    },
    "/storage/{locationId}/project/{projectId}/iso": {
      "post": {
        "summary": "Create storage/iso",
        "description": "Create iso",
        "operationId": "storage_project_iso_create",
        "tags": ["storage_project_iso"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_iso_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iso"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iso"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso/create"]
      },
      "get": {
        "summary": "List storage/iso",
        "description": "List iso",
        "operationId": "storage_project_iso_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["storage_project_iso"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Iso collection",
                  "items": {
                    "$ref": "#/components/schemas/iso"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/iso/{isoId}": {
      "get": {
        "summary": "Get storage/iso",
        "description": "Returns a single iso",
        "operationId": "storage_project_iso_get",
        "tags": ["storage_project_iso"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iso"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso/get"]
      },
      "patch": {
        "summary": "Update storage/iso",
        "description": "Returns modified iso",
        "operationId": "storage_project_iso_update",
        "tags": ["storage_project_iso"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_iso_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iso"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete storage/iso",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          }
        ],
        "operationId": "storage_project_iso_delete",
        "description": "Delete iso",
        "tags": ["storage_project_iso"],
        "x-permissions": ["storage/iso/delete"],
        "x-state": ["Online"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/storage/{locationId}/project/{projectId}/iso/{isoId}/actions/detach": {
      "post": {
        "summary": "Detach storage/iso",
        "description": "action detach",
        "operationId": "storage_project_iso_detach",
        "tags": ["storage_project_iso"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iso"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iso"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso/detach"],
        "x-state": ["Online"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_iso_detach"
              }
            }
          },
          "required": true
        }
      }
    },
    "/storage/{locationId}/project/{projectId}/iso/{isoId}/actions/transfer": {
      "post": {
        "summary": "Transfer storage/iso",
        "description": "action transfer",
        "operationId": "storage_project_iso_transfer",
        "tags": ["storage_project_iso"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iso"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iso"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso/transfer"],
        "x-state": ["Online"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_iso_transfer"
              }
            }
          },
          "required": true
        }
      }
    },
    "/storage/{locationId}/project/{projectId}/iso/{isoId}/service": {
      "get": {
        "summary": "List storage/iso.service",
        "description": "List storage/iso.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          }
        ],
        "operationId": "storage_project_iso_service_list",
        "tags": ["storage_project_iso"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso.service/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/iso/{isoId}/service/{serviceId}": {
      "get": {
        "summary": "Get storage/iso.service",
        "description": "Get storage/iso.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_iso_service_get",
        "tags": ["storage_project_iso"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso.service/get"]
      }
    },
    "/storage/{locationId}/project/{projectId}/iso/{isoId}/tag": {
      "get": {
        "summary": "List storage/iso.tag",
        "description": "List storage/iso.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          }
        ],
        "operationId": "storage_project_iso_tag_list",
        "tags": ["storage_project_iso"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso.tag/list"]
      },
      "put": {
        "summary": "Replace storage/iso.tag",
        "description": "Replace storage/iso.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          }
        ],
        "operationId": "storage_project_iso_tag_put",
        "tags": ["storage_project_iso"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso.tag/create", "storage/iso.tag/delete"]
      },
      "post": {
        "summary": "Create storage/iso.tag",
        "description": "Create storage/iso.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          }
        ],
        "operationId": "storage_project_iso_tag_create",
        "tags": ["storage_project_iso"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso.tag/create"]
      }
    },
    "/storage/{locationId}/project/{projectId}/iso/{isoId}/tag/{tagId}": {
      "get": {
        "summary": "Get storage/iso.tag",
        "description": "Get storage/iso.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_iso_tag_get",
        "tags": ["storage_project_iso"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso.tag/get"]
      },
      "delete": {
        "summary": "Delete storage/iso.tag",
        "description": "Delete storage/iso.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_iso_tag_delete",
        "tags": ["storage_project_iso"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso.tag/delete"]
      }
    },
    "/storage/{locationId}/project/{projectId}/iso/{isoId}/event": {
      "get": {
        "summary": "List storage/iso.event",
        "description": "List storage/iso.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "storage_project_iso_event_list",
        "tags": ["storage_project_iso"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso.event/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/iso/{isoId}/event/{eventId}": {
      "get": {
        "summary": "Get storage/iso.event",
        "description": "Get storage/iso.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/isoId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_iso_event_get",
        "tags": ["storage_project_iso"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso.event/get"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netadp": {
      "post": {
        "summary": "Create networking/netadp",
        "description": "Create netadp",
        "operationId": "networking_project_netadp_create",
        "tags": ["networking_project_netadp"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_netadp_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/netadp"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/netadp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netadp/create"]
      },
      "get": {
        "summary": "List networking/netadp",
        "description": "List netadp",
        "operationId": "networking_project_netadp_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "assigned.resource",
            "description": "Filter by assigned.resource",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assigned.id",
            "description": "Filter by assigned.id",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "network",
            "description": "Filter by network",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["networking_project_netadp"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Netadp collection",
                  "items": {
                    "$ref": "#/components/schemas/netadp"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netadp/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netadp/{netadpId}": {
      "get": {
        "summary": "Get networking/netadp",
        "description": "Returns a single netadp",
        "operationId": "networking_project_netadp_get",
        "tags": ["networking_project_netadp"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netadpId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/netadp"
                }
              }
            },
            "links": {
              "ip": {
                "operationId": "networking_project_ip_list",
                "parameters": {
                  "associated.netadp": "$request.path.netadpId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netadp/get"]
      },
      "patch": {
        "summary": "Update networking/netadp",
        "description": "Returns modified netadp",
        "operationId": "networking_project_netadp_update",
        "tags": ["networking_project_netadp"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netadpId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_netadp_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/netadp"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete networking/netadp",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netadpId"
          }
        ],
        "operationId": "networking_project_netadp_delete",
        "description": "Delete netadp",
        "tags": ["networking_project_netadp"],
        "x-permissions": ["networking/netadp/delete"],
        "x-state": ["Online"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/networking/{locationId}/project/{projectId}/netadp/{netadpId}/service": {
      "get": {
        "summary": "List networking/netadp.service",
        "description": "List networking/netadp.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netadpId"
          }
        ],
        "operationId": "networking_project_netadp_service_list",
        "tags": ["networking_project_netadp"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netadp.service/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netadp/{netadpId}/service/{serviceId}": {
      "get": {
        "summary": "Get networking/netadp.service",
        "description": "Get networking/netadp.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netadpId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_netadp_service_get",
        "tags": ["networking_project_netadp"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netadp.service/get"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netadp/{netadpId}/tag": {
      "get": {
        "summary": "List networking/netadp.tag",
        "description": "List networking/netadp.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netadpId"
          }
        ],
        "operationId": "networking_project_netadp_tag_list",
        "tags": ["networking_project_netadp"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netadp.tag/list"]
      },
      "put": {
        "summary": "Replace networking/netadp.tag",
        "description": "Replace networking/netadp.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netadpId"
          }
        ],
        "operationId": "networking_project_netadp_tag_put",
        "tags": ["networking_project_netadp"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "networking/netadp.tag/create",
          "networking/netadp.tag/delete"
        ]
      },
      "post": {
        "summary": "Create networking/netadp.tag",
        "description": "Create networking/netadp.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netadpId"
          }
        ],
        "operationId": "networking_project_netadp_tag_create",
        "tags": ["networking_project_netadp"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netadp.tag/create"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netadp/{netadpId}/tag/{tagId}": {
      "get": {
        "summary": "Get networking/netadp.tag",
        "description": "Get networking/netadp.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netadpId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_netadp_tag_get",
        "tags": ["networking_project_netadp"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netadp.tag/get"]
      },
      "delete": {
        "summary": "Delete networking/netadp.tag",
        "description": "Delete networking/netadp.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netadpId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_netadp_tag_delete",
        "tags": ["networking_project_netadp"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netadp.tag/delete"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netadp/{netadpId}/event": {
      "get": {
        "summary": "List networking/netadp.event",
        "description": "List networking/netadp.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netadpId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "networking_project_netadp_event_list",
        "tags": ["networking_project_netadp"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netadp.event/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netadp/{netadpId}/event/{eventId}": {
      "get": {
        "summary": "Get networking/netadp.event",
        "description": "Get networking/netadp.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netadpId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_netadp_event_get",
        "tags": ["networking_project_netadp"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netadp.event/get"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netgw": {
      "post": {
        "summary": "Create networking/netgw",
        "description": "Create netgw",
        "operationId": "networking_project_netgw_create",
        "tags": ["networking_project_netgw"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_netgw_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/netgw"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/netgw"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw/create"]
      },
      "get": {
        "summary": "List networking/netgw",
        "description": "List netgw",
        "operationId": "networking_project_netgw_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["networking_project_netgw"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Netgw collection",
                  "items": {
                    "$ref": "#/components/schemas/netgw"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netgw/{netgwId}": {
      "get": {
        "summary": "Get networking/netgw",
        "description": "Returns a single netgw",
        "operationId": "networking_project_netgw_get",
        "tags": ["networking_project_netgw"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/netgw"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw/get"]
      },
      "patch": {
        "summary": "Update networking/netgw",
        "description": "Returns modified netgw",
        "operationId": "networking_project_netgw_update",
        "tags": ["networking_project_netgw"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_netgw_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/netgw"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete networking/netgw",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          }
        ],
        "operationId": "networking_project_netgw_delete",
        "description": "Delete netgw",
        "tags": ["networking_project_netgw"],
        "x-permissions": ["networking/netgw/delete"],
        "x-state": ["Detached"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/networking/{locationId}/project/{projectId}/netgw/{netgwId}/actions/attach": {
      "post": {
        "summary": "Attach networking/netgw",
        "description": "action attach",
        "operationId": "networking_project_netgw_attach",
        "tags": ["networking_project_netgw"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/netgw"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/netgw"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw/attach"],
        "x-state": ["Detached"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_netgw_attach"
              }
            }
          },
          "required": true
        }
      }
    },
    "/networking/{locationId}/project/{projectId}/netgw/{netgwId}/actions/detach": {
      "post": {
        "summary": "Detach networking/netgw",
        "description": "action detach",
        "operationId": "networking_project_netgw_detach",
        "tags": ["networking_project_netgw"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/netgw"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/netgw"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw/detach"],
        "x-state": ["Attached"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netgw/{netgwId}/service": {
      "get": {
        "summary": "List networking/netgw.service",
        "description": "List networking/netgw.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          }
        ],
        "operationId": "networking_project_netgw_service_list",
        "tags": ["networking_project_netgw"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw.service/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netgw/{netgwId}/service/{serviceId}": {
      "get": {
        "summary": "Get networking/netgw.service",
        "description": "Get networking/netgw.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_netgw_service_get",
        "tags": ["networking_project_netgw"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw.service/get"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netgw/{netgwId}/tag": {
      "get": {
        "summary": "List networking/netgw.tag",
        "description": "List networking/netgw.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          }
        ],
        "operationId": "networking_project_netgw_tag_list",
        "tags": ["networking_project_netgw"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw.tag/list"]
      },
      "put": {
        "summary": "Replace networking/netgw.tag",
        "description": "Replace networking/netgw.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          }
        ],
        "operationId": "networking_project_netgw_tag_put",
        "tags": ["networking_project_netgw"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "networking/netgw.tag/create",
          "networking/netgw.tag/delete"
        ]
      },
      "post": {
        "summary": "Create networking/netgw.tag",
        "description": "Create networking/netgw.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          }
        ],
        "operationId": "networking_project_netgw_tag_create",
        "tags": ["networking_project_netgw"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw.tag/create"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netgw/{netgwId}/tag/{tagId}": {
      "get": {
        "summary": "Get networking/netgw.tag",
        "description": "Get networking/netgw.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_netgw_tag_get",
        "tags": ["networking_project_netgw"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw.tag/get"]
      },
      "delete": {
        "summary": "Delete networking/netgw.tag",
        "description": "Delete networking/netgw.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_netgw_tag_delete",
        "tags": ["networking_project_netgw"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw.tag/delete"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netgw/{netgwId}/event": {
      "get": {
        "summary": "List networking/netgw.event",
        "description": "List networking/netgw.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "networking_project_netgw_event_list",
        "tags": ["networking_project_netgw"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw.event/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/netgw/{netgwId}/event/{eventId}": {
      "get": {
        "summary": "Get networking/netgw.event",
        "description": "Get networking/netgw.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/netgwId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_netgw_event_get",
        "tags": ["networking_project_netgw"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/netgw.event/get"]
      }
    },
    "/networking/{locationId}/project/{projectId}/network": {
      "post": {
        "summary": "Create networking/network",
        "description": "Create network",
        "operationId": "networking_project_network_create",
        "tags": ["networking_project_network"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_network_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/network"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/network"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/network/create"]
      },
      "get": {
        "summary": "List networking/network",
        "description": "List network",
        "operationId": "networking_project_network_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["networking_project_network"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Network collection",
                  "items": {
                    "$ref": "#/components/schemas/network"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/network/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/network/{networkId}": {
      "get": {
        "summary": "Get networking/network",
        "description": "Returns a single network",
        "operationId": "networking_project_network_get",
        "tags": ["networking_project_network"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/network"
                }
              }
            },
            "links": {
              "ip": {
                "operationId": "networking_project_ip_list",
                "parameters": {
                  "network": "$request.path.networkId"
                }
              },
              "netadp": {
                "operationId": "networking_project_netadp_list",
                "parameters": {
                  "network": "$request.path.networkId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/network/get"]
      },
      "patch": {
        "summary": "Update networking/network",
        "description": "Returns modified network",
        "operationId": "networking_project_network_update",
        "tags": ["networking_project_network"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/networking_project_network_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/network"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete networking/network",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          }
        ],
        "operationId": "networking_project_network_delete",
        "description": "Delete network",
        "tags": ["networking_project_network"],
        "x-permissions": ["networking/network/delete"],
        "x-state": ["Online"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/networking/{locationId}/project/{projectId}/network/{networkId}/service": {
      "get": {
        "summary": "List networking/network.service",
        "description": "List networking/network.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          }
        ],
        "operationId": "networking_project_network_service_list",
        "tags": ["networking_project_network"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/network.service/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/network/{networkId}/service/{serviceId}": {
      "get": {
        "summary": "Get networking/network.service",
        "description": "Get networking/network.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_network_service_get",
        "tags": ["networking_project_network"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/network.service/get"]
      }
    },
    "/networking/{locationId}/project/{projectId}/network/{networkId}/tag": {
      "get": {
        "summary": "List networking/network.tag",
        "description": "List networking/network.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          }
        ],
        "operationId": "networking_project_network_tag_list",
        "tags": ["networking_project_network"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/network.tag/list"]
      },
      "put": {
        "summary": "Replace networking/network.tag",
        "description": "Replace networking/network.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          }
        ],
        "operationId": "networking_project_network_tag_put",
        "tags": ["networking_project_network"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "networking/network.tag/create",
          "networking/network.tag/delete"
        ]
      },
      "post": {
        "summary": "Create networking/network.tag",
        "description": "Create networking/network.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          }
        ],
        "operationId": "networking_project_network_tag_create",
        "tags": ["networking_project_network"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/network.tag/create"]
      }
    },
    "/networking/{locationId}/project/{projectId}/network/{networkId}/tag/{tagId}": {
      "get": {
        "summary": "Get networking/network.tag",
        "description": "Get networking/network.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_network_tag_get",
        "tags": ["networking_project_network"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/network.tag/get"]
      },
      "delete": {
        "summary": "Delete networking/network.tag",
        "description": "Delete networking/network.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_network_tag_delete",
        "tags": ["networking_project_network"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/network.tag/delete"]
      }
    },
    "/networking/{locationId}/project/{projectId}/network/{networkId}/event": {
      "get": {
        "summary": "List networking/network.event",
        "description": "List networking/network.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "networking_project_network_event_list",
        "tags": ["networking_project_network"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/network.event/list"]
      }
    },
    "/networking/{locationId}/project/{projectId}/network/{networkId}/event/{eventId}": {
      "get": {
        "summary": "Get networking/network.event",
        "description": "Get networking/network.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/networkId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "networking_project_network_event_get",
        "tags": ["networking_project_network"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["networking/network.event/get"]
      }
    },
    "/iam/project/{projectId}/policy": {
      "post": {
        "summary": "Create iam/policy",
        "description": "Create policy",
        "operationId": "iam_project_policy_create",
        "tags": ["iam_project_policy"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam_project_policy_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policy"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy/create"]
      },
      "get": {
        "summary": "List iam/policy",
        "description": "List policy",
        "operationId": "iam_project_policy_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["iam_project_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Policy collection",
                  "items": {
                    "$ref": "#/components/schemas/policy"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy/list"]
      }
    },
    "/iam/organisation/{organisationId}/policy": {
      "post": {
        "summary": "Create iam/policy",
        "description": "Create policy",
        "operationId": "iam_organisation_policy_create",
        "tags": ["iam_organisation_policy"],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam_project_policy_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policy"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy/create"]
      },
      "get": {
        "summary": "List iam/policy",
        "description": "List policy",
        "operationId": "iam_organisation_policy_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["iam_organisation_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Policy collection",
                  "items": {
                    "$ref": "#/components/schemas/policy"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy/list"]
      }
    },
    "/iam/project/{projectId}/policy/{policyId}": {
      "get": {
        "summary": "Get iam/policy",
        "description": "Returns a single policy",
        "operationId": "iam_project_policy_get",
        "tags": ["iam_project_policy"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy/get"]
      },
      "patch": {
        "summary": "Update iam/policy",
        "description": "Returns modified policy",
        "operationId": "iam_project_policy_update",
        "tags": ["iam_project_policy"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam_project_policy_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete iam/policy",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_project_policy_delete",
        "description": "Delete policy",
        "tags": ["iam_project_policy"],
        "x-permissions": ["iam/policy/delete"],
        "x-state": ["Online"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/iam/organisation/{organisationId}/policy/{policyId}": {
      "get": {
        "summary": "Get iam/policy",
        "description": "Returns a single policy",
        "operationId": "iam_organisation_policy_get",
        "tags": ["iam_organisation_policy"],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy/get"]
      },
      "patch": {
        "summary": "Update iam/policy",
        "description": "Returns modified policy",
        "operationId": "iam_organisation_policy_update",
        "tags": ["iam_organisation_policy"],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam_project_policy_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/policy"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete iam/policy",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_organisation_policy_delete",
        "description": "Delete policy",
        "tags": ["iam_organisation_policy"],
        "x-permissions": ["iam/policy/delete"],
        "x-state": ["Online"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/iam/project/{projectId}/policy/{policyId}/actor": {
      "get": {
        "summary": "List iam/policy.actor",
        "description": "List iam/policy.actor",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_project_policy_actor_list",
        "tags": ["iam_project_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Iam.actor collection",
                  "items": {
                    "$ref": "#/components/schemas/iam.actor"
                  }
                }
              }
            },
            "links": {
              "invitation": {
                "operationId": "project_invitation_list",
                "parameters": {
                  "resource": "$path"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.actor/list"]
      },
      "post": {
        "summary": "Create iam/policy.actor",
        "description": "Create iam/policy.actor",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_project_policy_actor_create",
        "tags": ["iam_project_policy"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam.actor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iam.actor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.actor/create"]
      }
    },
    "/iam/organisation/{organisationId}/policy/{policyId}/actor": {
      "get": {
        "summary": "List iam/policy.actor",
        "description": "List iam/policy.actor",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_organisation_policy_actor_list",
        "tags": ["iam_organisation_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Iam.actor collection",
                  "items": {
                    "$ref": "#/components/schemas/iam.actor"
                  }
                }
              }
            },
            "links": {
              "invitation": {
                "operationId": "organisation_invitation_list",
                "parameters": {
                  "resource": "$path"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.actor/list"]
      },
      "post": {
        "summary": "Create iam/policy.actor",
        "description": "Create iam/policy.actor",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_organisation_policy_actor_create",
        "tags": ["iam_organisation_policy"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam.actor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iam.actor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.actor/create"]
      }
    },
    "/iam/project/{projectId}/policy/{policyId}/actor/{actorId}": {
      "get": {
        "summary": "Get iam/policy.actor",
        "description": "Get iam/policy.actor",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "actorId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_policy_actor_get",
        "tags": ["iam_project_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iam.actor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.actor/get"]
      },
      "delete": {
        "summary": "Delete iam/policy.actor",
        "description": "Delete iam/policy.actor",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "actorId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_policy_actor_delete",
        "tags": ["iam_project_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iam.actor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.actor/delete"]
      }
    },
    "/iam/organisation/{organisationId}/policy/{policyId}/actor/{actorId}": {
      "get": {
        "summary": "Get iam/policy.actor",
        "description": "Get iam/policy.actor",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "actorId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_organisation_policy_actor_get",
        "tags": ["iam_organisation_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iam.actor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.actor/get"]
      },
      "delete": {
        "summary": "Delete iam/policy.actor",
        "description": "Delete iam/policy.actor",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "actorId",
            "in": "path",
            "description": "actorId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_organisation_policy_actor_delete",
        "tags": ["iam_organisation_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iam.actor"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.actor/delete"]
      }
    },
    "/iam/project/{projectId}/policy/{policyId}/service": {
      "get": {
        "summary": "List iam/policy.service",
        "description": "List iam/policy.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_project_policy_service_list",
        "tags": ["iam_project_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.service/list"]
      }
    },
    "/iam/organisation/{organisationId}/policy/{policyId}/service": {
      "get": {
        "summary": "List iam/policy.service",
        "description": "List iam/policy.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_organisation_policy_service_list",
        "tags": ["iam_organisation_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.service/list"]
      }
    },
    "/iam/project/{projectId}/policy/{policyId}/service/{serviceId}": {
      "get": {
        "summary": "Get iam/policy.service",
        "description": "Get iam/policy.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_policy_service_get",
        "tags": ["iam_project_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.service/get"]
      }
    },
    "/iam/organisation/{organisationId}/policy/{policyId}/service/{serviceId}": {
      "get": {
        "summary": "Get iam/policy.service",
        "description": "Get iam/policy.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_organisation_policy_service_get",
        "tags": ["iam_organisation_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.service/get"]
      }
    },
    "/iam/project/{projectId}/policy/{policyId}/tag": {
      "get": {
        "summary": "List iam/policy.tag",
        "description": "List iam/policy.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_project_policy_tag_list",
        "tags": ["iam_project_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.tag/list"]
      },
      "put": {
        "summary": "Replace iam/policy.tag",
        "description": "Replace iam/policy.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_project_policy_tag_put",
        "tags": ["iam_project_policy"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.tag/create", "iam/policy.tag/delete"]
      },
      "post": {
        "summary": "Create iam/policy.tag",
        "description": "Create iam/policy.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_project_policy_tag_create",
        "tags": ["iam_project_policy"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.tag/create"]
      }
    },
    "/iam/organisation/{organisationId}/policy/{policyId}/tag": {
      "get": {
        "summary": "List iam/policy.tag",
        "description": "List iam/policy.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_organisation_policy_tag_list",
        "tags": ["iam_organisation_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.tag/list"]
      },
      "put": {
        "summary": "Replace iam/policy.tag",
        "description": "Replace iam/policy.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_organisation_policy_tag_put",
        "tags": ["iam_organisation_policy"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.tag/create", "iam/policy.tag/delete"]
      },
      "post": {
        "summary": "Create iam/policy.tag",
        "description": "Create iam/policy.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          }
        ],
        "operationId": "iam_organisation_policy_tag_create",
        "tags": ["iam_organisation_policy"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.tag/create"]
      }
    },
    "/iam/project/{projectId}/policy/{policyId}/tag/{tagId}": {
      "get": {
        "summary": "Get iam/policy.tag",
        "description": "Get iam/policy.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_policy_tag_get",
        "tags": ["iam_project_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.tag/get"]
      },
      "delete": {
        "summary": "Delete iam/policy.tag",
        "description": "Delete iam/policy.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_policy_tag_delete",
        "tags": ["iam_project_policy"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.tag/delete"]
      }
    },
    "/iam/organisation/{organisationId}/policy/{policyId}/tag/{tagId}": {
      "get": {
        "summary": "Get iam/policy.tag",
        "description": "Get iam/policy.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_organisation_policy_tag_get",
        "tags": ["iam_organisation_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.tag/get"]
      },
      "delete": {
        "summary": "Delete iam/policy.tag",
        "description": "Delete iam/policy.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_organisation_policy_tag_delete",
        "tags": ["iam_organisation_policy"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.tag/delete"]
      }
    },
    "/iam/project/{projectId}/policy/{policyId}/event": {
      "get": {
        "summary": "List iam/policy.event",
        "description": "List iam/policy.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "iam_project_policy_event_list",
        "tags": ["iam_project_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.event/list"]
      }
    },
    "/iam/organisation/{organisationId}/policy/{policyId}/event": {
      "get": {
        "summary": "List iam/policy.event",
        "description": "List iam/policy.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "iam_organisation_policy_event_list",
        "tags": ["iam_organisation_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.event/list"]
      }
    },
    "/iam/project/{projectId}/policy/{policyId}/event/{eventId}": {
      "get": {
        "summary": "Get iam/policy.event",
        "description": "Get iam/policy.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_policy_event_get",
        "tags": ["iam_project_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.event/get"]
      }
    },
    "/iam/organisation/{organisationId}/policy/{policyId}/event/{eventId}": {
      "get": {
        "summary": "Get iam/policy.event",
        "description": "Get iam/policy.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/policyId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_organisation_policy_event_get",
        "tags": ["iam_organisation_policy"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/policy.event/get"]
      }
    },
    "/compute/{locationId}/project/{projectId}/replica": {
      "post": {
        "summary": "Create compute/replica",
        "description": "Create replica",
        "operationId": "compute_project_replica_create",
        "tags": ["compute_project_replica"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/compute_project_replica_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replica"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replica"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/replica/create"],
        "x-audience": "developer"
      },
      "get": {
        "summary": "List compute/replica",
        "description": "List replica",
        "operationId": "compute_project_replica_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["compute_project_replica"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Replica collection",
                  "items": {
                    "$ref": "#/components/schemas/replica"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/replica/list"]
      }
    },
    "/compute/{locationId}/project/{projectId}/replica/{replicaId}": {
      "get": {
        "summary": "Get compute/replica",
        "description": "Returns a single replica",
        "operationId": "compute_project_replica_get",
        "tags": ["compute_project_replica"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/replicaId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/replica"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/replica/get"]
      },
      "delete": {
        "summary": "Delete compute/replica",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/replicaId"
          }
        ],
        "operationId": "compute_project_replica_delete",
        "description": "Delete replica",
        "tags": ["compute_project_replica"],
        "x-permissions": ["compute/replica/delete"],
        "x-state": ["Online"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/compute/{locationId}/project/{projectId}/replica/{replicaId}/service": {
      "get": {
        "summary": "List compute/replica.service",
        "description": "List compute/replica.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/replicaId"
          }
        ],
        "operationId": "compute_project_replica_service_list",
        "tags": ["compute_project_replica"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/replica.service/list"]
      }
    },
    "/compute/{locationId}/project/{projectId}/replica/{replicaId}/service/{serviceId}": {
      "get": {
        "summary": "Get compute/replica.service",
        "description": "Get compute/replica.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/replicaId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "compute_project_replica_service_get",
        "tags": ["compute_project_replica"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/replica.service/get"]
      }
    },
    "/compute/{locationId}/project/{projectId}/replica/{replicaId}/tag": {
      "get": {
        "summary": "List compute/replica.tag",
        "description": "List compute/replica.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/replicaId"
          }
        ],
        "operationId": "compute_project_replica_tag_list",
        "tags": ["compute_project_replica"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/replica.tag/list"]
      },
      "put": {
        "summary": "Replace compute/replica.tag",
        "description": "Replace compute/replica.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/replicaId"
          }
        ],
        "operationId": "compute_project_replica_tag_put",
        "tags": ["compute_project_replica"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "compute/replica.tag/create",
          "compute/replica.tag/delete"
        ]
      },
      "post": {
        "summary": "Create compute/replica.tag",
        "description": "Create compute/replica.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/replicaId"
          }
        ],
        "operationId": "compute_project_replica_tag_create",
        "tags": ["compute_project_replica"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/replica.tag/create"]
      }
    },
    "/compute/{locationId}/project/{projectId}/replica/{replicaId}/tag/{tagId}": {
      "get": {
        "summary": "Get compute/replica.tag",
        "description": "Get compute/replica.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/replicaId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "compute_project_replica_tag_get",
        "tags": ["compute_project_replica"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/replica.tag/get"]
      },
      "delete": {
        "summary": "Delete compute/replica.tag",
        "description": "Delete compute/replica.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/replicaId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "compute_project_replica_tag_delete",
        "tags": ["compute_project_replica"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/replica.tag/delete"]
      }
    },
    "/compute/{locationId}/project/{projectId}/replica/{replicaId}/event": {
      "get": {
        "summary": "List compute/replica.event",
        "description": "List compute/replica.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/replicaId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "compute_project_replica_event_list",
        "tags": ["compute_project_replica"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/replica.event/list"]
      }
    },
    "/compute/{locationId}/project/{projectId}/replica/{replicaId}/event/{eventId}": {
      "get": {
        "summary": "Get compute/replica.event",
        "description": "Get compute/replica.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/replicaId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "compute_project_replica_event_get",
        "tags": ["compute_project_replica"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/replica.event/get"]
      }
    },
    "/iam/project/{projectId}/role": {
      "post": {
        "summary": "Create iam/role",
        "description": "Create role",
        "operationId": "iam_project_role_create",
        "tags": ["iam_project_role"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam_project_role_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role/create"]
      },
      "get": {
        "summary": "List iam/role",
        "description": "List role",
        "operationId": "iam_project_role_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["iam_project_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Role collection",
                  "items": {
                    "$ref": "#/components/schemas/role"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role/list"]
      }
    },
    "/iam/organisation/{organisationId}/role": {
      "post": {
        "summary": "Create iam/role",
        "description": "Create role",
        "operationId": "iam_organisation_role_create",
        "tags": ["iam_organisation_role"],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam_project_role_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role/create"]
      },
      "get": {
        "summary": "List iam/role",
        "description": "List role",
        "operationId": "iam_organisation_role_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["iam_organisation_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Role collection",
                  "items": {
                    "$ref": "#/components/schemas/role"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role/list"]
      }
    },
    "/iam/project/{projectId}/role/{roleId}": {
      "get": {
        "summary": "Get iam/role",
        "description": "Returns a single role",
        "operationId": "iam_project_role_get",
        "tags": ["iam_project_role"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role/get"]
      },
      "patch": {
        "summary": "Update iam/role",
        "description": "Returns modified role",
        "operationId": "iam_project_role_update",
        "tags": ["iam_project_role"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam_project_role_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete iam/role",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_project_role_delete",
        "description": "Delete role",
        "tags": ["iam_project_role"],
        "x-permissions": ["iam/role/delete"],
        "x-state": ["Online"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/iam/organisation/{organisationId}/role/{roleId}": {
      "get": {
        "summary": "Get iam/role",
        "description": "Returns a single role",
        "operationId": "iam_organisation_role_get",
        "tags": ["iam_organisation_role"],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role/get"]
      },
      "patch": {
        "summary": "Update iam/role",
        "description": "Returns modified role",
        "operationId": "iam_organisation_role_update",
        "tags": ["iam_organisation_role"],
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam_project_role_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/role"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete iam/role",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_organisation_role_delete",
        "description": "Delete role",
        "tags": ["iam_organisation_role"],
        "x-permissions": ["iam/role/delete"],
        "x-state": ["Online"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/iam/project/{projectId}/role/{roleId}/permission": {
      "get": {
        "summary": "List iam/role.permission",
        "description": "List iam/role.permission",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_project_role_permission_list",
        "tags": ["iam_project_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Iam.permission collection",
                  "items": {
                    "$ref": "#/components/schemas/iam.permission"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.permission/list"]
      },
      "put": {
        "summary": "Replace iam/role.permission",
        "description": "Replace iam/role.permission",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_project_role_permission_put",
        "tags": ["iam_project_role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam.permission_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Iam.permission collection",
                  "items": {
                    "$ref": "#/components/schemas/iam.permission"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "iam/role.permission/create",
          "iam/role.permission/delete"
        ]
      },
      "post": {
        "summary": "Create iam/role.permission",
        "description": "Create iam/role.permission",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_project_role_permission_create",
        "tags": ["iam_project_role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam.permission"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iam.permission"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.permission/create"]
      }
    },
    "/iam/organisation/{organisationId}/role/{roleId}/permission": {
      "get": {
        "summary": "List iam/role.permission",
        "description": "List iam/role.permission",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_organisation_role_permission_list",
        "tags": ["iam_organisation_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Iam.permission collection",
                  "items": {
                    "$ref": "#/components/schemas/iam.permission"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.permission/list"]
      },
      "put": {
        "summary": "Replace iam/role.permission",
        "description": "Replace iam/role.permission",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_organisation_role_permission_put",
        "tags": ["iam_organisation_role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam.permission_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Iam.permission collection",
                  "items": {
                    "$ref": "#/components/schemas/iam.permission"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "iam/role.permission/create",
          "iam/role.permission/delete"
        ]
      },
      "post": {
        "summary": "Create iam/role.permission",
        "description": "Create iam/role.permission",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_organisation_role_permission_create",
        "tags": ["iam_organisation_role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam.permission"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iam.permission"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.permission/create"]
      }
    },
    "/iam/project/{projectId}/role/{roleId}/permission/{permissionId}": {
      "get": {
        "summary": "Get iam/role.permission",
        "description": "Get iam/role.permission",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "permissionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_role_permission_get",
        "tags": ["iam_project_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iam.permission"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.permission/get"]
      },
      "delete": {
        "summary": "Delete iam/role.permission",
        "description": "Delete iam/role.permission",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "permissionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_role_permission_delete",
        "tags": ["iam_project_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iam.permission"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.permission/delete"]
      }
    },
    "/iam/organisation/{organisationId}/role/{roleId}/permission/{permissionId}": {
      "get": {
        "summary": "Get iam/role.permission",
        "description": "Get iam/role.permission",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "permissionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_organisation_role_permission_get",
        "tags": ["iam_organisation_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iam.permission"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.permission/get"]
      },
      "delete": {
        "summary": "Delete iam/role.permission",
        "description": "Delete iam/role.permission",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "permissionId",
            "in": "path",
            "description": "permissionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_organisation_role_permission_delete",
        "tags": ["iam_organisation_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iam.permission"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.permission/delete"]
      }
    },
    "/iam/project/{projectId}/role/{roleId}/service": {
      "get": {
        "summary": "List iam/role.service",
        "description": "List iam/role.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_project_role_service_list",
        "tags": ["iam_project_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.service/list"]
      }
    },
    "/iam/organisation/{organisationId}/role/{roleId}/service": {
      "get": {
        "summary": "List iam/role.service",
        "description": "List iam/role.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_organisation_role_service_list",
        "tags": ["iam_organisation_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.service/list"]
      }
    },
    "/iam/project/{projectId}/role/{roleId}/service/{serviceId}": {
      "get": {
        "summary": "Get iam/role.service",
        "description": "Get iam/role.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_role_service_get",
        "tags": ["iam_project_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.service/get"]
      }
    },
    "/iam/organisation/{organisationId}/role/{roleId}/service/{serviceId}": {
      "get": {
        "summary": "Get iam/role.service",
        "description": "Get iam/role.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_organisation_role_service_get",
        "tags": ["iam_organisation_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.service/get"]
      }
    },
    "/iam/project/{projectId}/role/{roleId}/tag": {
      "get": {
        "summary": "List iam/role.tag",
        "description": "List iam/role.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_project_role_tag_list",
        "tags": ["iam_project_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.tag/list"]
      },
      "put": {
        "summary": "Replace iam/role.tag",
        "description": "Replace iam/role.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_project_role_tag_put",
        "tags": ["iam_project_role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.tag/create", "iam/role.tag/delete"]
      },
      "post": {
        "summary": "Create iam/role.tag",
        "description": "Create iam/role.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_project_role_tag_create",
        "tags": ["iam_project_role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.tag/create"]
      }
    },
    "/iam/organisation/{organisationId}/role/{roleId}/tag": {
      "get": {
        "summary": "List iam/role.tag",
        "description": "List iam/role.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_organisation_role_tag_list",
        "tags": ["iam_organisation_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.tag/list"]
      },
      "put": {
        "summary": "Replace iam/role.tag",
        "description": "Replace iam/role.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_organisation_role_tag_put",
        "tags": ["iam_organisation_role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.tag/create", "iam/role.tag/delete"]
      },
      "post": {
        "summary": "Create iam/role.tag",
        "description": "Create iam/role.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          }
        ],
        "operationId": "iam_organisation_role_tag_create",
        "tags": ["iam_organisation_role"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.tag/create"]
      }
    },
    "/iam/project/{projectId}/role/{roleId}/tag/{tagId}": {
      "get": {
        "summary": "Get iam/role.tag",
        "description": "Get iam/role.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_role_tag_get",
        "tags": ["iam_project_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.tag/get"]
      },
      "delete": {
        "summary": "Delete iam/role.tag",
        "description": "Delete iam/role.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_role_tag_delete",
        "tags": ["iam_project_role"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.tag/delete"]
      }
    },
    "/iam/organisation/{organisationId}/role/{roleId}/tag/{tagId}": {
      "get": {
        "summary": "Get iam/role.tag",
        "description": "Get iam/role.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_organisation_role_tag_get",
        "tags": ["iam_organisation_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.tag/get"]
      },
      "delete": {
        "summary": "Delete iam/role.tag",
        "description": "Delete iam/role.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_organisation_role_tag_delete",
        "tags": ["iam_organisation_role"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.tag/delete"]
      }
    },
    "/iam/project/{projectId}/role/{roleId}/event": {
      "get": {
        "summary": "List iam/role.event",
        "description": "List iam/role.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "iam_project_role_event_list",
        "tags": ["iam_project_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.event/list"]
      }
    },
    "/iam/organisation/{organisationId}/role/{roleId}/event": {
      "get": {
        "summary": "List iam/role.event",
        "description": "List iam/role.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "iam_organisation_role_event_list",
        "tags": ["iam_organisation_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.event/list"]
      }
    },
    "/iam/project/{projectId}/role/{roleId}/event/{eventId}": {
      "get": {
        "summary": "Get iam/role.event",
        "description": "Get iam/role.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_role_event_get",
        "tags": ["iam_project_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.event/get"]
      }
    },
    "/iam/organisation/{organisationId}/role/{roleId}/event/{eventId}": {
      "get": {
        "summary": "Get iam/role.event",
        "description": "Get iam/role.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/organisationId"
          },
          {
            "$ref": "#/components/parameters/roleId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_organisation_role_event_get",
        "tags": ["iam_organisation_role"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/role.event/get"]
      }
    },
    "/iam/project/{projectId}/sa": {
      "post": {
        "summary": "Create iam/sa",
        "description": "Create sa",
        "operationId": "iam_project_sa_create",
        "tags": ["iam_project_sa"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam_project_sa_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sa"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sa"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa/create"]
      },
      "get": {
        "summary": "List iam/sa",
        "description": "List sa",
        "operationId": "iam_project_sa_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["iam_project_sa"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Sa collection",
                  "items": {
                    "$ref": "#/components/schemas/sa"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa/list"]
      }
    },
    "/iam/project/{projectId}/sa/{saId}": {
      "get": {
        "summary": "Get iam/sa",
        "description": "Returns a single sa",
        "operationId": "iam_project_sa_get",
        "tags": ["iam_project_sa"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sa"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa/get"]
      },
      "patch": {
        "summary": "Update iam/sa",
        "description": "Returns modified sa",
        "operationId": "iam_project_sa_update",
        "tags": ["iam_project_sa"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam_project_sa_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sa"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete iam/sa",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          }
        ],
        "operationId": "iam_project_sa_delete",
        "description": "Delete sa",
        "tags": ["iam_project_sa"],
        "x-permissions": ["iam/sa/delete"],
        "x-state": ["Online"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/iam/project/{projectId}/sa/{saId}/credential": {
      "get": {
        "summary": "List iam/sa.credential",
        "description": "List iam/sa.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          }
        ],
        "operationId": "iam_project_sa_credential_list",
        "tags": ["iam_project_sa"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Sa.credential collection",
                  "items": {
                    "$ref": "#/components/schemas/sa.credential"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.credential/list"]
      },
      "post": {
        "summary": "Create iam/sa.credential",
        "description": "Create iam/sa.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          }
        ],
        "operationId": "iam_project_sa_credential_create",
        "tags": ["iam_project_sa"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sa.credential"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sa.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.credential/create"]
      }
    },
    "/iam/project/{projectId}/sa/{saId}/credential/{credentialId}": {
      "get": {
        "summary": "Get iam/sa.credential",
        "description": "Get iam/sa.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_sa_credential_get",
        "tags": ["iam_project_sa"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sa.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.credential/get"]
      },
      "patch": {
        "summary": "Update iam/sa.credential",
        "description": "Update iam/sa.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_sa_credential_patch",
        "tags": ["iam_project_sa"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/iam_project_sa_credential_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sa.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete iam/sa.credential",
        "description": "Delete iam/sa.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_sa_credential_delete",
        "tags": ["iam_project_sa"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sa"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sa"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.credential/delete"]
      }
    },
    "/iam/project/{projectId}/sa/{saId}/service": {
      "get": {
        "summary": "List iam/sa.service",
        "description": "List iam/sa.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          }
        ],
        "operationId": "iam_project_sa_service_list",
        "tags": ["iam_project_sa"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.service/list"]
      }
    },
    "/iam/project/{projectId}/sa/{saId}/service/{serviceId}": {
      "get": {
        "summary": "Get iam/sa.service",
        "description": "Get iam/sa.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_sa_service_get",
        "tags": ["iam_project_sa"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.service/get"]
      }
    },
    "/iam/project/{projectId}/sa/{saId}/tag": {
      "get": {
        "summary": "List iam/sa.tag",
        "description": "List iam/sa.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          }
        ],
        "operationId": "iam_project_sa_tag_list",
        "tags": ["iam_project_sa"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.tag/list"]
      },
      "put": {
        "summary": "Replace iam/sa.tag",
        "description": "Replace iam/sa.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          }
        ],
        "operationId": "iam_project_sa_tag_put",
        "tags": ["iam_project_sa"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.tag/create", "iam/sa.tag/delete"]
      },
      "post": {
        "summary": "Create iam/sa.tag",
        "description": "Create iam/sa.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          }
        ],
        "operationId": "iam_project_sa_tag_create",
        "tags": ["iam_project_sa"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.tag/create"]
      }
    },
    "/iam/project/{projectId}/sa/{saId}/tag/{tagId}": {
      "get": {
        "summary": "Get iam/sa.tag",
        "description": "Get iam/sa.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_sa_tag_get",
        "tags": ["iam_project_sa"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.tag/get"]
      },
      "delete": {
        "summary": "Delete iam/sa.tag",
        "description": "Delete iam/sa.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_sa_tag_delete",
        "tags": ["iam_project_sa"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.tag/delete"]
      }
    },
    "/iam/project/{projectId}/sa/{saId}/event": {
      "get": {
        "summary": "List iam/sa.event",
        "description": "List iam/sa.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "iam_project_sa_event_list",
        "tags": ["iam_project_sa"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.event/list"]
      }
    },
    "/iam/project/{projectId}/sa/{saId}/event/{eventId}": {
      "get": {
        "summary": "Get iam/sa.event",
        "description": "Get iam/sa.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/saId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "iam_project_sa_event_get",
        "tags": ["iam_project_sa"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["iam/sa.event/get"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault": {
      "post": {
        "summary": "Create storage/vault",
        "description": "Create vault",
        "operationId": "storage_project_vault_create",
        "tags": ["storage_project_vault"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_vault_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault/create"]
      },
      "get": {
        "summary": "List storage/vault",
        "description": "List vault",
        "operationId": "storage_project_vault_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Vault collection",
                  "items": {
                    "$ref": "#/components/schemas/vault"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}": {
      "get": {
        "summary": "Get storage/vault",
        "description": "Returns a single vault",
        "operationId": "storage_project_vault_get",
        "tags": ["storage_project_vault"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault/get"]
      },
      "patch": {
        "summary": "Update storage/vault",
        "description": "Returns modified vault",
        "operationId": "storage_project_vault_update",
        "tags": ["storage_project_vault"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_vault_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete storage/vault",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          }
        ],
        "operationId": "storage_project_vault_delete",
        "description": "Delete vault",
        "tags": ["storage_project_vault"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_vault_delete"
              }
            }
          },
          "required": true
        },
        "x-permissions": ["storage/vault/delete"],
        "x-state": ["Online", "Off"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/actions/start": {
      "post": {
        "summary": "Start storage/vault",
        "description": "action start",
        "operationId": "storage_project_vault_start",
        "tags": ["storage_project_vault"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault/start"],
        "x-state": ["Off"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/actions/stop": {
      "post": {
        "summary": "Stop storage/vault",
        "description": "action stop",
        "operationId": "storage_project_vault_stop",
        "tags": ["storage_project_vault"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault/stop"],
        "x-state": ["Online"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/actions/resize": {
      "post": {
        "summary": "Resize storage/vault",
        "description": "action resize",
        "operationId": "storage_project_vault_resize",
        "tags": ["storage_project_vault"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault/resize"],
        "x-state": ["Online", "Off"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_vault_resize"
              }
            }
          },
          "required": true
        }
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/snapshot": {
      "get": {
        "summary": "List storage/vault.snapshot",
        "description": "List storage/vault.snapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          }
        ],
        "operationId": "storage_project_vault_snapshot_list",
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Storage.snapshot collection",
                  "items": {
                    "$ref": "#/components/schemas/storage.snapshot"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.snapshot/list"]
      },
      "post": {
        "summary": "Create storage/vault.snapshot",
        "description": "Create storage/vault.snapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          }
        ],
        "operationId": "storage_project_vault_snapshot_create",
        "tags": ["storage_project_vault"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_vault_snapshot_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storage.snapshot"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.snapshot/create"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/snapshot/{snapshotId}": {
      "get": {
        "summary": "Get storage/vault.snapshot",
        "description": "Get storage/vault.snapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_vault_snapshot_get",
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storage.snapshot"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.snapshot/get"]
      },
      "delete": {
        "summary": "Delete storage/vault.snapshot",
        "description": "Delete storage/vault.snapshot",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "snapshotId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_vault_snapshot_delete",
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storage.snapshot"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.snapshot/delete"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/credential": {
      "get": {
        "summary": "List storage/vault.credential",
        "description": "List storage/vault.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          }
        ],
        "operationId": "storage_project_vault_credential_list",
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Vault.credential collection",
                  "items": {
                    "$ref": "#/components/schemas/vault.credential"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.credential/list"]
      },
      "post": {
        "summary": "Create storage/vault.credential",
        "description": "Create storage/vault.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          }
        ],
        "operationId": "storage_project_vault_credential_create",
        "tags": ["storage_project_vault"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/vault.credential"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.credential/create"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/credential/{credentialId}": {
      "get": {
        "summary": "Get storage/vault.credential",
        "description": "Get storage/vault.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_vault_credential_get",
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.credential/get"]
      },
      "patch": {
        "summary": "Update storage/vault.credential",
        "description": "Update storage/vault.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_vault_credential_patch",
        "tags": ["storage_project_vault"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storage_project_vault_credential_patch"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault.credential"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete storage/vault.credential",
        "description": "Delete storage/vault.credential",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "name": "credentialId",
            "in": "path",
            "description": "credentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_vault_credential_delete",
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vault"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.credential/delete"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/service": {
      "get": {
        "summary": "List storage/vault.service",
        "description": "List storage/vault.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          }
        ],
        "operationId": "storage_project_vault_service_list",
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.service/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/service/{serviceId}": {
      "get": {
        "summary": "Get storage/vault.service",
        "description": "Get storage/vault.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_vault_service_get",
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.service/get"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/tag": {
      "get": {
        "summary": "List storage/vault.tag",
        "description": "List storage/vault.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          }
        ],
        "operationId": "storage_project_vault_tag_list",
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.tag/list"]
      },
      "put": {
        "summary": "Replace storage/vault.tag",
        "description": "Replace storage/vault.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          }
        ],
        "operationId": "storage_project_vault_tag_put",
        "tags": ["storage_project_vault"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "storage/vault.tag/create",
          "storage/vault.tag/delete"
        ]
      },
      "post": {
        "summary": "Create storage/vault.tag",
        "description": "Create storage/vault.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          }
        ],
        "operationId": "storage_project_vault_tag_create",
        "tags": ["storage_project_vault"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.tag/create"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/tag/{tagId}": {
      "get": {
        "summary": "Get storage/vault.tag",
        "description": "Get storage/vault.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_vault_tag_get",
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.tag/get"]
      },
      "delete": {
        "summary": "Delete storage/vault.tag",
        "description": "Delete storage/vault.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_vault_tag_delete",
        "tags": ["storage_project_vault"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.tag/delete"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/event": {
      "get": {
        "summary": "List storage/vault.event",
        "description": "List storage/vault.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "storage_project_vault_event_list",
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.event/list"]
      }
    },
    "/storage/{locationId}/project/{projectId}/vault/{vaultId}/event/{eventId}": {
      "get": {
        "summary": "Get storage/vault.event",
        "description": "Get storage/vault.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vaultId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "storage_project_vault_event_get",
        "tags": ["storage_project_vault"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/vault.event/get"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm": {
      "post": {
        "summary": "Create compute/vm",
        "description": "Create vm",
        "operationId": "compute_project_vm_create",
        "tags": ["compute_project_vm"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/compute_project_vm_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm/create"]
      },
      "get": {
        "summary": "List compute/vm",
        "description": "List vm",
        "operationId": "compute_project_vm_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["compute_project_vm"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Vm collection",
                  "items": {
                    "$ref": "#/components/schemas/vm"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm/list"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}": {
      "get": {
        "summary": "Get compute/vm",
        "description": "Returns a single vm",
        "operationId": "compute_project_vm_get",
        "tags": ["compute_project_vm"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            },
            "links": {
              "netadp": {
                "operationId": "networking_project_netadp_list",
                "parameters": {
                  "assigned.id": "$request.path.vmId"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm/get"]
      },
      "patch": {
        "summary": "Update compute/vm",
        "description": "Returns modified vm",
        "operationId": "compute_project_vm_update",
        "tags": ["compute_project_vm"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/compute_project_vm_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete compute/vm",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          }
        ],
        "operationId": "compute_project_vm_delete",
        "description": "Delete vm",
        "tags": ["compute_project_vm"],
        "x-permissions": ["compute/vm/delete"],
        "x-state": ["Running", "Off"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/actions/start": {
      "post": {
        "summary": "Start compute/vm",
        "description": "action start",
        "operationId": "compute_project_vm_start",
        "tags": ["compute_project_vm"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm/start"],
        "x-state": ["Off"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/actions/restart": {
      "post": {
        "summary": "Restart compute/vm",
        "description": "action restart",
        "operationId": "compute_project_vm_restart",
        "tags": ["compute_project_vm"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm/restart"],
        "x-state": ["Running"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/actions/stop": {
      "post": {
        "summary": "Stop compute/vm",
        "description": "action stop",
        "operationId": "compute_project_vm_stop",
        "tags": ["compute_project_vm"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm/stop"],
        "x-state": ["Running"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/actions/turnoff": {
      "post": {
        "summary": "Turnoff compute/vm",
        "description": "action turnoff",
        "operationId": "compute_project_vm_turnoff",
        "tags": ["compute_project_vm"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm/turnoff"],
        "x-state": ["Running"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/actions/password_reset": {
      "post": {
        "summary": "Password reset compute/vm",
        "description": "action password_reset",
        "operationId": "compute_project_vm_password_reset",
        "tags": ["compute_project_vm"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm/passwordReset"],
        "x-state": ["Running"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/compute_project_vm_password_reset"
              }
            }
          },
          "required": true
        }
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/actions/flavour": {
      "post": {
        "summary": "Flavour compute/vm",
        "description": "action flavour",
        "operationId": "compute_project_vm_flavour",
        "tags": ["compute_project_vm"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vm"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm/flavour"],
        "x-state": ["Off"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/compute_project_vm_flavour"
              }
            }
          },
          "required": true
        }
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/actions/console": {
      "post": {
        "summary": "Console compute/vm",
        "description": "action console",
        "operationId": "compute_project_vm_console",
        "tags": ["compute_project_vm"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "201": {
            "description": "Console request accepted",
            "headers": {
              "location": {
                "description": "Absolute URL",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm/console"],
        "x-state": ["Running"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/actions/serialport": {
      "post": {
        "summary": "Serialport compute/vm",
        "description": "action serialport",
        "operationId": "compute_project_vm_serialport",
        "tags": ["compute_project_vm"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "serial port buffer",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm.serialport/read"],
        "x-state": ["Running"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/compute_project_vm_serialport"
              }
            }
          },
          "required": true
        }
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/disk": {
      "get": {
        "summary": "List compute/vm.disk",
        "description": "List compute/vm.disk",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          }
        ],
        "operationId": "compute_project_vm_disk_list",
        "tags": ["compute_project_vm"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Disk collection",
                  "items": {
                    "$ref": "#/components/schemas/disk"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/disk/list"]
      },
      "post": {
        "summary": "Create compute/vm.disk",
        "description": "Create compute/vm.disk",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          }
        ],
        "operationId": "compute_project_vm_disk_create",
        "tags": ["compute_project_vm"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/compute_project_vm_disk_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disk"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm/use"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/iso": {
      "get": {
        "summary": "List compute/vm.iso",
        "description": "List compute/vm.iso",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          }
        ],
        "operationId": "compute_project_vm_iso_list",
        "tags": ["compute_project_vm"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Iso collection",
                  "items": {
                    "$ref": "#/components/schemas/iso"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["storage/iso/list"]
      },
      "post": {
        "summary": "Create compute/vm.iso",
        "description": "Create compute/vm.iso",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          }
        ],
        "operationId": "compute_project_vm_iso_create",
        "tags": ["compute_project_vm"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/compute_project_vm_iso_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/iso"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm/use"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/service": {
      "get": {
        "summary": "List compute/vm.service",
        "description": "List compute/vm.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          }
        ],
        "operationId": "compute_project_vm_service_list",
        "tags": ["compute_project_vm"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm.service/list"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/service/{serviceId}": {
      "get": {
        "summary": "Get compute/vm.service",
        "description": "Get compute/vm.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "compute_project_vm_service_get",
        "tags": ["compute_project_vm"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm.service/get"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/tag": {
      "get": {
        "summary": "List compute/vm.tag",
        "description": "List compute/vm.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          }
        ],
        "operationId": "compute_project_vm_tag_list",
        "tags": ["compute_project_vm"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm.tag/list"]
      },
      "put": {
        "summary": "Replace compute/vm.tag",
        "description": "Replace compute/vm.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          }
        ],
        "operationId": "compute_project_vm_tag_put",
        "tags": ["compute_project_vm"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm.tag/create", "compute/vm.tag/delete"]
      },
      "post": {
        "summary": "Create compute/vm.tag",
        "description": "Create compute/vm.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          }
        ],
        "operationId": "compute_project_vm_tag_create",
        "tags": ["compute_project_vm"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm.tag/create"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/tag/{tagId}": {
      "get": {
        "summary": "Get compute/vm.tag",
        "description": "Get compute/vm.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "compute_project_vm_tag_get",
        "tags": ["compute_project_vm"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm.tag/get"]
      },
      "delete": {
        "summary": "Delete compute/vm.tag",
        "description": "Delete compute/vm.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "compute_project_vm_tag_delete",
        "tags": ["compute_project_vm"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm.tag/delete"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/event": {
      "get": {
        "summary": "List compute/vm.event",
        "description": "List compute/vm.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "compute_project_vm_event_list",
        "tags": ["compute_project_vm"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm.event/list"]
      }
    },
    "/compute/{locationId}/project/{projectId}/vm/{vmId}/event/{eventId}": {
      "get": {
        "summary": "Get compute/vm.event",
        "description": "Get compute/vm.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/vmId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "compute_project_vm_event_get",
        "tags": ["compute_project_vm"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["compute/vm.event/get"]
      }
    },
    "/billing/project/{projectId}/reservation": {
      "post": {
        "summary": "Create billing/reservation",
        "description": "Create reservation",
        "operationId": "billing_project_reservation_create",
        "tags": ["billing_project_reservation"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/billing_project_reservation_create"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reservation"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reservation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation/create"]
      },
      "get": {
        "summary": "List billing/reservation",
        "description": "List reservation",
        "operationId": "billing_project_reservation_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/tag.value"
          },
          {
            "$ref": "#/components/parameters/tag.key"
          }
        ],
        "tags": ["billing_project_reservation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Reservation collection",
                  "items": {
                    "$ref": "#/components/schemas/reservation"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation/list"]
      }
    },
    "/billing/project/{projectId}/reservation/{reservationId}": {
      "get": {
        "summary": "Get billing/reservation",
        "description": "Returns a single reservation",
        "operationId": "billing_project_reservation_get",
        "tags": ["billing_project_reservation"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reservation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation/get"]
      },
      "patch": {
        "summary": "Update billing/reservation",
        "description": "Returns modified reservation",
        "operationId": "billing_project_reservation_update",
        "tags": ["billing_project_reservation"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/billing_project_reservation_update"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reservation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      },
      "delete": {
        "summary": "Delete billing/reservation",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          }
        ],
        "operationId": "billing_project_reservation_delete",
        "description": "Delete reservation",
        "tags": ["billing_project_reservation"],
        "x-permissions": ["billing/reservation/delete"],
        "x-state": ["Expired"],
        "responses": {
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/billing/project/{projectId}/reservation/{reservationId}/actions/assign": {
      "post": {
        "summary": "Assign billing/reservation",
        "description": "action assign",
        "operationId": "billing_project_reservation_assign",
        "tags": ["billing_project_reservation"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reservation"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reservation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation/assign"],
        "x-state": ["Detached"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/billing_project_reservation_assign"
              }
            }
          },
          "required": true
        }
      }
    },
    "/billing/project/{projectId}/reservation/{reservationId}/actions/extend": {
      "post": {
        "summary": "Extend billing/reservation",
        "description": "action extend",
        "operationId": "billing_project_reservation_extend",
        "tags": ["billing_project_reservation"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          },
          {
            "$ref": "#/components/parameters/x-idempotency-key"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reservation"
                }
              }
            }
          },
          "202": {
            "description": "operation queued",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/reservation"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation/extend"],
        "x-state": ["Attached", "Detached"]
      }
    },
    "/billing/project/{projectId}/reservation/{reservationId}/service": {
      "get": {
        "summary": "List billing/reservation.service",
        "description": "List billing/reservation.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          }
        ],
        "operationId": "billing_project_reservation_service_list",
        "tags": ["billing_project_reservation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation.service/list"]
      }
    },
    "/billing/project/{projectId}/reservation/{reservationId}/service/{serviceId}": {
      "get": {
        "summary": "Get billing/reservation.service",
        "description": "Get billing/reservation.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "billing_project_reservation_service_get",
        "tags": ["billing_project_reservation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation.service/get"]
      }
    },
    "/billing/project/{projectId}/reservation/{reservationId}/tag": {
      "get": {
        "summary": "List billing/reservation.tag",
        "description": "List billing/reservation.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          }
        ],
        "operationId": "billing_project_reservation_tag_list",
        "tags": ["billing_project_reservation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation.tag/list"]
      },
      "put": {
        "summary": "Replace billing/reservation.tag",
        "description": "Replace billing/reservation.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          }
        ],
        "operationId": "billing_project_reservation_tag_put",
        "tags": ["billing_project_reservation"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "billing/reservation.tag/create",
          "billing/reservation.tag/delete"
        ]
      },
      "post": {
        "summary": "Create billing/reservation.tag",
        "description": "Create billing/reservation.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          }
        ],
        "operationId": "billing_project_reservation_tag_create",
        "tags": ["billing_project_reservation"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation.tag/create"]
      }
    },
    "/billing/project/{projectId}/reservation/{reservationId}/tag/{tagId}": {
      "get": {
        "summary": "Get billing/reservation.tag",
        "description": "Get billing/reservation.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "billing_project_reservation_tag_get",
        "tags": ["billing_project_reservation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation.tag/get"]
      },
      "delete": {
        "summary": "Delete billing/reservation.tag",
        "description": "Delete billing/reservation.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "billing_project_reservation_tag_delete",
        "tags": ["billing_project_reservation"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation.tag/delete"]
      }
    },
    "/billing/project/{projectId}/reservation/{reservationId}/event": {
      "get": {
        "summary": "List billing/reservation.event",
        "description": "List billing/reservation.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "billing_project_reservation_event_list",
        "tags": ["billing_project_reservation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation.event/list"]
      }
    },
    "/billing/project/{projectId}/reservation/{reservationId}/event/{eventId}": {
      "get": {
        "summary": "Get billing/reservation.event",
        "description": "Get billing/reservation.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/reservationId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "billing_project_reservation_event_get",
        "tags": ["billing_project_reservation"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/reservation.event/get"]
      }
    },
    "/vmhost/{locationId}/project/{projectId}/instance": {
      "get": {
        "summary": "List vmhost/instance",
        "description": "List instance",
        "operationId": "vmhost_project_instance_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "name": "enabledServices",
            "description": "Filter by enabledServices",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["vmhost_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Vmhost collection",
                  "items": {
                    "$ref": "#/components/schemas/vmhost"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["vmhost/instance/list"]
      }
    },
    "/vmhost/{locationId}/project/{projectId}/instance/{instanceId}": {
      "get": {
        "summary": "Get vmhost/instance",
        "description": "Returns a single instance",
        "operationId": "vmhost_project_instance_get",
        "tags": ["vmhost_project_instance"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vmhost"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["vmhost/instance/get"]
      }
    },
    "/vmhost/{locationId}/project/{projectId}/instance/{instanceId}/service": {
      "get": {
        "summary": "List vmhost/instance.service",
        "description": "List vmhost/instance.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "vmhost_project_instance_service_list",
        "tags": ["vmhost_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "ResourceService collection",
                  "items": {
                    "$ref": "#/components/schemas/resourceService"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["vmhost/instance.service/list"]
      }
    },
    "/vmhost/{locationId}/project/{projectId}/instance/{instanceId}/service/{serviceId}": {
      "get": {
        "summary": "Get vmhost/instance.service",
        "description": "Get vmhost/instance.service",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "serviceId",
            "in": "path",
            "description": "serviceId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "vmhost_project_instance_service_get",
        "tags": ["vmhost_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/resourceService"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["vmhost/instance.service/get"]
      }
    },
    "/vmhost/{locationId}/project/{projectId}/instance/{instanceId}/tag": {
      "get": {
        "summary": "List vmhost/instance.tag",
        "description": "List vmhost/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "vmhost_project_instance_tag_list",
        "tags": ["vmhost_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["vmhost/instance.tag/list"]
      },
      "put": {
        "summary": "Replace vmhost/instance.tag",
        "description": "Replace vmhost/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "vmhost_project_instance_tag_put",
        "tags": ["vmhost_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag_array"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Tag collection",
                  "items": {
                    "$ref": "#/components/schemas/tag"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": [
          "vmhost/instance.tag/create",
          "vmhost/instance.tag/delete"
        ]
      },
      "post": {
        "summary": "Create vmhost/instance.tag",
        "description": "Create vmhost/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          }
        ],
        "operationId": "vmhost_project_instance_tag_create",
        "tags": ["vmhost_project_instance"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["vmhost/instance.tag/create"]
      }
    },
    "/vmhost/{locationId}/project/{projectId}/instance/{instanceId}/tag/{tagId}": {
      "get": {
        "summary": "Get vmhost/instance.tag",
        "description": "Get vmhost/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "vmhost_project_instance_tag_get",
        "tags": ["vmhost_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["vmhost/instance.tag/get"]
      },
      "delete": {
        "summary": "Delete vmhost/instance.tag",
        "description": "Delete vmhost/instance.tag",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "tagId",
            "in": "path",
            "description": "tagId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "vmhost_project_instance_tag_delete",
        "tags": ["vmhost_project_instance"],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["vmhost/instance.tag/delete"]
      }
    },
    "/vmhost/{locationId}/project/{projectId}/instance/{instanceId}/event": {
      "get": {
        "summary": "List vmhost/instance.event",
        "description": "List vmhost/instance.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "$limit",
            "in": "query",
            "description": "$limit",
            "required": false,
            "schema": {
              "type": "number",
              "default": 100,
              "minimum": 1,
              "maximum": 1000
            }
          },
          {
            "name": "$skip",
            "in": "query",
            "description": "$skip",
            "required": false,
            "schema": {
              "type": "number"
            }
          }
        ],
        "operationId": "vmhost_project_instance_event_list",
        "tags": ["vmhost_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Event collection",
                  "items": {
                    "$ref": "#/components/schemas/event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["vmhost/instance.event/list"]
      }
    },
    "/vmhost/{locationId}/project/{projectId}/instance/{instanceId}/event/{eventId}": {
      "get": {
        "summary": "Get vmhost/instance.event",
        "description": "Get vmhost/instance.event",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/locationId"
          },
          {
            "$ref": "#/components/parameters/instanceId"
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "eventId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "vmhost_project_instance_event_get",
        "tags": ["vmhost_project_instance"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["vmhost/instance.event/get"]
      }
    },
    "/billing/project/{projectId}/service": {
      "get": {
        "summary": "List billing/service",
        "description": "List service",
        "operationId": "billing_project_service_list",
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "name": "kind",
            "description": "Filter by kind",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "/^[a-z]+\\/[a-z]+$/"
            }
          },
          {
            "name": "name",
            "description": "Filter by name",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "description": "Filter by type",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "tags": ["billing_project_service"],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "title": "Service collection",
                  "items": {
                    "$ref": "#/components/schemas/service"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/service/list"]
      }
    },
    "/billing/project/{projectId}/service/{serviceId}": {
      "get": {
        "summary": "Get billing/service",
        "description": "Returns a single service",
        "operationId": "billing_project_service_get",
        "tags": ["billing_project_service"],
        "parameters": [
          {
            "$ref": "#/components/parameters/projectId"
          },
          {
            "$ref": "#/components/parameters/serviceId"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/service"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-permissions": ["billing/service/get"]
      }
    }
  },
  "tags": [
    {
      "name": "iam_user",
      "description": "",
      "x-kind": "iam/user",
      "x-location": false,
      "x-parent": false
    },
    {
      "name": "iam_project",
      "description": "",
      "x-kind": "iam/project",
      "x-location": false,
      "x-parent": false
    },
    {
      "name": "support_project_ticket",
      "description": "",
      "x-kind": "support/ticket",
      "x-location": false,
      "x-parent": ["project"]
    },
    {
      "name": "iam_organisation",
      "description": "",
      "x-kind": "iam/organisation",
      "x-location": false,
      "x-parent": false
    },
    {
      "name": "provider_project_agent",
      "description": "Available as part of the Early Adopters program.",
      "x-kind": "provider/agent",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "database_project_instance",
      "description": "Available as part of the Early Adopters program.",
      "x-kind": "database/instance",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "insight_project_journal",
      "description": "Available as part of the Early Adopters program.",
      "x-kind": "insight/journal",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "container_project_registry",
      "description": "Available as part of the Early Adopters program.",
      "x-kind": "container/registry",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "website_project_instance",
      "description": "Available as part of the Early Adopters program.",
      "x-kind": "website/instance",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "dns_project_zone",
      "description": "",
      "x-kind": "dns/zone",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "storage_project_disk",
      "description": "",
      "x-kind": "storage/disk",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "networking_project_firewall",
      "description": "",
      "x-kind": "networking/firewall",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "storage_project_image",
      "description": "",
      "x-kind": "storage/image",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "networking_project_ip",
      "description": "",
      "x-kind": "networking/ip",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "storage_project_iso",
      "description": "",
      "x-kind": "storage/iso",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "networking_project_netadp",
      "description": "",
      "x-kind": "networking/netadp",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "networking_project_netgw",
      "description": "",
      "x-kind": "networking/netgw",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "networking_project_network",
      "description": "",
      "x-kind": "networking/network",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "iam_project_policy",
      "description": "",
      "x-kind": "iam/policy",
      "x-location": false,
      "x-parent": ["project", "organisation"]
    },
    {
      "name": "iam_organisation_policy",
      "description": "",
      "x-kind": "iam/policy",
      "x-location": false,
      "x-parent": ["project", "organisation"]
    },
    {
      "name": "compute_project_replica",
      "description": "",
      "x-kind": "compute/replica",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "iam_project_role",
      "description": "",
      "x-kind": "iam/role",
      "x-location": false,
      "x-parent": ["project", "organisation"]
    },
    {
      "name": "iam_organisation_role",
      "description": "",
      "x-kind": "iam/role",
      "x-location": false,
      "x-parent": ["project", "organisation"]
    },
    {
      "name": "iam_project_sa",
      "description": "",
      "x-kind": "iam/sa",
      "x-location": false,
      "x-parent": ["project"]
    },
    {
      "name": "storage_project_vault",
      "description": "",
      "x-kind": "storage/vault",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "compute_project_vm",
      "description": "",
      "x-kind": "compute/vm",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "billing_project_reservation",
      "description": "",
      "x-kind": "billing/reservation",
      "x-location": false,
      "x-parent": ["project"]
    },
    {
      "name": "vmhost_project_instance",
      "description": "",
      "x-kind": "vmhost/instance",
      "x-location": true,
      "x-parent": ["project"]
    },
    {
      "name": "billing_project_service",
      "description": "",
      "x-kind": "billing/service",
      "x-location": false,
      "x-parent": ["project"]
    }
  ],
  "components": {
    "schemas": {
      "user.credential": {
        "type": "object",
        "required": ["name", "type", "value"],
        "properties": {
          "id": {
            "title": "Credential id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Credential name",
            "type": "string"
          },
          "createdBy": {
            "title": "Credential createdBy",
            "type": "string",
            "readOnly": true
          },
          "createdOn": {
            "title": "Credential createdOn",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "title": "Credential type",
            "type": "string",
            "enum": ["ssh", "sha512", "totp", "otac", "plain"]
          },
          "value": {
            "title": "Credential value",
            "type": "string",
            "writeOnly": true
          },
          "fingerprint": {
            "title": "Credential fingerprint",
            "type": "string",
            "readOnly": true
          },
          "token": {
            "title": "Credential token",
            "type": "string"
          }
        },
        "format": "credential"
      },
      "event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "state": {
            "type": "string",
            "enum": ["pending", "processing", "finished", "error"]
          },
          "stage": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          }
        }
      },
      "hdd": {
        "type": "object",
        "properties": {
          "maximumIOPS": {
            "type": "number"
          },
          "controllerType": {
            "type": "string"
          },
          "controllerNumber": {
            "type": "string"
          },
          "controllerLocation": {
            "type": "number"
          },
          "disk": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "storage/disk"
            }
          },
          "id": {
            "type": "string"
          }
        }
      },
      "billing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "period": {
            "type": "string"
          },
          "price": {
            "type": "number"
          },
          "quantity": {
            "type": "number"
          },
          "project": {
            "type": "string"
          },
          "oneTime": {
            "type": "boolean"
          },
          "service": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "resource": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "deleted": {
                "type": "boolean"
              }
            }
          },
          "charges": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "value": {
                  "type": "number"
                },
                "start": {
                  "type": "string"
                },
                "end": {
                  "type": "string"
                },
                "price": {
                  "type": "number"
                },
                "quantity": {
                  "type": "number"
                },
                "paidFrom": {
                  "type": "string"
                },
                "paidOn": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Unallocated", "Allocated", "Expired"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string"
          },
          "creditsFree": {
            "type": "number"
          },
          "credits": {
            "type": "number"
          },
          "channel": {
            "type": "string",
            "enum": ["bank", "dotpay", "promo", "paypal", "ecard", "przelewy24"]
          },
          "amount": {
            "type": "number"
          }
        }
      },
      "invoice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "additionalInfo": {
            "type": "string"
          },
          "corrections": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          "invoiceInfo": {
            "type": "string"
          },
          "invoiceNo": {
            "type": "string"
          },
          "issueDate": {
            "type": "string",
            "format": "date-time"
          },
          "payments": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ObjectId"
            }
          },
          "seller": {
            "type": "object",
            "properties": {
              "company": {
                "type": "string"
              },
              "address": {
                "type": "object",
                "properties": {
                  "street": {
                    "type": "string"
                  },
                  "zipcode": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  }
                },
                "required": ["street", "zipcode", "city", "country"]
              },
              "nip": {
                "type": "string"
              }
            },
            "required": ["company", "nip"]
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "price": {
                  "type": "string"
                },
                "netto": {
                  "type": "string"
                },
                "brutto": {
                  "type": "string"
                },
                "vatAmount": {
                  "type": "string"
                },
                "vatRate": {
                  "type": "string"
                },
                "quantity": {
                  "type": "number"
                }
              },
              "required": [
                "name",
                "price",
                "netto",
                "brutto",
                "vatAmount",
                "vatRate",
                "quantity"
              ]
            }
          },
          "buyer": {
            "type": "object",
            "properties": {
              "company": {
                "type": "string"
              },
              "address": {
                "type": "object",
                "properties": {
                  "street": {
                    "type": "string"
                  },
                  "zipcode": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  }
                },
                "required": ["street", "city", "country"]
              },
              "nip": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            },
            "required": ["company"]
          },
          "type": {
            "type": "string",
            "enum": ["vat", "correction"]
          },
          "summary": {
            "type": "string"
          },
          "project": {
            "type": "string",
            "format": "ObjectId"
          },
          "duplicate": {
            "type": "object",
            "properties": {
              "createdOn": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          },
          "uri": {
            "type": "string"
          },
          "__array__": {
            "type": "string"
          }
        }
      },
      "proforma": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "invoiceNo": {
            "type": "string"
          },
          "seller": {
            "type": "object",
            "properties": {
              "company": {
                "type": "string"
              },
              "address": {
                "type": "object",
                "properties": {
                  "street": {
                    "type": "string"
                  },
                  "zipcode": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  }
                },
                "required": ["street", "zipcode", "city", "country"]
              },
              "nip": {
                "type": "string"
              },
              "iban": {
                "type": "string"
              }
            },
            "required": ["company", "nip", "iban"]
          },
          "buyer": {
            "type": "object",
            "properties": {
              "company": {
                "type": "string"
              },
              "address": {
                "type": "object",
                "properties": {
                  "street": {
                    "type": "string"
                  },
                  "zipcode": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  }
                },
                "required": ["street", "city", "country"]
              },
              "nip": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            },
            "required": ["company"]
          },
          "issueDate": {
            "type": "string",
            "format": "date-time"
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "price": {
                  "type": "string"
                },
                "netto": {
                  "type": "string"
                },
                "brutto": {
                  "type": "string"
                },
                "vatAmount": {
                  "type": "string"
                },
                "vatRate": {
                  "type": "string"
                },
                "quantity": {
                  "type": "number"
                }
              },
              "required": [
                "name",
                "price",
                "netto",
                "brutto",
                "vatAmount",
                "vatRate",
                "quantity"
              ]
            }
          },
          "summary": {
            "type": "string"
          },
          "project": {
            "type": "string",
            "format": "ObjectId"
          },
          "uri": {
            "type": "string"
          },
          "__array__": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "invoiceNo": {
                "type": "string"
              },
              "issueDate": {
                "type": "string",
                "format": "date-time"
              },
              "summary": {
                "type": "string"
              },
              "project": {
                "type": "string"
              },
              "uri": {
                "type": "string"
              }
            }
          }
        }
      },
      "project.billing": {
        "type": "object",
        "properties": {
          "credits": {
            "type": "number"
          },
          "creditsBonus": {
            "type": "number"
          },
          "creditLimit": {
            "type": "number"
          }
        }
      },
      "organisation.billing": {
        "type": "object",
        "properties": {
          "currency": {
            "type": "string"
          },
          "company": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "address": {
            "type": "object",
            "properties": {
              "street": {
                "type": "string"
              },
              "zipcode": {
                "type": "string"
              },
              "city": {
                "type": "string"
              },
              "country": {
                "type": "string"
              }
            },
            "required": ["street", "zipcode", "city", "country"]
          },
          "nip": {
            "type": "string"
          }
        }
      },
      "agentResource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "createdOn": {
            "type": "string"
          },
          "project": {
            "type": "string"
          }
        }
      },
      "agentResourceEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "createdOn": {
            "type": "string"
          },
          "project": {
            "type": "string"
          }
        }
      },
      "authToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "expiry": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "access": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "method": {
                  "type": "string",
                  "enum": ["ALL", "GET", "POST", "PATCH", "DELETE"]
                },
                "path": {
                  "type": "string"
                }
              },
              "required": ["method", "path"]
            }
          },
          "name": {
            "type": "string"
          },
          "clientIp": {
            "type": "string"
          },
          "userAgent": {
            "type": "string"
          }
        }
      },
      "user_update": {
        "type": "object",
        "properties": {
          "phone": {
            "title": "User phone",
            "type": "string",
            "x-permissions": ["iam/user.phone/update"]
          },
          "lang": {
            "title": "User lang",
            "type": "string",
            "enum": ["en", "pl"],
            "x-permissions": ["iam/user.lang/update"]
          }
        },
        "format": "patch user"
      },
      "resourceService": {
        "type": "object",
        "properties": {
          "id": {
            "title": "ResourceService id",
            "type": "string"
          },
          "name": {
            "title": "ResourceService name",
            "type": "string"
          },
          "type": {
            "title": "ResourceService type",
            "type": "string"
          },
          "sourceService": {
            "title": "ResourceService sourceService",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service"
            }
          },
          "billing": {
            "title": "ResourceService billing",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/instance"
            }
          },
          "data": {
            "title": "ResourceService data",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "tag": {
        "type": "object",
        "required": ["id", "key", "value"],
        "properties": {
          "id": {
            "title": "Tag id",
            "type": "string",
            "readOnly": true
          },
          "key": {
            "title": "Tag key",
            "type": "string"
          },
          "value": {
            "title": "Tag value",
            "type": "string"
          }
        }
      },
      "tag_array": {
        "type": "array",
        "title": "Tag collection",
        "items": {
          "$ref": "#/components/schemas/tag"
        }
      },
      "user_credential_patch": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Credential name",
            "type": "string",
            "x-permissions": ["iam/user.credential.name/update"]
          }
        }
      },
      "user": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "lang": {
            "type": "string",
            "enum": ["en", "pl"],
            "default": "en"
          },
          "phone": {
            "type": "string"
          },
          "limit": {
            "type": "object",
            "properties": {
              "organisation": {
                "type": "object",
                "properties": {
                  "count": {
                    "type": "number",
                    "default": 3
                  }
                },
                "required": ["count"]
              }
            }
          },
          "uri": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["iam/user.tag/list"]
          }
        }
      },
      "project.feature": {
        "type": "object",
        "properties": {
          "earlyAdopter": {
            "title": "Feature earlyAdopter",
            "type": "boolean",
            "default": false
          }
        }
      },
      "project.credential": {
        "type": "object",
        "required": ["name", "type", "value"],
        "properties": {
          "id": {
            "title": "Credential id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Credential name",
            "type": "string"
          },
          "createdBy": {
            "title": "Credential createdBy",
            "type": "string",
            "readOnly": true
          },
          "createdOn": {
            "title": "Credential createdOn",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "title": "Credential type",
            "type": "string",
            "enum": ["ssh"]
          },
          "value": {
            "title": "Credential value",
            "type": "string",
            "writeOnly": true
          },
          "fingerprint": {
            "title": "Credential fingerprint",
            "type": "string",
            "readOnly": true
          },
          "token": {
            "title": "Credential token",
            "type": "string"
          }
        },
        "format": "credential"
      },
      "quota": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Quota id",
            "type": "string"
          },
          "name": {
            "title": "Quota name",
            "type": "string"
          },
          "metric": {
            "title": "Quota metric",
            "type": "object",
            "properties": {
              "key": {
                "title": "Metric key",
                "type": "string"
              },
              "unit": {
                "title": "Metric unit",
                "type": "string"
              }
            }
          },
          "usage": {
            "title": "Quota usage",
            "type": "number"
          },
          "limit": {
            "title": "Quota limit",
            "type": "object",
            "properties": {
              "platform": {
                "title": "Limit platform",
                "type": "number"
              },
              "user": {
                "title": "Limit user",
                "type": "number"
              },
              "effective": {
                "title": "Limit effective",
                "type": "number",
                "readOnly": true
              }
            }
          }
        }
      },
      "quotaLimit": {
        "type": "object",
        "properties": {
          "user": {
            "title": "QuotaLimit user",
            "type": "number"
          },
          "effective": {
            "title": "QuotaLimit effective",
            "type": "number",
            "readOnly": true
          }
        }
      },
      "invitation": {
        "type": "object",
        "required": ["id", "email", "resource"],
        "properties": {
          "id": {
            "title": "Invitation id",
            "type": "string",
            "readOnly": true
          },
          "email": {
            "title": "Invitation email",
            "type": "string"
          },
          "resource": {
            "title": "Invitation resource",
            "type": "string"
          }
        }
      },
      "ownership": {
        "type": "object",
        "required": ["id", "user"],
        "properties": {
          "id": {
            "title": "Ownership id",
            "type": "string"
          },
          "user": {
            "title": "Ownership user",
            "type": "string"
          }
        }
      },
      "project_create": {
        "type": "object",
        "required": ["name", "organisation"],
        "properties": {
          "name": {
            "title": "Project name",
            "type": "string"
          },
          "organisation": {
            "title": "Project organisation",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/organisation"
            },
            "x-permissions": ["iam/project/create"]
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create project"
      },
      "project_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Project name",
            "type": "string",
            "x-permissions": ["iam/project.name/update"]
          }
        },
        "format": "patch project"
      },
      "attempt": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Attempt id",
            "type": "string"
          },
          "status": {
            "title": "Attempt status",
            "type": "number"
          },
          "error": {
            "title": "Attempt error",
            "type": "boolean",
            "default": false
          },
          "stdout": {
            "title": "Attempt stdout",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "stderr": {
            "title": "Attempt stderr",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "createdOn": {
            "title": "Attempt createdOn",
            "type": "string",
            "format": "date-time"
          },
          "agent": {
            "title": "Attempt agent",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "provider/agent"
            }
          }
        }
      },
      "project_credentialStore_patch": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "CredentialStore name",
            "type": "string",
            "x-permissions": ["iam/project.credentialStore.name/update"]
          }
        }
      },
      "project_quota_limit_patch": {
        "type": "object",
        "properties": {
          "user": {
            "title": "Limit user",
            "type": "number",
            "x-permissions": ["iam/project.quota.user/update"]
          },
          "effective": {
            "title": "Limit effective",
            "type": "number",
            "readOnly": true,
            "x-permissions": ["iam/project.quota.effective/update"]
          }
        }
      },
      "project_invitation_accept": {
        "type": "object",
        "required": ["token"],
        "properties": {
          "token": {
            "title": "Accept token",
            "type": "string"
          }
        }
      },
      "project_ownership_create": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "title": "Ownership email",
            "type": "string",
            "pattern": "/^[\\w\\+\\.-]+@([\\w-]+\\.)+[\\w-]+$/",
            "format": "email"
          }
        }
      },
      "project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Active", "Inactive", "Limited"]
          },
          "organisation": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/organisation"
            }
          },
          "uri": {
            "type": "string"
          },
          "bankAccount": {
            "type": "string"
          },
          "billing": {
            "type": "object",
            "properties": {
              "credits": {
                "type": "number"
              },
              "creditsBonus": {
                "type": "number"
              },
              "creditLimit": {
                "type": "number"
              }
            }
          },
          "active": {
            "type": "boolean",
            "default": true
          },
          "threshold": {
            "type": "object",
            "properties": {
              "credits": {
                "type": "object",
                "properties": {
                  "levels": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "networkAcl": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": ["subnet", "geo"]
                },
                "value": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                }
              }
            }
          },
          "compliance": {
            "type": "object",
            "properties": {
              "journal": {
                "type": "string",
                "format": "ObjectId"
              }
            }
          },
          "transfer": {
            "type": "object",
            "properties": {
              "organisation": {
                "type": "string",
                "format": "ObjectId"
              }
            }
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["iam/project.tag/list"]
          }
        }
      },
      "support.message": {
        "type": "object",
        "required": ["type"],
        "properties": {
          "id": {
            "title": "Message id",
            "type": "string",
            "readOnly": true
          },
          "type": {
            "title": "Message type",
            "type": "string",
            "enum": ["text", "attachment"]
          },
          "user": {
            "title": "Message user",
            "type": "string",
            "readOnly": true
          },
          "data": {
            "title": "Message data",
            "type": "object",
            "required": ["mime"],
            "properties": {
              "mime": {
                "title": "Data mime",
                "type": "string",
                "enum": ["text/plain", "image/png", "image/jpeg"]
              },
              "url": {
                "title": "Data url",
                "type": "string",
                "readOnly": true
              },
              "body": {
                "title": "Data body",
                "type": "string"
              }
            }
          },
          "origin": {
            "title": "Message origin",
            "type": "string",
            "readOnly": true
          },
          "date": {
            "title": "Message date",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          }
        }
      },
      "support_project_ticket_create": {
        "type": "object",
        "required": ["type", "subject", "message"],
        "properties": {
          "type": {
            "title": "Ticket type",
            "type": "string",
            "enum": ["sales", "billing", "service support"]
          },
          "subject": {
            "title": "Ticket subject",
            "type": "string"
          },
          "message": {
            "title": "Ticket message",
            "format": "text",
            "type": "string"
          }
        },
        "format": "create ticket"
      },
      "ticket": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": ["open", "closed"]
          },
          "subject": {
            "type": "string"
          },
          "project": {
            "type": "string"
          },
          "createdOn": {
            "type": "string"
          },
          "createdBy": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string"
          },
          "modifiedBy": {
            "type": "string"
          }
        }
      },
      "organisation_create": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Organisation name",
            "type": "string"
          },
          "billing": {
            "title": "Organisation billing",
            "type": "object",
            "required": ["company"],
            "properties": {
              "nip": {
                "title": "Billing nip",
                "type": "string"
              },
              "email": {
                "title": "Billing email",
                "type": "string"
              },
              "company": {
                "title": "Billing company",
                "type": "string"
              },
              "currency": {
                "title": "Billing currency",
                "type": "string",
                "enum": ["PLN"],
                "default": "PLN"
              },
              "address": {
                "title": "Billing address",
                "type": "object",
                "required": ["city", "zipcode", "street"],
                "properties": {
                  "country": {
                    "title": "Address country",
                    "type": "string",
                    "enum": [
                      "AD",
                      "BE",
                      "HR",
                      "CY",
                      "CZ",
                      "DK",
                      "EE",
                      "FI",
                      "FR",
                      "DE",
                      "GR",
                      "HU",
                      "IE",
                      "IT",
                      "LV",
                      "LT",
                      "LU",
                      "MT",
                      "NL",
                      "PL",
                      "PT",
                      "RO",
                      "SK",
                      "SI",
                      "ES",
                      "GB"
                    ],
                    "default": "PL"
                  },
                  "city": {
                    "title": "Address city",
                    "type": "string"
                  },
                  "zipcode": {
                    "title": "Address zipcode",
                    "type": "string"
                  },
                  "street": {
                    "title": "Address street",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "format": "create organisation"
      },
      "organisation_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Organisation name",
            "type": "string",
            "x-permissions": ["iam/organisation.name/update"]
          },
          "billing": {
            "title": "Organisation billing",
            "type": "object",
            "properties": {
              "email": {
                "title": "Billing email",
                "type": "string"
              },
              "company": {
                "title": "Billing company",
                "type": "string"
              },
              "address": {
                "title": "Billing address",
                "type": "object",
                "properties": {
                  "city": {
                    "title": "Address city",
                    "type": "string"
                  },
                  "zipcode": {
                    "title": "Address zipcode",
                    "type": "string"
                  },
                  "street": {
                    "title": "Address street",
                    "type": "string"
                  }
                }
              }
            },
            "x-permissions": ["iam/organisation.billing/update"]
          }
        },
        "format": "patch organisation"
      },
      "organisation_transfer_accept": {
        "type": "object",
        "required": ["payment", "project"],
        "properties": {
          "payment": {
            "title": "Organisation payment",
            "type": "string"
          },
          "project": {
            "title": "Organisation project",
            "type": "string"
          }
        },
        "format": "Action transfer_accept"
      },
      "organisation_payment_allocate": {
        "type": "object",
        "required": ["project"],
        "properties": {
          "project": {
            "title": "Allocate project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            },
            "x-permissions": ["iam/project/get"]
          }
        }
      },
      "organisation_proforma_create": {
        "type": "object",
        "required": ["amount", "project"],
        "properties": {
          "amount": {
            "title": "Proforma amount",
            "type": "number",
            "minimum": 1
          },
          "project": {
            "title": "Proforma project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            },
            "x-permissions": ["iam/project/get"]
          }
        }
      },
      "organisation_invitation_accept": {
        "type": "object",
        "required": ["token"],
        "properties": {
          "token": {
            "title": "Accept token",
            "type": "string"
          }
        }
      },
      "organisation_ownership_create": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "email": {
            "title": "Ownership email",
            "type": "string",
            "pattern": "/^[\\w\\+\\.-]+@([\\w-]+\\.)+[\\w-]+$/",
            "format": "email"
          }
        }
      },
      "organisation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Active", "Inactive", "Limited"]
          },
          "uri": {
            "type": "string"
          },
          "billing": {
            "type": "object",
            "properties": {
              "currency": {
                "type": "string"
              },
              "company": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "address": {
                "type": "object",
                "properties": {
                  "street": {
                    "type": "string"
                  },
                  "zipcode": {
                    "type": "string"
                  },
                  "city": {
                    "type": "string"
                  },
                  "country": {
                    "type": "string"
                  }
                },
                "required": ["street", "zipcode", "city", "country"]
              },
              "nip": {
                "type": "string"
              }
            }
          },
          "transfer": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              },
              "id": {
                "type": "string"
              }
            }
          },
          "bankAccount": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["iam/organisation.tag/list"]
          }
        }
      },
      "agent.credential": {
        "type": "object",
        "required": ["name", "type", "value"],
        "properties": {
          "id": {
            "title": "Credential id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Credential name",
            "type": "string"
          },
          "createdBy": {
            "title": "Credential createdBy",
            "type": "string",
            "readOnly": true
          },
          "createdOn": {
            "title": "Credential createdOn",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "title": "Credential type",
            "type": "string",
            "enum": ["ssh"]
          },
          "value": {
            "title": "Credential value",
            "type": "string",
            "writeOnly": true
          },
          "fingerprint": {
            "title": "Credential fingerprint",
            "type": "string",
            "readOnly": true
          },
          "token": {
            "title": "Credential token",
            "type": "string"
          }
        },
        "format": "credential"
      },
      "enabledService": {
        "type": "object",
        "required": ["id", "name"],
        "properties": {
          "id": {
            "title": "EnabledService id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "EnabledService name",
            "type": "string",
            "readOnly": true
          },
          "service": {
            "title": "EnabledService service",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service"
            }
          }
        }
      },
      "provider_project_agent_create": {
        "type": "object",
        "required": ["name", "service"],
        "properties": {
          "name": {
            "title": "Agent name",
            "type": "string"
          },
          "service": {
            "title": "Agent service",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "provider/agent",
                "type": "flavour"
              }
            }
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create agent"
      },
      "provider_project_agent_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Agent name",
            "type": "string",
            "x-permissions": ["provider/agent.name/update"]
          }
        },
        "format": "patch agent"
      },
      "provider_project_agent_transfer": {
        "type": "object",
        "required": ["project"],
        "properties": {
          "project": {
            "title": "Agent project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            },
            "x-permissions": ["provider/agent/create"]
          }
        },
        "format": "Action transfer"
      },
      "provider_project_agent_credential_patch": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Credential name",
            "type": "string",
            "x-permissions": ["provider/agent.credential.name/update"]
          }
        }
      },
      "agent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Online", "Unknown", "Processing", "NotCreated"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "provider/agent"
            }
          },
          "type": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["provider/agent.tag/list"]
          }
        }
      },
      "database.credential": {
        "type": "object",
        "required": ["name", "type", "value"],
        "properties": {
          "id": {
            "title": "Credential id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Credential name",
            "type": "string"
          },
          "createdBy": {
            "title": "Credential createdBy",
            "type": "string",
            "readOnly": true
          },
          "createdOn": {
            "title": "Credential createdOn",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "title": "Credential type",
            "type": "string",
            "enum": ["mysql", "plain", "postgres"]
          },
          "value": {
            "title": "Credential value",
            "type": "string",
            "writeOnly": true
          },
          "fingerprint": {
            "title": "Credential fingerprint",
            "type": "string",
            "readOnly": true
          },
          "token": {
            "title": "Credential token",
            "type": "string"
          }
        },
        "format": "credential"
      },
      "database_project_instance_create": {
        "type": "object",
        "required": ["name", "service"],
        "properties": {
          "name": {
            "title": "Instance name",
            "type": "string"
          },
          "service": {
            "title": "Instance service",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "database/instance",
                "type": "flavour"
              }
            }
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create instance"
      },
      "database_project_instance_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Instance name",
            "type": "string",
            "x-permissions": ["database/instance.name/update"]
          }
        },
        "format": "patch instance"
      },
      "database_project_instance_transfer": {
        "type": "object",
        "required": ["project"],
        "properties": {
          "project": {
            "title": "Instance project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            },
            "x-permissions": ["database/instance/create"]
          }
        },
        "format": "Action transfer"
      },
      "database_project_instance_credential_patch": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Credential name",
            "type": "string",
            "x-permissions": ["database/instance.credential.name/update"]
          }
        }
      },
      "database": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Running", "Off", "Unknown", "Processing", "NotCreated"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "database/instance"
            }
          },
          "fqdn": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["database/instance.tag/list"]
          }
        }
      },
      "journal.credential": {
        "type": "object",
        "required": ["name", "type", "value"],
        "properties": {
          "id": {
            "title": "Credential id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Credential name",
            "type": "string"
          },
          "createdBy": {
            "title": "Credential createdBy",
            "type": "string",
            "readOnly": true
          },
          "createdOn": {
            "title": "Credential createdOn",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "title": "Credential type",
            "type": "string",
            "enum": ["sha512", "plain"]
          },
          "value": {
            "title": "Credential value",
            "type": "string",
            "writeOnly": true
          },
          "fingerprint": {
            "title": "Credential fingerprint",
            "type": "string",
            "readOnly": true
          },
          "token": {
            "title": "Credential token",
            "type": "string"
          }
        },
        "format": "credential"
      },
      "insight_project_journal_create": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Journal name",
            "type": "string"
          },
          "service": {
            "title": "Journal service",
            "type": "string",
            "default": "5c9cc2d0255c16c3e899a4ea",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "insight/journal",
                "type": "flavour"
              }
            }
          },
          "retention": {
            "title": "Journal retention",
            "type": "number"
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create journal"
      },
      "insight_project_journal_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Journal name",
            "type": "string",
            "x-permissions": ["insight/journal.name/update"]
          },
          "retention": {
            "title": "Journal retention",
            "type": "number",
            "x-permissions": ["insight/journal.retention/update"]
          }
        },
        "format": "patch journal"
      },
      "insight_project_journal_transfer": {
        "type": "object",
        "required": ["project"],
        "properties": {
          "project": {
            "title": "Journal project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            },
            "x-permissions": ["insight/journal/create"]
          }
        },
        "format": "Action transfer"
      },
      "insight_project_journal_credential_patch": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Credential name",
            "type": "string",
            "x-permissions": ["insight/journal.credential.name/update"]
          }
        }
      },
      "journal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Online", "Unknown", "Processing", "NotCreated"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "insight/journal"
            }
          },
          "sizeUsed": {
            "type": "number"
          },
          "retention": {
            "type": "number"
          },
          "fqdn": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["insight/journal.tag/list"]
          }
        }
      },
      "registry.credential": {
        "type": "object",
        "required": ["name", "type", "value"],
        "properties": {
          "id": {
            "title": "Credential id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Credential name",
            "type": "string"
          },
          "createdBy": {
            "title": "Credential createdBy",
            "type": "string",
            "readOnly": true
          },
          "createdOn": {
            "title": "Credential createdOn",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "title": "Credential type",
            "type": "string",
            "enum": ["sha512", "plain"]
          },
          "value": {
            "title": "Credential value",
            "type": "string",
            "writeOnly": true
          },
          "fingerprint": {
            "title": "Credential fingerprint",
            "type": "string",
            "readOnly": true
          },
          "token": {
            "title": "Credential token",
            "type": "string"
          }
        },
        "format": "credential"
      },
      "domain": {
        "type": "object",
        "required": ["value"],
        "properties": {
          "id": {
            "title": "Domain id",
            "type": "string",
            "readOnly": true
          },
          "value": {
            "title": "Domain value",
            "type": "string"
          }
        }
      },
      "container_project_registry_create": {
        "type": "object",
        "required": ["name", "service"],
        "properties": {
          "name": {
            "title": "Registry name",
            "type": "string"
          },
          "service": {
            "title": "Registry service",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "container/registry",
                "type": "flavour"
              }
            }
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create registry"
      },
      "container_project_registry_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Registry name",
            "type": "string",
            "x-permissions": ["container/registry.name/update"]
          }
        },
        "format": "patch registry"
      },
      "container_project_registry_transfer": {
        "type": "object",
        "required": ["project"],
        "properties": {
          "project": {
            "title": "Registry project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            },
            "x-permissions": ["container/registry/create"]
          }
        },
        "format": "Action transfer"
      },
      "container_project_registry_credential_patch": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Credential name",
            "type": "string",
            "x-permissions": ["container/registry.credential.name/update"]
          }
        }
      },
      "registry": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Running", "Off", "Unknown", "Processing", "NotCreated"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "container/registry"
            }
          },
          "sizeUsed": {
            "type": "number"
          },
          "fqdn": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["container/registry.tag/list"]
          }
        }
      },
      "website.snapshot": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "id": {
            "title": "Snapshot id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Snapshot name",
            "type": "string",
            "pattern": "/^[\\w-]+$/"
          },
          "creation": {
            "title": "Snapshot creation",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "used": {
            "title": "Snapshot used",
            "type": "number",
            "readOnly": true
          }
        }
      },
      "website.env": {
        "type": "object",
        "required": ["name", "value"],
        "properties": {
          "id": {
            "title": "Env id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Env name",
            "type": "string"
          },
          "value": {
            "title": "Env value",
            "type": "string"
          }
        }
      },
      "website.link": {
        "type": "object",
        "required": ["actor", "purpose", "resource"],
        "properties": {
          "id": {
            "title": "Link id",
            "type": "string",
            "readOnly": true
          },
          "actor": {
            "title": "Link actor",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/sa"
            },
            "x-permissions": ["iam/sa/use"]
          },
          "purpose": {
            "title": "Link purpose",
            "type": "string",
            "enum": ["logs"]
          },
          "resource": {
            "title": "Link resource",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "insight/journal"
            },
            "x-permissions": ["insight/journal/use"]
          }
        }
      },
      "website.sideapp": {
        "type": "object",
        "required": ["flavour"],
        "properties": {
          "id": {
            "title": "Sideapp id",
            "type": "string",
            "readOnly": true
          },
          "flavour": {
            "title": "Sideapp flavour",
            "type": "string"
          },
          "url": {
            "title": "Sideapp url",
            "type": "string",
            "description": "Only available on the creation response",
            "readOnly": true
          }
        }
      },
      "website.credential": {
        "type": "object",
        "required": ["name", "type", "value"],
        "properties": {
          "id": {
            "title": "Credential id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Credential name",
            "type": "string"
          },
          "createdBy": {
            "title": "Credential createdBy",
            "type": "string",
            "readOnly": true
          },
          "createdOn": {
            "title": "Credential createdOn",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "title": "Credential type",
            "type": "string",
            "enum": ["ssh", "sha512", "plain"]
          },
          "value": {
            "title": "Credential value",
            "type": "string",
            "writeOnly": true
          },
          "fingerprint": {
            "title": "Credential fingerprint",
            "type": "string",
            "readOnly": true
          },
          "token": {
            "title": "Credential token",
            "type": "string"
          }
        },
        "format": "credential"
      },
      "website_project_instance_create": {
        "type": "object",
        "required": ["name", "service", "image"],
        "properties": {
          "name": {
            "title": "Instance name",
            "type": "string"
          },
          "service": {
            "title": "Instance service",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "website/instance",
                "type": "flavour"
              }
            }
          },
          "image": {
            "title": "Instance image",
            "format": "uri",
            "x-resource": {
              "kind": "website/image"
            },
            "type": "string"
          },
          "source": {
            "title": "Instance source",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "website/instance.snapshot"
            },
            "x-permissions": ["website/instance.snapshot/use"]
          },
          "env": {
            "title": "Env collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/website.env"
            }
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create instance"
      },
      "website_project_instance_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Instance name",
            "type": "string",
            "x-permissions": ["website/instance.name/update"]
          },
          "image": {
            "title": "Instance image",
            "format": "uri",
            "x-resource": {
              "kind": "website/image"
            },
            "type": "string",
            "x-permissions": ["website/instance.image/update"]
          }
        },
        "format": "patch instance"
      },
      "website_project_instance_transfer": {
        "type": "object",
        "required": ["project"],
        "properties": {
          "project": {
            "title": "Instance project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            },
            "x-permissions": ["website/instance/create"]
          }
        },
        "format": "Action transfer"
      },
      "website_project_instance_snapshot_download": {
        "type": "object",
        "properties": {
          "incremental": {
            "title": "Download incremental",
            "type": "string",
            "pattern": "/^[\\w-]+$/"
          }
        }
      },
      "website_project_instance_credential_patch": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Credential name",
            "type": "string",
            "x-permissions": ["website/instance.credential.name/update"]
          }
        }
      },
      "website": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "Running",
              "Restarting",
              "Off",
              "Unknown",
              "Processing",
              "NotCreated"
            ]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "website/instance"
            }
          },
          "image": {
            "type": "string"
          },
          "fqdn": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["website/instance.tag/list"]
          }
        }
      },
      "dns.record": {
        "type": "object",
        "required": ["content"],
        "properties": {
          "id": {
            "title": "Record id",
            "type": "string",
            "readOnly": true
          },
          "content": {
            "title": "Record content",
            "type": "string",
            "description": "Template string:\n- {{REQUEST_IP}} is replaced by the requester ip address."
          },
          "enabled": {
            "title": "Record enabled",
            "type": "boolean",
            "default": true
          }
        }
      },
      "dns.record_array": {
        "type": "array",
        "title": "Record collection",
        "items": {
          "$ref": "#/components/schemas/dns.record"
        }
      },
      "dns.recordset": {
        "type": "object",
        "required": ["name", "type"],
        "properties": {
          "id": {
            "title": "Recordset id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Recordset name",
            "type": "string"
          },
          "type": {
            "title": "Recordset type",
            "type": "string",
            "enum": [
              "A",
              "AAAA",
              "CAA",
              "CNAME",
              "MX",
              "NS",
              "PTR",
              "SOA",
              "SRV",
              "TXT"
            ]
          },
          "ttl": {
            "title": "Recordset ttl",
            "type": "number",
            "default": 3600
          },
          "record": {
            "$ref": "#/components/schemas/dns.record_array"
          }
        }
      },
      "dns_project_zone_create": {
        "type": "object",
        "required": ["name", "service", "dnsName"],
        "properties": {
          "name": {
            "title": "Zone name",
            "type": "string"
          },
          "service": {
            "title": "Zone service",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "dns/zone",
                "type": "flavour"
              }
            }
          },
          "dnsName": {
            "title": "Zone dnsName",
            "type": "string"
          },
          "source": {
            "title": "Zone source",
            "type": "object",
            "properties": {
              "dnsProbing": {
                "title": "Source dnsProbing",
                "type": "boolean",
                "default": false
              }
            }
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create zone"
      },
      "dns_project_zone_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Zone name",
            "type": "string",
            "x-permissions": ["dns/zone.name/update"]
          }
        },
        "format": "patch zone"
      },
      "dns_project_zone_recordset_patch": {
        "type": "object",
        "properties": {
          "ttl": {
            "title": "Recordset ttl",
            "type": "number",
            "default": 3600,
            "x-permissions": ["dns/zone.recordset.ttl/update"]
          }
        }
      },
      "zone": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Online", "Offline", "Unknown", "Processing", "NotCreated"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "dns/zone"
            }
          },
          "rrsets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "records": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                },
                "type": {
                  "type": "string"
                },
                "ttl": {
                  "type": "number"
                }
              }
            }
          },
          "dnsName": {
            "type": "string"
          },
          "nameserver": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fqdn": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["dns/zone.tag/list"]
          }
        }
      },
      "storage_project_disk_create": {
        "type": "object",
        "required": ["name", "service", "size"],
        "properties": {
          "name": {
            "title": "Disk name",
            "type": "string"
          },
          "service": {
            "title": "Disk service",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "storage/disk",
                "type": "flavour"
              }
            }
          },
          "size": {
            "title": "Disk size",
            "type": "number",
            "minimum": 1
          },
          "source": {
            "title": "Disk source",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "storage/disk"
            },
            "x-permissions": ["storage/disk/use"]
          },
          "vm": {
            "title": "Disk vm",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "compute/vm"
            },
            "x-permissions": ["compute/vm/use"]
          },
          "metadata": {
            "title": "Disk metadata",
            "type": "object",
            "properties": {
              "source": {
                "title": "Metadata source",
                "type": "object",
                "properties": {
                  "filename": {
                    "title": "Source filename",
                    "type": "string"
                  },
                  "size": {
                    "title": "Source size",
                    "type": "number"
                  }
                }
              }
            },
            "x-audience": "developer"
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create disk"
      },
      "storage_project_disk_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Disk name",
            "type": "string",
            "x-permissions": ["storage/disk.name/update"]
          }
        },
        "format": "patch disk"
      },
      "storage_project_disk_resize": {
        "type": "object",
        "required": ["size"],
        "properties": {
          "size": {
            "title": "Disk size",
            "type": "number"
          }
        },
        "format": "Action resize"
      },
      "storage_project_disk_attach": {
        "type": "object",
        "required": ["vm"],
        "properties": {
          "vm": {
            "title": "Disk vm",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "compute/vm"
            },
            "x-permissions": ["compute/vm/use"]
          }
        },
        "format": "Action attach"
      },
      "storage_project_disk_transfer": {
        "type": "object",
        "required": ["project"],
        "properties": {
          "project": {
            "title": "Disk project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            },
            "x-permissions": ["storage/disk/create"]
          }
        },
        "format": "Action transfer"
      },
      "disk": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "Uploading",
              "Online",
              "Attached",
              "Detached",
              "Unknown",
              "Processing",
              "NotCreated"
            ]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "storage/disk"
            }
          },
          "size": {
            "type": "number"
          },
          "vm": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "compute/vm"
            }
          },
          "persistent": {
            "type": "boolean"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "source": {
                "type": "string"
              }
            }
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["storage/disk.tag/list"]
          }
        }
      },
      "networking.rule": {
        "type": "object",
        "required": ["name", "action", "priority", "filter", "external"],
        "properties": {
          "id": {
            "title": "Rule id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Rule name",
            "type": "string"
          },
          "action": {
            "title": "Rule action",
            "type": "string",
            "enum": ["allow", "deny"]
          },
          "priority": {
            "title": "Rule priority",
            "type": "number"
          },
          "filter": {
            "title": "Filter collection",
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          },
          "external": {
            "title": "External collection",
            "type": "array",
            "items": {
              "type": "string"
            },
            "minItems": 1
          },
          "internal": {
            "title": "Internal collection",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "networking.rule_array": {
        "type": "array",
        "title": "Rule collection",
        "items": {
          "$ref": "#/components/schemas/networking.rule"
        }
      },
      "networking_project_firewall_create": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Firewall name",
            "type": "string"
          },
          "service": {
            "title": "Firewall service",
            "type": "string",
            "default": "5bacaf7202deee0c100eda3b",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "networking/firewall",
                "type": "flavour"
              }
            }
          },
          "ingress": {
            "$ref": "#/components/schemas/networking.rule_array"
          },
          "egress": {
            "$ref": "#/components/schemas/networking.rule_array"
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create firewall"
      },
      "networking_project_firewall_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Firewall name",
            "type": "string",
            "x-permissions": ["networking/firewall.name/update"]
          }
        },
        "format": "patch firewall"
      },
      "networking_project_firewall_transfer": {
        "type": "object",
        "required": ["project"],
        "properties": {
          "project": {
            "title": "Firewall project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            },
            "x-permissions": ["networking/firewall/create"]
          }
        },
        "format": "Action transfer"
      },
      "firewall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "Attached",
              "Detached",
              "Unknown",
              "Processing",
              "NotCreated"
            ]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/firewall"
            }
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["networking/firewall.tag/list"]
          }
        }
      },
      "storage_project_image_create": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Image name",
            "type": "string"
          },
          "service": {
            "title": "Image service",
            "type": "string",
            "default": "564639bc052c084e2f2e3266",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "storage/image",
                "type": "flavour"
              }
            }
          },
          "vm": {
            "title": "Image vm",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "compute/vm"
            },
            "x-permissions": ["compute/vm/use"]
          },
          "replica": {
            "title": "Image replica",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "compute/replica"
            },
            "x-permissions": ["compute/replica/use"]
          },
          "description": {
            "title": "Image description",
            "type": "string"
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create image"
      },
      "storage_project_image_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Image name",
            "type": "string",
            "x-permissions": ["storage/image.name/update"]
          },
          "description": {
            "title": "Image description",
            "type": "string",
            "x-permissions": ["storage/image.description/update"]
          }
        },
        "format": "patch image"
      },
      "storage_project_image_transfer": {
        "type": "object",
        "required": ["project"],
        "properties": {
          "project": {
            "title": "Image project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            },
            "x-permissions": ["storage/image/create"]
          }
        },
        "format": "Action transfer"
      },
      "image": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Online", "Unknown", "Processing", "NotCreated"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "storage/image"
            }
          },
          "description": {
            "type": "string"
          },
          "fileSize": {
            "type": "number"
          },
          "license": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["storage/image.tag/list"]
          }
        }
      },
      "networking_project_ip_create": {
        "type": "object",
        "properties": {
          "network": {
            "title": "Ip network",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/network"
            },
            "x-permissions": ["networking/network/use"]
          },
          "ptrRecord": {
            "title": "Ip ptrRecord",
            "type": "string"
          },
          "address": {
            "title": "Ip address",
            "type": "string",
            "pattern": "/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/"
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create ip"
      },
      "networking_project_ip_update": {
        "type": "object",
        "properties": {
          "ptrRecord": {
            "title": "Ip ptrRecord",
            "type": "string",
            "x-permissions": ["networking/ip.ptrRecord/update"]
          }
        },
        "format": "patch ip"
      },
      "networking_project_ip_associate": {
        "type": "object",
        "required": ["ip"],
        "properties": {
          "ip": {
            "title": "Ip ip",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/ip"
            },
            "x-permissions": ["networking/ip/use"]
          }
        },
        "format": "Action associate"
      },
      "networking_project_ip_transfer": {
        "type": "object",
        "required": ["project"],
        "properties": {
          "project": {
            "title": "Ip project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            },
            "x-permissions": ["networking/ip/create"]
          }
        },
        "format": "Action transfer"
      },
      "ip": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Associated", "Allocated", "Unallocated"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/ip"
            }
          },
          "address": {
            "type": "string"
          },
          "fqdn": {
            "type": "string"
          },
          "network": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/network"
            }
          },
          "ptrRecord": {
            "type": "string"
          },
          "persistent": {
            "type": "boolean"
          },
          "associated": {
            "type": "object",
            "properties": {
              "ip": {
                "type": "string",
                "format": "uri",
                "x-resource": {
                  "kind": "networking/ip"
                }
              },
              "fip": {
                "type": "string",
                "format": "uri",
                "x-resource": {
                  "kind": "networking/ip"
                }
              },
              "netadp": {
                "type": "string",
                "format": "uri",
                "x-resource": {
                  "kind": "networking/netadp"
                }
              }
            }
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["networking/ip.tag/list"]
          }
        }
      },
      "storage_project_iso_create": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Iso name",
            "type": "string"
          },
          "size": {
            "title": "Iso size",
            "type": "number",
            "x-audience": "developer"
          },
          "source": {
            "title": "Iso source",
            "type": "string"
          },
          "metadata": {
            "title": "Iso metadata",
            "type": "object",
            "properties": {
              "source": {
                "title": "Metadata source",
                "type": "object",
                "properties": {
                  "filename": {
                    "title": "Source filename",
                    "type": "string"
                  },
                  "size": {
                    "title": "Source size",
                    "type": "number"
                  }
                }
              }
            },
            "x-audience": "developer"
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create iso"
      },
      "storage_project_iso_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Iso name",
            "type": "string",
            "x-permissions": ["storage/iso.name/update"]
          }
        },
        "format": "patch iso"
      },
      "storage_project_iso_detach": {
        "type": "object",
        "required": ["vm"],
        "properties": {
          "vm": {
            "title": "Iso vm",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "compute/vm"
            },
            "x-permissions": ["compute/vm/use"]
          }
        },
        "format": "Action detach"
      },
      "storage_project_iso_transfer": {
        "type": "object",
        "required": ["project"],
        "properties": {
          "project": {
            "title": "Iso project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            },
            "x-permissions": ["storage/iso/create"]
          }
        },
        "format": "Action transfer"
      },
      "iso": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "Uploading",
              "Online",
              "Unknown",
              "Processing",
              "NotCreated"
            ]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "storage/iso"
            }
          },
          "size": {
            "type": "number"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "source": {
                "type": "object",
                "properties": {
                  "filename": {
                    "type": "string"
                  },
                  "size": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["storage/iso.tag/list"]
          }
        }
      },
      "networking_project_netadp_create": {
        "type": "object",
        "required": ["vm", "network"],
        "properties": {
          "vm": {
            "title": "Netadp vm",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "compute/vm"
            },
            "x-permissions": ["compute/vm/use"]
          },
          "network": {
            "title": "Netadp network",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/network"
            },
            "x-permissions": ["networking/network/use"]
          },
          "firewall": {
            "title": "Netadp firewall",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/firewall"
            },
            "x-permissions": ["networking/firewall/use"]
          },
          "ip": {
            "title": "Ip collection",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri",
              "x-resource": {
                "kind": "networking/ip"
              },
              "x-permissions": ["networking/ip/use"]
            }
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create netadp"
      },
      "networking_project_netadp_update": {
        "type": "object",
        "properties": {
          "firewall": {
            "title": "Netadp firewall",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/firewall"
            },
            "x-permissions": [
              "networking/firewall/use",
              "networking/netadp.firewall/update"
            ]
          }
        },
        "format": "patch netadp"
      },
      "netadp": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "Online",
              "Deallocated",
              "Unknown",
              "Processing",
              "NotCreated"
            ]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string"
          },
          "macaddress": {
            "type": "string"
          },
          "speed": {
            "type": "number"
          },
          "fqdn": {
            "type": "string"
          },
          "network": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/network"
            }
          },
          "firewall": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/firewall"
            }
          },
          "assigned": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["networking/netadp.tag/list"]
          }
        }
      },
      "networking_project_netgw_create": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Netgw name",
            "type": "string"
          },
          "public": {
            "title": "Netgw public",
            "type": "object",
            "required": ["ip"],
            "properties": {
              "ip": {
                "title": "Public ip",
                "type": "string",
                "format": "uri",
                "x-resource": {
                  "kind": "networking/ip"
                },
                "x-permissions": ["networking/ip/use"]
              }
            }
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create netgw"
      },
      "networking_project_netgw_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Netgw name",
            "type": "string",
            "x-permissions": ["networking/netgw.name/update"]
          }
        },
        "format": "patch netgw"
      },
      "networking_project_netgw_attach": {
        "type": "object",
        "properties": {
          "private": {
            "title": "Netgw private",
            "type": "object",
            "required": ["network"],
            "properties": {
              "network": {
                "title": "Private network",
                "type": "string",
                "format": "uri",
                "x-resource": {
                  "kind": "networking/network"
                },
                "x-permissions": ["networking/network/use"]
              }
            }
          }
        },
        "format": "Action attach"
      },
      "netgw": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "Attached",
              "Detached",
              "Unknown",
              "Processing",
              "NotCreated"
            ]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/netgw"
            }
          },
          "primaryIP": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/ip"
            }
          },
          "network": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/network"
            }
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["networking/netgw.tag/list"]
          }
        }
      },
      "networking_project_network_create": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Network name",
            "type": "string"
          },
          "address": {
            "title": "Network address",
            "type": "string"
          },
          "gateway": {
            "title": "Network gateway",
            "type": "string"
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create network"
      },
      "networking_project_network_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Network name",
            "type": "string",
            "x-permissions": ["networking/network.name/update"]
          },
          "gateway": {
            "title": "Network gateway",
            "type": "string",
            "x-permissions": ["networking/network.gateway/update"]
          },
          "firewall": {
            "title": "Network firewall",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/firewall"
            },
            "x-permissions": [
              "networking/firewall/use",
              "networking/network.firewall/update"
            ]
          }
        },
        "format": "patch network"
      },
      "network": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Online", "Unknown", "Processing", "NotCreated"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/network"
            }
          },
          "address": {
            "type": "string"
          },
          "gateway": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": ["public", "private"]
          },
          "dns": {
            "type": "object",
            "properties": {
              "nameservers": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "netgw": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/netgw"
            }
          },
          "firewall": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "networking/firewall"
            }
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["networking/network.tag/list"]
          }
        }
      },
      "iam.actor": {
        "type": "object",
        "required": ["value"],
        "properties": {
          "id": {
            "title": "Actor id",
            "type": "string",
            "readOnly": true
          },
          "value": {
            "title": "Actor value",
            "type": "string",
            "description": "Email, User URI or ServiceAccount URI"
          }
        }
      },
      "iam_project_policy_create": {
        "type": "object",
        "required": ["name", "role", "resource"],
        "properties": {
          "name": {
            "title": "Policy name",
            "type": "string"
          },
          "role": {
            "title": "Policy role",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/role"
            },
            "x-permissions": ["iam/role/use"]
          },
          "resource": {
            "title": "Policy resource",
            "type": "string",
            "pattern": "/^\\/(?<namespace>[a-z]+)(\\/(?<location>[a-z0-9-]+))?\\/(?<parent>(project|organisation))\\/(?<parentId>[a-f0-9]{24})(\\/(?<type>[a-z]+))?(\\/(?<resource>[a-f0-9]{24}))?(?<subresource>(\\/[a-z0-9]+)+)?$/"
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create policy"
      },
      "iam_project_policy_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Policy name",
            "type": "string",
            "x-permissions": ["iam/policy.name/update"]
          }
        },
        "format": "patch policy"
      },
      "policy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Online"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "organisation": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/organisation"
            }
          },
          "uri": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/role"
            }
          },
          "resource": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["iam/policy.tag/list"]
          }
        }
      },
      "compute_project_replica_create": {
        "type": "object",
        "required": ["hostname", "secret"],
        "properties": {
          "hostname": {
            "title": "Replica hostname",
            "type": "string"
          },
          "secret": {
            "title": "Replica secret",
            "type": "string"
          }
        },
        "format": "create replica"
      },
      "replica": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "Error",
              "FailOverWaitingCompletion",
              "FailedOver",
              "NotApplicable",
              "ReadyForInitialReplication",
              "Replicating",
              "Resynchronizing",
              "ResynchronizeSuspended",
              "Suspended",
              "SyncedReplicationComplete",
              "WaitingForInitialReplication",
              "WaitingForStartResynchronize",
              "Unknown",
              "Processing",
              "NotCreated"
            ]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "compute/replica"
            }
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["compute/replica.tag/list"]
          }
        }
      },
      "iam.permission": {
        "type": "object",
        "required": ["value"],
        "properties": {
          "id": {
            "title": "Permission id",
            "type": "string",
            "readOnly": true
          },
          "value": {
            "title": "Permission value",
            "type": "string"
          }
        }
      },
      "iam.permission_array": {
        "type": "array",
        "title": "Permission collection",
        "items": {
          "$ref": "#/components/schemas/iam.permission"
        }
      },
      "iam_project_role_create": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Role name",
            "type": "string"
          },
          "service": {
            "title": "Role service",
            "type": "string",
            "default": "5e679c282b39c4353cd86f34",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "iam/role",
                "type": "flavour"
              }
            }
          },
          "description": {
            "title": "Role description",
            "type": "string"
          },
          "permission": {
            "$ref": "#/components/schemas/iam.permission_array"
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create role"
      },
      "iam_project_role_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Role name",
            "type": "string",
            "x-permissions": ["iam/role.name/update"]
          },
          "description": {
            "title": "Role description",
            "type": "string",
            "x-permissions": ["iam/role.description/update"]
          }
        },
        "format": "patch role"
      },
      "role": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Online"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "organisation": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/organisation"
            }
          },
          "uri": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["iam/role.tag/list"]
          }
        }
      },
      "sa.credential": {
        "type": "object",
        "required": ["name", "type", "value"],
        "properties": {
          "id": {
            "title": "Credential id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Credential name",
            "type": "string"
          },
          "createdBy": {
            "title": "Credential createdBy",
            "type": "string",
            "readOnly": true
          },
          "createdOn": {
            "title": "Credential createdOn",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "title": "Credential type",
            "type": "string",
            "enum": ["ssh"]
          },
          "value": {
            "title": "Credential value",
            "type": "string",
            "writeOnly": true
          },
          "fingerprint": {
            "title": "Credential fingerprint",
            "type": "string",
            "readOnly": true
          },
          "token": {
            "title": "Credential token",
            "type": "string"
          }
        },
        "format": "credential"
      },
      "iam_project_sa_create": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Sa name",
            "type": "string"
          },
          "service": {
            "title": "Sa service",
            "type": "string",
            "default": "5e5fc76ff1fb3efe1842336a",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "iam/sa",
                "type": "flavour"
              }
            }
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create sa"
      },
      "iam_project_sa_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Sa name",
            "type": "string",
            "x-permissions": ["iam/sa.name/update"]
          }
        },
        "format": "patch sa"
      },
      "iam_project_sa_credential_patch": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Credential name",
            "type": "string",
            "x-permissions": ["iam/sa.credential.name/update"]
          }
        }
      },
      "sa": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Online"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["iam/sa.tag/list"]
          }
        }
      },
      "vault.credential": {
        "type": "object",
        "required": ["name", "type", "value"],
        "properties": {
          "id": {
            "title": "Credential id",
            "type": "string",
            "readOnly": true
          },
          "name": {
            "title": "Credential name",
            "type": "string"
          },
          "createdBy": {
            "title": "Credential createdBy",
            "type": "string",
            "readOnly": true
          },
          "createdOn": {
            "title": "Credential createdOn",
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "type": {
            "title": "Credential type",
            "type": "string",
            "enum": ["ssh", "sha512", "plain"]
          },
          "value": {
            "title": "Credential value",
            "type": "string",
            "writeOnly": true
          },
          "fingerprint": {
            "title": "Credential fingerprint",
            "type": "string",
            "readOnly": true
          },
          "token": {
            "title": "Credential token",
            "type": "string"
          }
        },
        "format": "credential"
      },
      "storage.snapshot": {
        "type": "object",
        "properties": {
          "id": {
            "title": "Snapshot id",
            "type": "string"
          },
          "name": {
            "title": "Snapshot name",
            "type": "string"
          },
          "flavour": {
            "title": "Snapshot flavour",
            "type": "string"
          },
          "modifiedOn": {
            "title": "Snapshot modifiedOn",
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "title": "Snapshot modifiedBy",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "title": "Snapshot createdOn",
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "title": "Snapshot createdBy",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "title": "Snapshot state",
            "type": "string"
          },
          "project": {
            "title": "Snapshot project",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "organisation": {
            "title": "Snapshot organisation",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/organisation"
            }
          },
          "uri": {
            "title": "Snapshot uri",
            "type": "string"
          },
          "sizeUsed": {
            "title": "Snapshot sizeUsed",
            "type": "number"
          }
        }
      },
      "storage_project_vault_create": {
        "type": "object",
        "required": ["name", "size"],
        "properties": {
          "name": {
            "title": "Vault name",
            "type": "string"
          },
          "service": {
            "title": "Vault service",
            "type": "string",
            "default": "5a0332c4eb8f4ed95c206a12",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "storage/vault",
                "type": "flavour"
              }
            }
          },
          "size": {
            "title": "Vault size",
            "type": "number",
            "minimum": 1
          },
          "source": {
            "title": "Vault source",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "storage/vault.snapshot"
            },
            "x-permissions": ["storage/vault.snapshot/use"]
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create vault"
      },
      "storage_project_vault_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Vault name",
            "type": "string",
            "x-permissions": ["storage/vault.name/update"]
          }
        },
        "format": "patch vault"
      },
      "storage_project_vault_delete": {
        "type": "object",
        "properties": {
          "removeAllSnapshots": {
            "title": "Vault removeAllSnapshots",
            "type": "boolean",
            "default": false
          }
        },
        "format": "Delete vault"
      },
      "storage_project_vault_resize": {
        "type": "object",
        "required": ["size"],
        "properties": {
          "size": {
            "title": "Vault size",
            "type": "number"
          }
        },
        "format": "Action resize"
      },
      "storage_project_vault_snapshot_create": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Snapshot name",
            "type": "string"
          }
        }
      },
      "storage_project_vault_credential_patch": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "title": "Credential name",
            "type": "string",
            "x-permissions": ["storage/vault.credential.name/update"]
          }
        }
      },
      "vault": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Online", "Off", "Unknown", "Processing", "NotCreated"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "storage/vault"
            }
          },
          "sizeUsed": {
            "type": "number"
          },
          "size": {
            "type": "number"
          },
          "fqdn": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["storage/vault.tag/list"]
          }
        }
      },
      "compute_project_vm_create": {
        "type": "object",
        "required": ["name", "service"],
        "properties": {
          "name": {
            "title": "Vm name",
            "type": "string"
          },
          "service": {
            "title": "Vm service",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "compute/vm",
                "type": "flavour"
              }
            }
          },
          "image": {
            "title": "Vm image",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "storage/image"
            },
            "x-permissions": ["storage/image/use"]
          },
          "iso": {
            "title": "Vm iso",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "storage/iso"
            },
            "x-permissions": ["storage/iso/use"]
          },
          "username": {
            "title": "Vm username",
            "type": "string"
          },
          "userMetadata": {
            "title": "Vm userMetadata",
            "format": "base64",
            "type": "string"
          },
          "start": {
            "title": "Vm start",
            "type": "boolean",
            "default": true
          },
          "credential": {
            "title": "Credential collection",
            "type": "array",
            "items": {
              "type": "object",
              "required": ["type", "value"],
              "properties": {
                "type": {
                  "title": "Credential type",
                  "type": "string",
                  "enum": ["ssh", "plain", "unix"]
                },
                "value": {
                  "title": "Credential value",
                  "type": "string",
                  "description": "- user credential (by id or name)\n- project credential (by id or name)\n- raw openssh public key (starting with `ssh-rsa/ssh-ed25519`)\n- defaults to user keys"
                }
              },
              "format": "credential"
            },
            "minItems": 1
          },
          "disk": {
            "title": "Disk collection",
            "type": "array",
            "items": {
              "type": "object",
              "required": ["name", "service", "size"],
              "properties": {
                "name": {
                  "title": "Disk name",
                  "type": "string"
                },
                "service": {
                  "title": "Disk service",
                  "type": "string",
                  "format": "uri",
                  "x-resource": {
                    "kind": "billing/service",
                    "filter": {
                      "kind": "storage/disk",
                      "type": "flavour"
                    }
                  }
                },
                "size": {
                  "title": "Disk size",
                  "type": "number"
                }
              }
            }
          },
          "netadp": {
            "title": "Netadp collection",
            "type": "array",
            "items": {
              "type": "object",
              "required": ["network"],
              "properties": {
                "network": {
                  "title": "Netadp network",
                  "type": "string",
                  "format": "uri",
                  "x-resource": {
                    "kind": "networking/network"
                  },
                  "x-permissions": ["networking/network/use"]
                },
                "firewall": {
                  "title": "Netadp firewall",
                  "type": "string",
                  "format": "uri",
                  "x-resource": {
                    "kind": "networking/firewall"
                  },
                  "x-permissions": ["networking/firewall/use"]
                },
                "ip": {
                  "title": "Ip collection",
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uri",
                    "x-resource": {
                      "kind": "networking/ip"
                    },
                    "x-permissions": ["networking/ip/use"]
                  }
                }
              }
            }
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create vm"
      },
      "compute_project_vm_update": {
        "type": "object",
        "properties": {
          "userMetadata": {
            "title": "Vm userMetadata",
            "type": "string",
            "x-permissions": ["compute/vm.userMetadata/update"]
          },
          "name": {
            "title": "Vm name",
            "type": "string",
            "x-permissions": ["compute/vm.name/update"]
          }
        },
        "format": "patch vm"
      },
      "compute_project_vm_password_reset": {
        "type": "object",
        "required": ["userName", "modulus", "exponent"],
        "properties": {
          "userName": {
            "title": "Vm userName",
            "type": "string"
          },
          "modulus": {
            "title": "Vm modulus",
            "type": "string"
          },
          "exponent": {
            "title": "Vm exponent",
            "type": "string"
          }
        },
        "format": "Action password_reset"
      },
      "compute_project_vm_flavour": {
        "type": "object",
        "required": ["service"],
        "properties": {
          "service": {
            "title": "Vm service",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "compute/vm",
                "type": "flavour"
              }
            }
          }
        },
        "format": "Action flavour"
      },
      "compute_project_vm_serialport": {
        "type": "object",
        "properties": {
          "number": {
            "title": "Vm number",
            "type": "string",
            "enum": ["1", "2"],
            "default": "1"
          }
        },
        "format": "Action serialport"
      },
      "compute_project_vm_disk_create": {
        "type": "object",
        "required": ["disk"],
        "properties": {
          "disk": {
            "title": "Disk disk",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "storage/disk",
              "state": ["Detached"]
            },
            "x-permissions": ["storage/disk/attach"]
          }
        }
      },
      "compute_project_vm_iso_create": {
        "type": "object",
        "properties": {
          "iso": {
            "title": "Iso iso",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "storage/iso"
            },
            "x-permissions": ["storage/iso/attach"]
          }
        }
      },
      "vm": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": [
              "Other",
              "Running",
              "Off",
              "Stopping",
              "Saved",
              "Paused",
              "Starting",
              "Reset",
              "Saving",
              "Pausing",
              "Resuming",
              "FastSaved",
              "FastSaving",
              "RunningCritical",
              "OffCritical",
              "StoppingCritical",
              "SavedCritical",
              "PausedCritical",
              "StartingCritical",
              "ResetCritical",
              "SavingCritical",
              "PausingCritical",
              "ResumingCritical",
              "FastSavedCritical",
              "FastSavingCritical",
              "Unknown",
              "Processing",
              "NotCreated"
            ]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "compute/vm"
            }
          },
          "userMetadata": {
            "type": "string",
            "format": "base64"
          },
          "cpu": {
            "type": "number"
          },
          "memory": {
            "type": "number"
          },
          "fqdn": {
            "type": "string"
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["compute/vm.tag/list"]
          }
        }
      },
      "billing_project_reservation_create": {
        "type": "object",
        "required": ["name", "service"],
        "properties": {
          "name": {
            "title": "Reservation name",
            "type": "string"
          },
          "service": {
            "title": "Reservation service",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service",
              "filter": {
                "kind": "billing/reservation",
                "type": "flavour"
              }
            }
          },
          "tag": {
            "$ref": "#/components/schemas/tag_array"
          }
        },
        "format": "create reservation"
      },
      "billing_project_reservation_update": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Reservation name",
            "type": "string",
            "x-permissions": ["billing/reservation.name/update"]
          }
        },
        "format": "patch reservation"
      },
      "billing_project_reservation_assign": {
        "type": "object",
        "properties": {
          "resource": {
            "title": "Reservation resource",
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "compute/vm"
            },
            "x-permissions": ["compute/vm/use"]
          }
        },
        "format": "Action assign"
      },
      "reservation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Detached", "Attached", "Expired", "Billing", "Unknown"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "assigned": {
            "type": "string"
          },
          "sourceService": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "billing/service"
            }
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["billing/reservation.tag/list"]
          }
        }
      },
      "vmhost": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "flavour": {
            "type": "string"
          },
          "modifiedOn": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/user"
            }
          },
          "state": {
            "type": "string",
            "enum": ["Running", "Unknown", "Processing", "NotCreated"]
          },
          "project": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "iam/project"
            }
          },
          "uri": {
            "type": "string",
            "format": "uri",
            "x-resource": {
              "kind": "vmhost/instance"
            }
          },
          "type": {
            "type": "string",
            "enum": ["compute", "network", "vault", "container"]
          },
          "tag": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tag"
            },
            "x-permissions": ["vmhost/instance.tag/list"]
          }
        }
      },
      "service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "resource": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "billing": {
            "type": "object",
            "properties": {
              "price": {
                "type": "object",
                "properties": {
                  "PLN": {
                    "type": "number"
                  },
                  "EUR": {
                    "type": "number"
                  },
                  "USD": {
                    "type": "number"
                  },
                  "GBP": {
                    "type": "number"
                  }
                }
              },
              "period": {
                "type": "string"
              },
              "quantity": {
                "type": "number"
              },
              "oneTime": {
                "type": "boolean"
              },
              "reservations": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "period": {
                    "type": "string"
                  },
                  "price": {
                    "type": "object",
                    "properties": {
                      "PLN": {
                        "type": "number"
                      },
                      "EUR": {
                        "type": "number"
                      },
                      "USD": {
                        "type": "number"
                      },
                      "GBP": {
                        "type": "number"
                      }
                    }
                  },
                  "resourcePrice": {
                    "type": "object",
                    "properties": {
                      "PLN": {
                        "type": "number"
                      },
                      "EUR": {
                        "type": "number"
                      },
                      "USD": {
                        "type": "number"
                      },
                      "GBP": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          },
          "display": {
            "type": "object",
            "properties": {
              "unit": {
                "type": "object",
                "properties": {
                  "usage": {
                    "type": "string"
                  },
                  "billing": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "data": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "name": {
            "type": "string"
          },
          "availableServices": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uri": {
            "type": "string"
          }
        }
      }
    },
    "parameters": {
      "locationId": {
        "name": "locationId",
        "in": "path",
        "description": "Location Id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "projectId": {
        "name": "projectId",
        "in": "path",
        "description": "Project Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "organisationId": {
        "name": "organisationId",
        "in": "path",
        "description": "Organisation Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "x-idempotency-key": {
        "name": "x-idempotency-key",
        "in": "header",
        "description": "Idempotency key",
        "schema": {
          "type": "string"
        }
      },
      "userId": {
        "name": "userId",
        "in": "path",
        "description": "User Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "tag.value": {
        "name": "tag.value",
        "in": "query",
        "description": "Filter by tag.value",
        "schema": {
          "type": "string"
        }
      },
      "tag.key": {
        "name": "tag.key",
        "in": "query",
        "description": "Filter by tag.key",
        "schema": {
          "type": "string"
        }
      },
      "ticketId": {
        "name": "ticketId",
        "in": "path",
        "description": "Ticket Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "agentId": {
        "name": "agentId",
        "in": "path",
        "description": "Agent Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "instanceId": {
        "name": "instanceId",
        "in": "path",
        "description": "Instance Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "journalId": {
        "name": "journalId",
        "in": "path",
        "description": "Journal Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "registryId": {
        "name": "registryId",
        "in": "path",
        "description": "Registry Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "zoneId": {
        "name": "zoneId",
        "in": "path",
        "description": "Zone Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "diskId": {
        "name": "diskId",
        "in": "path",
        "description": "Disk Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "firewallId": {
        "name": "firewallId",
        "in": "path",
        "description": "Firewall Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "imageId": {
        "name": "imageId",
        "in": "path",
        "description": "Image Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "ipId": {
        "name": "ipId",
        "in": "path",
        "description": "Ip Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "isoId": {
        "name": "isoId",
        "in": "path",
        "description": "Iso Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "netadpId": {
        "name": "netadpId",
        "in": "path",
        "description": "Netadp Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "netgwId": {
        "name": "netgwId",
        "in": "path",
        "description": "Netgw Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "networkId": {
        "name": "networkId",
        "in": "path",
        "description": "Network Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "policyId": {
        "name": "policyId",
        "in": "path",
        "description": "Policy Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "replicaId": {
        "name": "replicaId",
        "in": "path",
        "description": "Replica Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "roleId": {
        "name": "roleId",
        "in": "path",
        "description": "Role Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "saId": {
        "name": "saId",
        "in": "path",
        "description": "Sa Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "vaultId": {
        "name": "vaultId",
        "in": "path",
        "description": "Vault Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "vmId": {
        "name": "vmId",
        "in": "path",
        "description": "Vm Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "reservationId": {
        "name": "reservationId",
        "in": "path",
        "description": "Reservation Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      },
      "serviceId": {
        "name": "serviceId",
        "in": "path",
        "description": "Service Id",
        "required": true,
        "schema": {
          "type": "string",
          "format": "ObjectId"
        }
      }
    },
    "requestBodies": {},
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "openIdConnectUrl": ".well-known/openid-configuration"
      },
      "iam": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://example.org/api/oauth/dialog",
            "scopes": {
              "iam/user/get": "",
              "iam/user.phone/update": "",
              "iam/user.lang/update": "",
              "iam/user.credential/list": "",
              "iam/user.credential/get": "",
              "iam/user.credential/delete": "",
              "iam/user.credential/create": "",
              "iam/user.credential.name/update": "",
              "iam/user.service/list": "",
              "iam/user.service/get": "",
              "iam/project/create": "",
              "iam/project/get": "",
              "iam/project.name/update": "",
              "iam/project/delete": "",
              "iam/project.billing/list": "",
              "iam/project.payment/list": "",
              "iam/project.invoice/list": "",
              "iam/project.proforma/list": "",
              "iam/project.credentialStore/list": "",
              "iam/project.credentialStore/create": "",
              "iam/project.credentialStore/get": "",
              "iam/project.credentialStore.name/update": "",
              "iam/project.credentialStore/delete": "",
              "iam/project.quota/list": "",
              "iam/project.quota/get": "",
              "iam/project.quota.user/update": "",
              "iam/project.quota.effective/update": "",
              "iam/project.invitation/list": "",
              "iam/project.invitation/get": "",
              "iam/project.invitation/delete": "",
              "iam/project.ownership/create": "",
              "iam/project.ownership/list": "",
              "iam/project.ownership/get": "",
              "iam/project.ownership/delete": "",
              "iam/project.service/list": "",
              "iam/project.service/get": "",
              "iam/project.tag/list": "",
              "iam/project.tag/create": "",
              "iam/project.tag/delete": "",
              "iam/project.tag/get": "",
              "iam/project.event/list": "",
              "iam/project.event/get": "",
              "support/ticket/create": "",
              "support/ticket/list": "",
              "support/ticket/get": "",
              "support/ticket/close": "",
              "support/ticket.message/list": "",
              "support/ticket.message/create": "",
              "support/ticket.message/get": "",
              "iam/organisation/get": "",
              "iam/organisation.name/update": "",
              "iam/organisation.billing/update": "",
              "iam/organisation/delete": "",
              "iam/organisation.transfer/accept": "",
              "iam/organisation.billing/list": "",
              "iam/organisation.payment/list": "",
              "iam/organisation.payment/get": "",
              "iam/organisation.payment/allocate": "",
              "iam/organisation.invoice/list": "",
              "iam/organisation.invoice/get": "",
              "iam/organisation.invoice/download": "",
              "iam/organisation.proforma/create": "",
              "iam/organisation.proforma/list": "",
              "iam/organisation.proforma/get": "",
              "iam/organisation.proforma/download": "",
              "iam/organisation.invitation/list": "",
              "iam/organisation.invitation/get": "",
              "iam/organisation.invitation/delete": "",
              "iam/organisation.ownership/create": "",
              "iam/organisation.ownership/list": "",
              "iam/organisation.ownership/get": "",
              "iam/organisation.ownership/delete": "",
              "iam/organisation.event/list": "",
              "iam/organisation.event/get": "",
              "provider/agent/create": "",
              "provider/agent/list": "",
              "provider/agent/get": "",
              "provider/agent.name/update": "",
              "provider/agent/delete": "",
              "provider/agent/start": "",
              "provider/agent/suspend": "",
              "provider/agent/inspect": "",
              "provider/agent/transfer": "",
              "provider/agent.resource/list": "",
              "provider/agent.resource/recreate": "",
              "provider/agent.resource/inspect": "",
              "provider/agent.resource.event/list": "",
              "provider/agent.credential/list": "",
              "provider/agent.credential/create": "",
              "provider/agent.credential/get": "",
              "provider/agent.credential.name/update": "",
              "provider/agent.credential/delete": "",
              "provider/agent.enabledService/list": "",
              "provider/agent.enabledService/create": "",
              "provider/agent.enabledService/get": "",
              "provider/agent.enabledService/delete": "",
              "provider/agent.service/list": "",
              "provider/agent.service/get": "",
              "provider/agent.tag/list": "",
              "provider/agent.tag/create": "",
              "provider/agent.tag/delete": "",
              "provider/agent.tag/get": "",
              "provider/agent.event/list": "",
              "provider/agent.event/get": "",
              "database/instance/create": "",
              "database/instance/list": "",
              "database/instance/get": "",
              "database/instance.name/update": "",
              "database/instance/delete": "",
              "database/instance/start": "",
              "database/instance/stop": "",
              "database/instance/transfer": "",
              "database/instance.credential/list": "",
              "database/instance.credential/create": "",
              "database/instance.credential/get": "",
              "database/instance.credential.name/update": "",
              "database/instance.credential/delete": "",
              "database/instance.service/list": "",
              "database/instance.service/get": "",
              "database/instance.tag/list": "",
              "database/instance.tag/create": "",
              "database/instance.tag/delete": "",
              "database/instance.tag/get": "",
              "database/instance.event/list": "",
              "database/instance.event/get": "",
              "insight/journal/create": "",
              "insight/journal/list": "",
              "insight/journal/get": "",
              "insight/journal.name/update": "",
              "insight/journal.retention/update": "",
              "insight/journal/delete": "",
              "insight/journal/transfer": "",
              "insight/journal.log/get": "",
              "insight/journal.credential/list": "",
              "insight/journal.credential/create": "",
              "insight/journal.credential/get": "",
              "insight/journal.credential.name/update": "",
              "insight/journal.credential/delete": "",
              "insight/journal.service/list": "",
              "insight/journal.service/get": "",
              "insight/journal.tag/list": "",
              "insight/journal.tag/create": "",
              "insight/journal.tag/delete": "",
              "insight/journal.tag/get": "",
              "insight/journal.event/list": "",
              "insight/journal.event/get": "",
              "insight/journal/read": "",
              "insight/journal/write": "",
              "container/registry/create": "",
              "container/registry/list": "",
              "container/registry/get": "",
              "container/registry.name/update": "",
              "container/registry/delete": "",
              "container/registry/start": "",
              "container/registry/stop": "",
              "container/registry/transfer": "",
              "container/registry.repository/list": "",
              "container/registry.repository/get": "",
              "container/registry.image/list": "",
              "container/registry.image/get": "",
              "container/registry.image/delete": "",
              "container/registry.credential/list": "",
              "container/registry.credential/create": "",
              "container/registry.credential/get": "",
              "container/registry.credential.name/update": "",
              "container/registry.credential/delete": "",
              "container/registry.domain/list": "",
              "container/registry.domain/create": "",
              "container/registry.domain/get": "",
              "container/registry.domain/delete": "",
              "container/registry.service/list": "",
              "container/registry.service/get": "",
              "container/registry.tag/list": "",
              "container/registry.tag/create": "",
              "container/registry.tag/delete": "",
              "container/registry.tag/get": "",
              "container/registry.event/list": "",
              "container/registry.event/get": "",
              "container/registry.repository/create": "push image",
              "container/registry.repository/read": "pull image",
              "iam/sa/use": "",
              "insight/journal/use": "",
              "website/instance.snapshot/use": "",
              "website/instance/create": "",
              "website/instance/list": "",
              "website/instance/get": "",
              "website/instance.name/update": "",
              "website/instance.image/update": "",
              "website/instance/delete": "",
              "website/instance/start": "",
              "website/instance/stop": "",
              "website/instance/restart": "",
              "website/instance/transfer": "",
              "website/instance.snapshot/list": "",
              "website/instance.snapshot/create": "",
              "website/instance.snapshot/delete": "",
              "website/instance.snapshot/get": "",
              "website/instance.snapshot/read": "",
              "website/instance.env/list": "",
              "website/instance.env/create": "",
              "website/instance.env/get": "",
              "website/instance.env/delete": "",
              "website/instance.link/list": "",
              "website/instance.link/create": "",
              "website/instance.link/get": "",
              "website/instance.link/delete": "",
              "website/instance.sideapp/list": "",
              "website/instance.sideapp/create": "",
              "website/instance.sideapp/get": "",
              "website/instance.sideapp/delete": "",
              "website/instance.credential/list": "",
              "website/instance.credential/create": "",
              "website/instance.credential/get": "",
              "website/instance.credential.name/update": "",
              "website/instance.credential/delete": "",
              "website/instance.domain/list": "",
              "website/instance.domain/create": "",
              "website/instance.domain/get": "",
              "website/instance.domain/delete": "",
              "website/instance.service/list": "",
              "website/instance.service/get": "",
              "website/instance.tag/list": "",
              "website/instance.tag/create": "",
              "website/instance.tag/delete": "",
              "website/instance.tag/get": "",
              "website/instance.event/list": "",
              "website/instance.event/get": "",
              "dns/zone/create": "",
              "dns/zone/list": "",
              "dns/zone/get": "",
              "dns/zone.name/update": "",
              "dns/zone/delete": "",
              "dns/zone.recordset/create": "",
              "dns/zone.recordset/list": "",
              "dns/zone.recordset/delete": "",
              "dns/zone.recordset/get": "",
              "dns/zone.recordset.ttl/update": "",
              "dns/zone.record/create": "",
              "dns/zone.record/delete": "",
              "dns/zone.record/list": "",
              "dns/zone.record/get": "",
              "dns/zone.service/list": "",
              "dns/zone.service/get": "",
              "dns/zone.tag/list": "",
              "dns/zone.tag/create": "",
              "dns/zone.tag/delete": "",
              "dns/zone.tag/get": "",
              "dns/zone.event/list": "",
              "dns/zone.event/get": "",
              "storage/disk/use": "",
              "compute/vm/use": "",
              "storage/disk/create": "",
              "storage/disk/list": "",
              "storage/disk/get": "",
              "storage/disk.name/update": "",
              "storage/disk/delete": "",
              "storage/disk.size/update": "",
              "storage/disk/attach": "",
              "storage/disk/detach": "",
              "storage/disk/read": "",
              "storage/disk/transfer": "",
              "storage/disk.service/list": "",
              "storage/disk.service/get": "",
              "storage/disk.tag/list": "",
              "storage/disk.tag/create": "",
              "storage/disk.tag/delete": "",
              "storage/disk.tag/get": "",
              "storage/disk.event/list": "",
              "storage/disk.event/get": "",
              "networking/firewall/create": "",
              "networking/firewall/list": "",
              "networking/firewall/get": "",
              "networking/firewall.name/update": "",
              "networking/firewall/delete": "",
              "networking/firewall/transfer": "",
              "networking/firewall.ingress/list": "",
              "networking/firewall.ingress/create": "",
              "networking/firewall.ingress/delete": "",
              "networking/firewall.ingress/get": "",
              "networking/firewall.egress/list": "",
              "networking/firewall.egress/create": "",
              "networking/firewall.egress/delete": "",
              "networking/firewall.egress/get": "",
              "networking/firewall.service/list": "",
              "networking/firewall.service/get": "",
              "networking/firewall.tag/list": "",
              "networking/firewall.tag/create": "",
              "networking/firewall.tag/delete": "",
              "networking/firewall.tag/get": "",
              "networking/firewall.event/list": "",
              "networking/firewall.event/get": "",
              "compute/replica/use": "",
              "storage/image/create": "",
              "storage/image/list": "",
              "storage/image/get": "",
              "storage/image.name/update": "",
              "storage/image.description/update": "",
              "storage/image/delete": "",
              "storage/image/transfer": "",
              "storage/image.disk/list": "",
              "storage/image.service/list": "",
              "storage/image.service/get": "",
              "storage/image.tag/list": "",
              "storage/image.tag/create": "",
              "storage/image.tag/delete": "",
              "storage/image.tag/get": "",
              "storage/image.event/list": "",
              "storage/image.event/get": "",
              "networking/network/use": "",
              "networking/ip/create": "",
              "networking/ip/list": "",
              "networking/ip/get": "",
              "networking/ip.ptrRecord/update": "",
              "networking/ip/delete": "",
              "networking/ip/persist": "",
              "networking/ip/use": "",
              "networking/ip/associate": "",
              "networking/ip/disassociate": "",
              "networking/ip/transfer": "",
              "networking/ip.service/list": "",
              "networking/ip.service/get": "",
              "networking/ip.tag/list": "",
              "networking/ip.tag/create": "",
              "networking/ip.tag/delete": "",
              "networking/ip.tag/get": "",
              "networking/ip.event/list": "",
              "networking/ip.event/get": "",
              "storage/iso/create": "",
              "storage/iso/list": "",
              "storage/iso/get": "",
              "storage/iso.name/update": "",
              "storage/iso/delete": "",
              "storage/iso/detach": "",
              "storage/iso/transfer": "",
              "storage/iso.service/list": "",
              "storage/iso.service/get": "",
              "storage/iso.tag/list": "",
              "storage/iso.tag/create": "",
              "storage/iso.tag/delete": "",
              "storage/iso.tag/get": "",
              "storage/iso.event/list": "",
              "storage/iso.event/get": "",
              "networking/firewall/use": "",
              "networking/netadp/create": "",
              "networking/netadp/list": "",
              "networking/netadp/get": "",
              "networking/netadp.firewall/update": "",
              "networking/netadp/delete": "",
              "networking/netadp.service/list": "",
              "networking/netadp.service/get": "",
              "networking/netadp.tag/list": "",
              "networking/netadp.tag/create": "",
              "networking/netadp.tag/delete": "",
              "networking/netadp.tag/get": "",
              "networking/netadp.event/list": "",
              "networking/netadp.event/get": "",
              "networking/netgw/create": "",
              "networking/netgw/list": "",
              "networking/netgw/get": "",
              "networking/netgw.name/update": "",
              "networking/netgw/delete": "",
              "networking/netgw/attach": "",
              "networking/netgw/detach": "",
              "networking/netgw.service/list": "",
              "networking/netgw.service/get": "",
              "networking/netgw.tag/list": "",
              "networking/netgw.tag/create": "",
              "networking/netgw.tag/delete": "",
              "networking/netgw.tag/get": "",
              "networking/netgw.event/list": "",
              "networking/netgw.event/get": "",
              "networking/network/create": "",
              "networking/network/list": "",
              "networking/network/get": "",
              "networking/network.name/update": "",
              "networking/network.gateway/update": "",
              "networking/network.firewall/update": "",
              "networking/network/delete": "",
              "networking/network.service/list": "",
              "networking/network.service/get": "",
              "networking/network.tag/list": "",
              "networking/network.tag/create": "",
              "networking/network.tag/delete": "",
              "networking/network.tag/get": "",
              "networking/network.event/list": "",
              "networking/network.event/get": "",
              "iam/role/use": "",
              "iam/policy/create": "",
              "iam/policy/list": "",
              "iam/policy/get": "",
              "iam/policy.name/update": "",
              "iam/policy/delete": "",
              "iam/policy.actor/list": "",
              "iam/policy.actor/create": "",
              "iam/policy.actor/get": "",
              "iam/policy.actor/delete": "",
              "iam/policy.service/list": "",
              "iam/policy.service/get": "",
              "iam/policy.tag/list": "",
              "iam/policy.tag/create": "",
              "iam/policy.tag/delete": "",
              "iam/policy.tag/get": "",
              "iam/policy.event/list": "",
              "iam/policy.event/get": "",
              "compute/replica/create": "",
              "compute/replica/list": "",
              "compute/replica/get": "",
              "compute/replica/delete": "",
              "compute/replica.service/list": "",
              "compute/replica.service/get": "",
              "compute/replica.tag/list": "",
              "compute/replica.tag/create": "",
              "compute/replica.tag/delete": "",
              "compute/replica.tag/get": "",
              "compute/replica.event/list": "",
              "compute/replica.event/get": "",
              "iam/role/create": "",
              "iam/role/list": "",
              "iam/role/get": "",
              "iam/role.name/update": "",
              "iam/role.description/update": "",
              "iam/role/delete": "",
              "iam/role.permission/list": "",
              "iam/role.permission/create": "",
              "iam/role.permission/delete": "",
              "iam/role.permission/get": "",
              "iam/role.service/list": "",
              "iam/role.service/get": "",
              "iam/role.tag/list": "",
              "iam/role.tag/create": "",
              "iam/role.tag/delete": "",
              "iam/role.tag/get": "",
              "iam/role.event/list": "",
              "iam/role.event/get": "",
              "iam/sa/create": "",
              "iam/sa/list": "",
              "iam/sa/get": "",
              "iam/sa.name/update": "",
              "iam/sa/delete": "",
              "iam/sa.credential/list": "",
              "iam/sa.credential/create": "",
              "iam/sa.credential/get": "",
              "iam/sa.credential.name/update": "",
              "iam/sa.credential/delete": "",
              "iam/sa.service/list": "",
              "iam/sa.service/get": "",
              "iam/sa.tag/list": "",
              "iam/sa.tag/create": "",
              "iam/sa.tag/delete": "",
              "iam/sa.tag/get": "",
              "iam/sa.event/list": "",
              "iam/sa.event/get": "",
              "iam/sa/delegate": "",
              "storage/vault.snapshot/use": "",
              "storage/vault/create": "",
              "storage/vault/list": "",
              "storage/vault/get": "",
              "storage/vault.name/update": "",
              "storage/vault/delete": "",
              "storage/vault/start": "",
              "storage/vault/stop": "",
              "storage/vault/resize": "",
              "storage/vault.snapshot/list": "",
              "storage/vault.snapshot/create": "",
              "storage/vault.snapshot/get": "",
              "storage/vault.snapshot/delete": "",
              "storage/vault.credential/list": "",
              "storage/vault.credential/create": "",
              "storage/vault.credential/get": "",
              "storage/vault.credential.name/update": "",
              "storage/vault.credential/delete": "",
              "storage/vault.service/list": "",
              "storage/vault.service/get": "",
              "storage/vault.tag/list": "",
              "storage/vault.tag/create": "",
              "storage/vault.tag/delete": "",
              "storage/vault.tag/get": "",
              "storage/vault.event/list": "",
              "storage/vault.event/get": "",
              "storage/image/use": "",
              "storage/iso/use": "",
              "compute/vm/create": "",
              "compute/vm/list": "",
              "compute/vm/get": "",
              "compute/vm.userMetadata/update": "",
              "compute/vm.name/update": "",
              "compute/vm/delete": "",
              "compute/vm/start": "",
              "compute/vm/restart": "",
              "compute/vm/stop": "",
              "compute/vm/turnoff": "",
              "compute/vm/passwordReset": "",
              "compute/vm/flavour": "",
              "compute/vm/console": "",
              "compute/vm.serialport/read": "",
              "storage/iso/attach": "",
              "compute/vm.service/list": "",
              "compute/vm.service/get": "",
              "compute/vm.tag/list": "",
              "compute/vm.tag/create": "",
              "compute/vm.tag/delete": "",
              "compute/vm.tag/get": "",
              "compute/vm.event/list": "",
              "compute/vm.event/get": "",
              "billing/reservation/create": "",
              "billing/reservation/list": "",
              "billing/reservation/get": "",
              "billing/reservation.name/update": "",
              "billing/reservation/delete": "",
              "billing/reservation/assign": "",
              "billing/reservation/extend": "",
              "billing/reservation.service/list": "",
              "billing/reservation.service/get": "",
              "billing/reservation.tag/list": "",
              "billing/reservation.tag/create": "",
              "billing/reservation.tag/delete": "",
              "billing/reservation.tag/get": "",
              "billing/reservation.event/list": "",
              "billing/reservation.event/get": "",
              "vmhost/instance/list": "",
              "vmhost/instance/get": "",
              "vmhost/instance.service/list": "",
              "vmhost/instance.service/get": "",
              "vmhost/instance.tag/list": "",
              "vmhost/instance.tag/create": "",
              "vmhost/instance.tag/delete": "",
              "vmhost/instance.tag/get": "",
              "vmhost/instance.event/list": "",
              "vmhost/instance.event/get": "",
              "billing/service/list": "",
              "billing/service/get": ""
            }
          }
        }
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid"
      },
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "error description"
                }
              }
            }
          }
        }
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "iam",
      "tags": [
        "iam_organisation",
        "iam_organisation_policy",
        "iam_organisation_role",
        "iam_project",
        "iam_project_policy",
        "iam_project_role",
        "iam_project_sa",
        "iam_user"
      ]
    },
    {
      "name": "support",
      "tags": ["support_project_ticket"]
    },
    {
      "name": "provider",
      "tags": ["provider_project_agent"]
    },
    {
      "name": "database",
      "tags": ["database_project_instance"]
    },
    {
      "name": "insight",
      "tags": ["insight_project_journal"]
    },
    {
      "name": "container",
      "tags": ["container_project_registry"]
    },
    {
      "name": "website",
      "tags": ["website_project_instance"]
    },
    {
      "name": "dns",
      "tags": ["dns_project_zone"]
    },
    {
      "name": "storage",
      "tags": [
        "storage_project_disk",
        "storage_project_image",
        "storage_project_iso",
        "storage_project_vault"
      ]
    },
    {
      "name": "networking",
      "tags": [
        "networking_project_firewall",
        "networking_project_ip",
        "networking_project_netadp",
        "networking_project_netgw",
        "networking_project_network"
      ]
    },
    {
      "name": "compute",
      "tags": ["compute_project_replica", "compute_project_vm"]
    },
    {
      "name": "billing",
      "tags": ["billing_project_reservation", "billing_project_service"]
    },
    {
      "name": "vmhost",
      "tags": ["vmhost_project_instance"]
    }
  ]
}
